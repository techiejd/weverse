%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: (Business profit crowdfunding and fundraising concept vector illustration with workers meeting and team discussion. Concept of leader and employee gain money.)
%%Creator: Adobe Illustrator(R) 22.1
%%For: ahmad safarudin
%%CreationDate: 12/6/2019
%%BoundingBox: 0 0 2400 1680
%%HiResBoundingBox: 0 0 2399.9998 1679.9998
%%CropBox: 0 0 2399.9998 1679.9998
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 22.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 22.1.0 x312 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%%Keywords: (fundraising, business, grant, crowdfunding, money, value, financial, solution, support, capital, cooperation, illustration, income, investor, team, vector, profit, concept, finance, growth, success, progress, investment, increase, market, st
%%+ock, businessman, achievement, banking, development, marketing, company, revenue, work, people, teamwork, idea, creative, office, flat, community, laptop, strategy, currency, cash, dollar, wealth, group, working, plan)

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%BeginPhotoshop: 968
% 3842494D04040000000003BC1C015A00031B25471C0100000200041C0205009D
% 427573696E6573732070726F6669742063726F776466756E64696E6720616E64
% 2066756E6472616973696E6720636F6E6365707420766563746F7220696C6C75
% 7374726174696F6E207769746820776F726B657273206D656574696E6720616E
% 64207465616D2064697363757373696F6E2E20436F6E63657074206F66206C65
% 6164657220616E6420656D706C6F796565206761696E206D6F6E65792E1C0219
% 000B66756E6472616973696E671C02190008627573696E6573731C0219000567
% 72616E741C0219000C63726F776466756E64696E671C021900056D6F6E65791C
% 0219000576616C75651C0219000966696E616E6369616C1C02190008736F6C75
% 74696F6E1C02190007737570706F72741C021900076361706974616C1C021900
% 0B636F6F7065726174696F6E1C0219000C696C6C757374726174696F6E1C0219
% 0006696E636F6D651C02190008696E766573746F721C021900047465616D1C02
% 190006766563746F721C0219000670726F6669741C02190007636F6E63657074
% 1C0219000766696E616E63651C0219000667726F7774681C0219000773756363
% 6573731C0219000870726F67726573731C0219000A696E766573746D656E741C
% 02190008696E6372656173651C021900066D61726B65741C0219000573746F63
% 6B1C0219000B627573696E6573736D616E1C0219000B616368696576656D656E
% 741C0219000762616E6B696E671C0219000B646576656C6F706D656E741C0219
% 00096D61726B6574696E671C02190007636F6D70616E791C0219000772657665
% 6E75651C02190004776F726B1C0219000670656F706C651C021900087465616D
% 776F726B1C02190004696465611C0219000863726561746976651C021900066F
% 66666963651C02190004666C61741C02190009636F6D6D756E6974791C021900
% 066C6170746F701C0219000873747261746567791C0219000863757272656E63
% 791C02190004636173681C02190006646F6C6C61721C021900067765616C7468
% 1C0219000567726F75701C02190007776F726B696E671C02190004706C616E1C
% 0278009D427573696E6573732070726F6669742063726F776466756E64696E67
% 20616E642066756E6472616973696E6720636F6E6365707420766563746F7220
% 696C6C757374726174696F6E207769746820776F726B657273206D656574696E
% 6720616E64207465616D2064697363757373696F6E2E20436F6E63657074206F
% 66206C656164657220616E6420656D706C6F796565206761696E206D6F6E6579
% 2E1C020000020004
%EndPhotoshop
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c143 79.161356, 2017/09/07-01:11:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmp:CreateDate>2019-12-06T00:57:02+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 22.1 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2019-12-06T00:57:02+07:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>180</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAjACMAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAjAAAAAEA&#xA;AQCMAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYqgded00PUXRirrazMrKaEERkggjMPtCRGnyEc+CX3FydGAc0Af50fveZWGqXbsY5b&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2019-12-06T00:57:02+07:00</xmp:MetadataDate>
         <pdf:Producer>Corel PDF Engine Version 20.0.0.633</pdf:Producer>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default"/>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2399.999810</stDim:w>
            <stDim:h>1679.999810</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:f7710722-fbad-874a-9814-3ea22206f134</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:f7710722-fbad-874a-9814-3ea22206f134</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:f7710722-fbad-874a-9814-3ea22206f134</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f7710722-fbad-874a-9814-3ea22206f134</stEvt:instanceID>
                  <stEvt:when>2019-12-06T00:57:02+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 22.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1680 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1680 li
2400 1680 li
2400 0 li
cp
clp
0 1680 mo
2400 1680 li
2400 0 li
0 0 li
0 1680 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
2205.13 1424.64 mo
2205.13 1371.21 1755.17 1327.9 1200.12 1327.9 cv
645.069 1327.9 195.109 1371.21 195.109 1424.64 cv
195.109 1478.07 645.069 1521.38 1200.12 1521.38 cv
1755.17 1521.38 2205.13 1478.07 2205.13 1424.64 cv
cp
.917647 .933333 .976471 rgb
ef
741.17 229.701 mo
1171.79 229.701 li
1171.79 158.615 li
741.17 158.615 li
741.17 229.701 li
cp
1 .560784 .00784314 rgb
ef
1162.63 165.981 mo
1162.63 222.332 li
1142.66 222.332 li
1133.89 203.242 1124.58 184.433 1114.73 165.981 cv
1162.63 165.981 li
cp
1 .631373 .0156863 rgb
ef
1026.38 165.981 mo
1114.73 165.981 li
1124.58 184.433 1133.89 203.242 1142.66 222.332 cv
1054.04 222.332 li
1046.1 203.021 1036.8 184.203 1026.38 165.981 cv
cp
.996078 .8 0 rgb
ef
1026.38 165.981 mo
1036.8 184.203 1046.1 203.021 1054.04 222.332 cv
998.422 222.332 li
988.341 202.994 977.248 184.132 964.893 165.981 cv
1026.38 165.981 li
cp
1 .631373 .0156863 rgb
ef
964.893 165.981 mo
977.248 184.132 988.341 202.994 998.422 222.332 cv
921.376 222.332 li
911.875 203.247 901.799 184.472 891.417 165.981 cv
964.893 165.981 li
cp
1 .560784 .00784314 rgb
ef
845.429 165.981 mo
891.417 165.981 li
901.799 184.472 911.875 203.247 921.376 222.332 cv
865.931 222.332 li
860.217 203.099 853.369 184.249 845.429 165.981 cv
cp
1 .631373 .0156863 rgb
ef
845.429 165.981 mo
853.369 184.249 860.217 203.099 865.931 222.332 cv
805.763 222.332 li
795.284 203.224 784.137 184.443 772.467 165.981 cv
845.429 165.981 li
cp
.996078 .8 0 rgb
ef
805.763 222.332 mo
750.326 222.332 li
750.326 165.981 li
772.467 165.981 li
784.137 184.443 795.284 203.224 805.763 222.332 cv
cp
1 .631373 .0156863 rgb
ef
697.996 369.189 mo
761.905 401.832 li
564.164 779.769 li
500.248 747.129 li
697.996 369.189 li
cp
1 .560784 .00784314 rgb
ef
700.409 380.611 mo
751.075 406.486 li
741.909 424.012 li
720.717 422.941 699.533 422.475 678.419 422.643 cv
700.409 380.611 li
cp
1 .631373 .0156863 rgb
ef
637.847 500.189 mo
678.419 422.643 li
699.533 422.475 720.717 422.941 741.909 424.012 cv
701.215 501.789 li
680.205 499.891 659.013 499.415 637.847 500.189 cv
cp
.996078 .8 0 rgb
ef
637.847 500.189 mo
659.013 499.415 680.205 499.891 701.215 501.789 cv
675.673 550.606 li
653.656 550.573 631.604 551.646 609.61 554.153 cv
637.847 500.189 li
cp
1 .631373 .0156863 rgb
ef
609.61 554.153 mo
631.604 551.646 653.656 550.573 675.673 550.606 cv
640.292 618.227 li
618.768 617.799 597.263 618.023 575.868 618.642 cv
609.61 554.153 li
cp
1 .560784 .00784314 rgb
ef
554.749 659.003 mo
575.868 618.642 li
597.263 618.023 618.768 617.799 640.292 618.227 cv
614.832 666.886 li
594.916 663.071 574.818 660.427 554.749 659.003 cv
cp
1 .631373 .0156863 rgb
ef
554.749 659.003 mo
574.818 660.427 594.916 663.071 614.832 666.886 cv
587.202 719.696 li
565.209 720.116 543.205 721.278 521.246 723.038 cv
554.749 659.003 li
cp
.996078 .8 0 rgb
ef
587.202 719.696 mo
561.744 768.35 li
511.079 742.473 li
521.246 723.038 li
543.205 721.278 565.209 720.116 587.202 719.696 cv
cp
1 .631373 .0156863 rgb
ef
604.469 397.134 mo
658.974 443.537 li
377.891 765.843 li
323.382 719.442 li
604.469 397.134 li
cp
1 .560784 .00784314 rgb
ef
604.139 408.796 mo
647.347 445.582 li
634.313 460.525 li
613.953 454.629 593.451 449.319 572.876 444.644 cv
604.139 408.796 li
cp
1 .631373 .0156863 rgb
ef
515.204 510.774 mo
572.876 444.644 li
593.451 449.319 613.953 454.629 634.313 460.525 cv
576.47 526.855 li
556.478 520.197 535.974 514.873 515.204 510.774 cv
cp
.996078 .8 0 rgb
ef
515.204 510.774 mo
535.974 514.873 556.478 520.197 576.47 526.855 cv
540.164 568.487 li
518.754 563.407 497.051 559.398 475.068 556.795 cv
515.204 510.774 li
cp
1 .631373 .0156863 rgb
ef
475.068 556.795 mo
497.051 559.398 518.754 563.407 540.164 568.487 cv
489.871 626.154 li
469.035 620.805 448.063 616.09 427.104 611.792 cv
475.068 556.795 li
cp
1 .560784 .00784314 rgb
ef
397.086 646.215 mo
427.104 611.792 li
448.063 616.09 469.035 620.805 489.871 626.154 cv
453.679 667.654 li
435.202 659.377 416.273 652.197 397.086 646.215 cv
cp
1 .631373 .0156863 rgb
ef
397.086 646.215 mo
416.273 652.197 435.202 659.377 453.679 667.654 cv
414.404 712.687 li
392.914 708.057 371.235 704.139 349.461 700.825 cv
397.086 646.215 li
cp
.996078 .8 0 rgb
ef
414.404 712.687 mo
378.22 754.18 li
335.008 717.396 li
349.461 700.825 li
371.235 704.139 392.914 708.057 414.404 712.687 cv
cp
1 .631373 .0156863 rgb
ef
517.382 387.623 mo
571.888 434.025 li
290.801 756.332 li
236.294 709.934 li
517.382 387.623 li
cp
1 .560784 .00784314 rgb
ef
517.05 399.288 mo
560.259 436.074 li
547.227 451.015 li
526.865 445.119 506.365 439.808 485.788 435.132 cv
517.05 399.288 li
cp
1 .631373 .0156863 rgb
ef
428.116 501.265 mo
485.788 435.132 li
506.365 439.808 526.865 445.119 547.227 451.015 cv
489.381 517.344 li
469.39 510.686 448.888 505.362 428.116 501.265 cv
cp
.996078 .8 0 rgb
ef
428.116 501.265 mo
448.888 505.362 469.39 510.686 489.381 517.344 cv
453.075 558.976 li
431.668 553.899 409.964 549.888 387.979 547.284 cv
428.116 501.265 li
cp
1 .631373 .0156863 rgb
ef
387.979 547.284 mo
409.964 549.888 431.668 553.899 453.075 558.976 cv
402.783 616.643 li
381.945 611.293 360.975 606.58 340.018 602.281 cv
387.979 547.284 li
cp
1 .560784 .00784314 rgb
ef
309.997 636.704 mo
340.018 602.281 li
360.975 606.58 381.945 611.293 402.783 616.643 cv
366.591 658.143 li
348.114 649.866 329.186 642.686 309.997 636.704 cv
cp
1 .631373 .0156863 rgb
ef
309.997 636.704 mo
329.186 642.686 348.114 649.866 366.591 658.143 cv
327.315 703.176 li
305.824 698.546 284.147 694.63 262.373 691.314 cv
309.997 636.704 li
cp
.996078 .8 0 rgb
ef
327.315 703.176 mo
291.131 744.669 li
247.922 707.886 li
262.373 691.314 li
284.147 694.63 305.824 698.546 327.315 703.176 cv
cp
1 .631373 .0156863 rgb
ef
685.925 300.786 mo
1116.54 300.786 li
1116.54 229.701 li
685.925 229.701 li
685.925 300.786 li
cp
1 .560784 .00784314 rgb
ef
1107.38 237.067 mo
1107.38 293.419 li
1087.41 293.419 li
1078.65 274.327 1069.34 255.519 1059.49 237.067 cv
1107.38 237.067 li
cp
1 .631373 .0156863 rgb
ef
971.137 237.067 mo
1059.49 237.067 li
1069.34 255.519 1078.65 274.327 1087.41 293.419 cv
998.799 293.419 li
990.853 274.11 981.55 255.288 971.137 237.067 cv
cp
.996078 .8 0 rgb
ef
971.137 237.067 mo
981.55 255.288 990.853 274.11 998.799 293.419 cv
943.175 293.419 li
933.096 274.079 922.001 255.22 909.65 237.067 cv
971.137 237.067 li
cp
1 .631373 .0156863 rgb
ef
909.65 237.067 mo
922.001 255.22 933.096 274.079 943.175 293.419 cv
866.131 293.419 li
856.63 274.332 846.557 255.56 836.172 237.067 cv
909.65 237.067 li
cp
1 .560784 .00784314 rgb
ef
790.182 237.067 mo
836.172 237.067 li
846.557 255.56 856.63 274.332 866.131 293.419 cv
810.686 293.419 li
804.972 274.188 798.122 255.332 790.182 237.067 cv
cp
1 .631373 .0156863 rgb
ef
790.182 237.067 mo
798.122 255.332 804.972 274.188 810.686 293.419 cv
750.518 293.419 li
740.042 274.31 728.893 255.529 717.222 237.067 cv
790.182 237.067 li
cp
.996078 .8 0 rgb
ef
750.518 293.419 mo
695.083 293.419 li
695.083 237.067 li
717.222 237.067 li
728.893 255.529 740.042 274.31 750.518 293.419 cv
cp
1 .631373 .0156863 rgb
ef
728.016 371.871 mo
1158.63 371.871 li
1158.63 300.785 li
728.016 300.785 li
728.016 371.871 li
cp
1 .560784 .00784314 rgb
ef
1149.47 308.152 mo
1149.47 364.504 li
1129.51 364.504 li
1120.74 345.412 1111.43 326.604 1101.58 308.152 cv
1149.47 308.152 li
cp
1 .631373 .0156863 rgb
ef
1013.23 308.152 mo
1101.58 308.152 li
1111.43 326.604 1120.74 345.412 1129.51 364.504 cv
1040.89 364.504 li
1032.94 345.195 1023.64 326.373 1013.23 308.152 cv
cp
.996078 .8 0 rgb
ef
1013.23 308.152 mo
1023.64 326.373 1032.94 345.195 1040.89 364.504 cv
985.269 364.504 li
975.188 345.166 964.094 326.305 951.742 308.152 cv
1013.23 308.152 li
cp
1 .631373 .0156863 rgb
ef
951.742 308.152 mo
964.094 326.305 975.188 345.166 985.269 364.504 cv
908.222 364.504 li
898.724 345.417 888.648 326.645 878.263 308.152 cv
951.742 308.152 li
cp
1 .560784 .00784314 rgb
ef
832.275 308.152 mo
878.263 308.152 li
888.648 326.645 898.724 345.417 908.222 364.504 cv
852.777 364.504 li
847.062 345.272 840.212 326.419 832.275 308.152 cv
cp
1 .631373 .0156863 rgb
ef
832.275 308.152 mo
840.212 326.419 847.062 345.272 852.777 364.504 cv
792.608 364.504 li
782.133 345.394 770.984 326.613 759.313 308.152 cv
832.275 308.152 li
cp
.996078 .8 0 rgb
ef
792.608 364.504 mo
737.174 364.504 li
737.174 308.152 li
759.313 308.152 li
770.984 326.613 782.133 345.394 792.608 364.504 cv
cp
1 .631373 .0156863 rgb
ef
778 442.956 mo
1208.62 442.956 li
1208.62 371.871 li
778 371.871 li
778 442.956 li
cp
1 .560784 .00784314 rgb
ef
1199.45 379.237 mo
1199.45 435.589 li
1179.49 435.589 li
1170.72 416.5 1161.41 397.688 1151.57 379.237 cv
1199.45 379.237 li
cp
1 .631373 .0156863 rgb
ef
1063.21 379.237 mo
1151.57 379.237 li
1161.41 397.688 1170.72 416.5 1179.49 435.589 cv
1090.87 435.589 li
1082.93 416.28 1073.63 397.458 1063.21 379.237 cv
cp
.996078 .8 0 rgb
ef
1063.21 379.237 mo
1073.63 397.458 1082.93 416.28 1090.87 435.589 cv
1035.25 435.589 li
1025.17 416.251 1014.08 397.39 1001.73 379.237 cv
1063.21 379.237 li
cp
1 .631373 .0156863 rgb
ef
1001.73 379.237 mo
1014.08 397.39 1025.17 416.251 1035.25 435.589 cv
958.206 435.589 li
948.708 416.502 938.629 397.729 928.25 379.237 cv
1001.73 379.237 li
cp
1 .560784 .00784314 rgb
ef
882.259 379.237 mo
928.25 379.237 li
938.629 397.729 948.708 416.502 958.206 435.589 cv
902.762 435.589 li
897.046 416.357 890.199 397.504 882.259 379.237 cv
cp
1 .631373 .0156863 rgb
ef
882.259 379.237 mo
890.199 397.504 897.046 416.357 902.762 435.589 cv
842.593 435.589 li
832.117 416.479 820.969 397.699 809.299 379.237 cv
882.259 379.237 li
cp
.996078 .8 0 rgb
ef
842.593 435.589 mo
787.158 435.589 li
787.158 379.237 li
809.299 379.237 li
820.969 397.699 832.117 416.479 842.593 435.589 cv
cp
1 .631373 .0156863 rgb
ef
741.17 514.041 mo
1171.79 514.041 li
1171.79 442.955 li
741.17 442.955 li
741.17 514.041 li
cp
1 .560784 .00784314 rgb
ef
1162.63 450.322 mo
1162.63 506.674 li
1142.66 506.674 li
1133.89 487.585 1124.58 468.775 1114.73 450.322 cv
1162.63 450.322 li
cp
1 .631373 .0156863 rgb
ef
1026.38 450.322 mo
1114.73 450.322 li
1124.58 468.775 1133.89 487.585 1142.66 506.674 cv
1054.04 506.674 li
1046.1 487.365 1036.8 468.545 1026.38 450.322 cv
cp
.996078 .8 0 rgb
ef
1026.38 450.322 mo
1036.8 468.545 1046.1 487.365 1054.04 506.674 cv
998.422 506.674 li
988.341 487.336 977.248 468.475 964.893 450.322 cv
1026.38 450.322 li
cp
1 .631373 .0156863 rgb
ef
964.893 450.322 mo
977.248 468.475 988.341 487.336 998.422 506.674 cv
921.376 506.674 li
911.875 487.587 901.799 468.815 891.417 450.322 cv
964.893 450.322 li
cp
1 .560784 .00784314 rgb
ef
845.429 450.322 mo
891.417 450.322 li
901.799 468.815 911.875 487.587 921.376 506.674 cv
865.931 506.674 li
860.217 487.442 853.369 468.589 845.429 450.322 cv
cp
1 .631373 .0156863 rgb
ef
845.429 450.322 mo
853.369 468.589 860.217 487.442 865.931 506.674 cv
805.763 506.674 li
795.284 487.564 784.137 468.784 772.467 450.322 cv
845.429 450.322 li
cp
.996078 .8 0 rgb
ef
805.763 506.674 mo
750.326 506.674 li
750.326 450.322 li
772.467 450.322 li
784.137 468.784 795.284 487.564 805.763 506.674 cv
cp
1 .631373 .0156863 rgb
ef
704.34 585.126 mo
1134.96 585.126 li
1134.96 514.041 li
704.34 514.041 li
704.34 585.126 li
cp
1 .560784 .00784314 rgb
ef
1125.79 521.407 mo
1125.79 577.759 li
1105.83 577.759 li
1097.06 558.67 1087.75 539.861 1077.9 521.407 cv
1125.79 521.407 li
cp
1 .631373 .0156863 rgb
ef
989.549 521.407 mo
1077.9 521.407 li
1087.75 539.861 1097.06 558.67 1105.83 577.759 cv
1017.21 577.759 li
1009.27 558.45 999.965 539.63 989.549 521.407 cv
cp
.996078 .8 0 rgb
ef
989.549 521.407 mo
999.965 539.63 1009.27 558.45 1017.21 577.759 cv
961.592 577.759 li
951.511 558.421 940.418 539.56 928.063 521.407 cv
989.549 521.407 li
cp
1 .631373 .0156863 rgb
ef
928.063 521.407 mo
940.418 539.56 951.511 558.421 961.592 577.759 cv
884.546 577.759 li
875.045 558.673 864.969 539.9 854.587 521.407 cv
928.063 521.407 li
cp
1 .560784 .00784314 rgb
ef
808.599 521.407 mo
854.587 521.407 li
864.969 539.9 875.045 558.673 884.546 577.759 cv
829.102 577.759 li
823.386 558.528 816.538 539.674 808.599 521.407 cv
cp
1 .631373 .0156863 rgb
ef
808.599 521.407 mo
816.538 539.674 823.386 558.528 829.102 577.759 cv
768.932 577.759 li
758.455 558.65 747.308 539.869 735.637 521.407 cv
808.599 521.407 li
cp
.996078 .8 0 rgb
ef
768.932 577.759 mo
713.496 577.759 li
713.496 521.407 li
735.637 521.407 li
747.308 539.869 758.455 558.65 768.932 577.759 cv
cp
1 .631373 .0156863 rgb
ef
791.154 656.213 mo
1221.77 656.213 li
1221.77 585.126 li
791.154 585.126 li
791.154 656.213 li
cp
1 .560784 .00784314 rgb
ef
1212.61 592.492 mo
1212.61 648.844 li
1192.64 648.844 li
1183.88 629.755 1174.56 610.946 1164.72 592.492 cv
1212.61 592.492 li
cp
1 .631373 .0156863 rgb
ef
1076.37 592.492 mo
1164.72 592.492 li
1174.56 610.946 1183.88 629.755 1192.64 648.844 cv
1104.03 648.844 li
1096.08 629.535 1086.78 610.715 1076.37 592.492 cv
cp
.996078 .8 0 rgb
ef
1076.37 592.492 mo
1086.78 610.715 1096.08 629.535 1104.03 648.844 cv
1048.41 648.844 li
1038.33 629.506 1027.23 610.646 1014.88 592.492 cv
1076.37 592.492 li
cp
1 .631373 .0156863 rgb
ef
1014.88 592.492 mo
1027.23 610.646 1038.33 629.506 1048.41 648.844 cv
971.362 648.844 li
961.859 629.758 951.786 610.985 941.404 592.492 cv
1014.88 592.492 li
cp
1 .560784 .00784314 rgb
ef
895.413 592.492 mo
941.404 592.492 li
951.786 610.985 961.859 629.758 971.362 648.844 cv
915.918 648.844 li
910.203 629.613 903.35 610.759 895.413 592.492 cv
cp
1 .631373 .0156863 rgb
ef
895.413 592.492 mo
903.35 610.759 910.203 629.613 915.918 648.844 cv
855.749 648.844 li
845.271 629.735 834.121 610.954 822.453 592.492 cv
895.413 592.492 li
cp
.996078 .8 0 rgb
ef
855.749 648.844 mo
800.313 648.844 li
800.313 592.492 li
822.453 592.492 li
834.121 610.954 845.271 629.735 855.749 648.844 cv
cp
1 .631373 .0156863 rgb
ef
741.17 727.299 mo
1171.79 727.299 li
1171.79 656.213 li
741.17 656.213 li
741.17 727.299 li
cp
1 .560784 .00784314 rgb
ef
1162.63 663.58 mo
1162.63 719.929 li
1142.66 719.929 li
1133.89 700.841 1124.58 682.031 1114.73 663.58 cv
1162.63 663.58 li
cp
1 .631373 .0156863 rgb
ef
1026.38 663.58 mo
1114.73 663.58 li
1124.58 682.031 1133.89 700.841 1142.66 719.929 cv
1054.04 719.929 li
1046.1 700.62 1036.8 681.8 1026.38 663.58 cv
cp
.996078 .8 0 rgb
ef
1026.38 663.58 mo
1036.8 681.8 1046.1 700.62 1054.04 719.929 cv
998.422 719.929 li
988.341 700.591 977.248 681.733 964.893 663.58 cv
1026.38 663.58 li
cp
1 .631373 .0156863 rgb
ef
964.893 663.58 mo
977.248 681.733 988.341 700.591 998.422 719.929 cv
921.376 719.929 li
911.875 700.846 901.799 682.07 891.417 663.58 cv
964.893 663.58 li
cp
1 .560784 .00784314 rgb
ef
845.429 663.58 mo
891.417 663.58 li
901.799 682.07 911.875 700.846 921.376 719.929 cv
865.931 719.929 li
860.217 700.698 853.369 681.847 845.429 663.58 cv
cp
1 .631373 .0156863 rgb
ef
845.429 663.58 mo
853.369 681.847 860.217 700.698 865.931 719.929 cv
805.763 719.929 li
795.284 700.822 784.137 682.042 772.467 663.58 cv
845.429 663.58 li
cp
.996078 .8 0 rgb
ef
805.763 719.929 mo
750.326 719.929 li
750.326 663.58 li
772.467 663.58 li
784.137 682.042 795.284 700.822 805.763 719.929 cv
cp
1 .631373 .0156863 rgb
ef
905.52 636.906 mo
905.52 745.144 994.331 832.888 1103.88 832.888 cv
1213.44 832.888 1302.24 745.144 1302.24 636.906 cv
1302.24 528.669 1213.44 440.925 1103.88 440.925 cv
994.331 440.925 905.52 528.669 905.52 636.906 cv
cp
1 .560784 .00784314 rgb
ef
916.224 636.906 mo
916.224 739.304 1000.24 822.317 1103.88 822.317 cv
1207.53 822.317 1291.54 739.304 1291.54 636.906 cv
1291.54 534.509 1207.53 451.497 1103.88 451.497 cv
1000.24 451.497 916.224 534.509 916.224 636.906 cv
cp
1 .631373 .0156863 rgb
ef
944.147 636.906 mo
944.147 724.068 1015.66 794.726 1103.88 794.726 cv
1192.1 794.726 1263.62 724.068 1263.62 636.906 cv
1263.62 549.745 1192.1 479.086 1103.88 479.086 cv
1015.66 479.086 944.147 549.745 944.147 636.906 cv
cp
1 .560784 .00784314 rgb
ef
1095.43 755.059 mo
1095.43 725.126 li
1065.43 720.23 1049.4 698.935 1049.4 676.194 cv
1049.4 650.577 1064.55 635.613 1094.56 623.525 cv
1119.91 613.163 1130.68 605.678 1130.68 590.708 cv
1130.68 579.196 1122.24 565.957 1099.81 565.957 cv
1081.16 565.957 1069.22 572.291 1063.1 575.745 cv
1055.81 556.746 li
1064.26 551.853 1076.21 547.249 1093.69 546.673 cv
1093.69 518.752 li
1111.75 518.752 li
1111.75 547.822 li
1138.55 552.139 1155.74 570.274 1155.74 594.165 cv
1155.74 619.204 1137.38 632.444 1107.67 643.957 cv
1086.11 652.594 1074.75 662.379 1074.75 678.207 cv
1074.75 694.615 1088.73 706.416 1109.42 706.416 cv
1125.73 706.416 1140.88 700.947 1151.37 694.04 cv
1158.36 713.323 li
1148.16 720.521 1130.68 725.701 1113.79 725.986 cv
1113.79 755.059 li
1095.43 755.059 li
cp
.996078 .8 0 rgb
ef
513.783 631.838 mo
513.783 740.074 602.593 827.819 712.145 827.819 cv
821.696 827.819 910.506 740.074 910.506 631.838 cv
910.506 523.598 821.696 435.854 712.145 435.854 cv
602.593 435.854 513.783 523.598 513.783 631.838 cv
cp
1 .560784 .00784314 rgb
ef
524.484 631.838 mo
524.484 734.234 608.503 817.245 712.145 817.245 cv
815.787 817.245 899.805 734.234 899.805 631.838 cv
899.805 529.435 815.787 446.428 712.145 446.428 cv
608.503 446.428 524.484 529.435 524.484 631.838 cv
cp
1 .631373 .0156863 rgb
ef
552.41 631.838 mo
552.41 718.996 623.926 789.653 712.145 789.653 cv
800.364 789.653 871.877 718.996 871.877 631.838 cv
871.877 544.673 800.364 474.016 712.145 474.016 cv
623.926 474.016 552.41 544.673 552.41 631.838 cv
cp
1 .560784 .00784314 rgb
ef
720.592 749.989 mo
720.592 720.054 li
750.597 715.161 766.622 693.863 766.622 671.123 cv
766.622 645.507 751.474 630.541 721.466 618.453 cv
696.121 608.089 685.344 600.608 685.344 585.639 cv
685.344 574.126 693.789 560.885 716.223 560.885 cv
734.869 560.885 746.809 567.219 752.931 570.673 cv
760.212 551.677 li
751.762 546.785 739.821 542.177 722.34 541.601 cv
722.34 513.68 li
704.277 513.68 li
704.277 542.752 li
677.477 547.07 660.288 565.205 660.288 589.093 cv
660.288 614.136 678.642 627.373 708.356 638.888 cv
729.917 647.522 741.276 657.311 741.276 673.138 cv
741.276 689.546 727.292 701.346 706.609 701.346 cv
690.294 701.346 675.146 695.878 664.658 688.97 cv
657.667 708.254 li
667.862 715.449 685.344 720.632 702.239 720.917 cv
702.239 749.989 li
720.592 749.989 li
cp
.996078 .8 0 rgb
ef
952.669 493.528 mo
1383.29 493.528 li
1383.29 422.442 li
952.669 422.442 li
952.669 493.528 li
cp
1 .560784 .00784314 rgb
ef
1374.12 429.81 mo
1374.12 486.162 li
1354.16 486.162 li
1345.39 467.07 1336.08 448.261 1326.23 429.81 cv
1374.12 429.81 li
cp
1 .631373 .0156863 rgb
ef
1237.88 429.81 mo
1326.23 429.81 li
1336.08 448.261 1345.39 467.07 1354.16 486.162 cv
1265.54 486.162 li
1257.6 466.849 1248.29 448.03 1237.88 429.81 cv
cp
.996078 .8 0 rgb
ef
1237.88 429.81 mo
1248.29 448.03 1257.6 466.849 1265.54 486.162 cv
1209.92 486.162 li
1199.84 466.821 1188.75 447.963 1176.4 429.81 cv
1237.88 429.81 li
cp
1 .631373 .0156863 rgb
ef
1176.4 429.81 mo
1188.75 447.963 1199.84 466.821 1209.92 486.162 cv
1132.88 486.162 li
1123.38 467.075 1113.3 448.299 1102.92 429.81 cv
1176.4 429.81 li
cp
1 .560784 .00784314 rgb
ef
1056.93 429.81 mo
1102.92 429.81 li
1113.3 448.299 1123.38 467.075 1132.88 486.162 cv
1077.43 486.162 li
1071.72 466.927 1064.87 448.077 1056.93 429.81 cv
cp
1 .631373 .0156863 rgb
ef
1056.93 429.81 mo
1064.87 448.077 1071.72 466.927 1077.43 486.162 cv
1017.26 486.162 li
1006.78 467.051 995.637 448.271 983.967 429.81 cv
1056.93 429.81 li
cp
.996078 .8 0 rgb
ef
1017.26 486.162 mo
961.828 486.162 li
961.828 429.81 li
983.967 429.81 li
995.637 448.271 1006.78 467.051 1017.26 486.162 cv
cp
1 .631373 .0156863 rgb
ef
909.493 633.018 mo
973.406 665.66 li
775.661 1043.6 li
711.745 1010.96 li
909.493 633.018 li
cp
1 .560784 .00784314 rgb
ef
911.909 644.439 mo
962.578 670.313 li
953.409 687.84 li
932.217 686.769 911.03 686.304 889.916 686.47 cv
911.909 644.439 li
cp
1 .631373 .0156863 rgb
ef
849.344 764.017 mo
889.916 686.47 li
911.03 686.304 932.217 686.769 953.409 687.84 cv
912.713 765.617 li
891.705 763.722 870.51 763.242 849.344 764.017 cv
cp
.996078 .8 0 rgb
ef
849.344 764.017 mo
870.51 763.242 891.705 763.722 912.713 765.617 cv
887.173 814.434 li
865.156 814.4 843.104 815.474 821.107 817.981 cv
849.344 764.017 li
cp
1 .631373 .0156863 rgb
ef
821.107 817.981 mo
843.104 815.474 865.156 814.4 887.173 814.434 cv
851.79 882.055 li
830.266 881.627 808.763 881.851 787.368 882.471 cv
821.107 817.981 li
cp
1 .560784 .00784314 rgb
ef
766.247 922.831 mo
787.368 882.471 li
808.763 881.851 830.266 881.627 851.79 882.055 cv
826.329 930.716 li
806.414 926.899 786.316 924.255 766.247 922.831 cv
cp
1 .631373 .0156863 rgb
ef
766.247 922.831 mo
786.316 924.255 806.414 926.899 826.329 930.716 cv
798.702 983.524 li
776.706 983.944 754.703 985.106 732.743 986.869 cv
766.247 922.831 li
cp
.996078 .8 0 rgb
ef
798.702 983.524 mo
773.242 1032.18 li
722.576 1006.3 li
732.743 986.869 li
754.703 985.106 776.706 983.944 798.702 983.524 cv
cp
1 .631373 .0156863 rgb
ef
815.968 660.961 mo
870.472 707.364 li
589.388 1029.67 li
534.882 983.27 li
815.968 660.961 li
cp
1 .560784 .00784314 rgb
ef
815.636 672.627 mo
858.845 709.413 li
845.813 724.353 li
825.45 718.457 804.951 713.146 784.373 708.471 cv
815.636 672.627 li
cp
1 .631373 .0156863 rgb
ef
726.702 774.602 mo
784.373 708.471 li
804.951 713.146 825.45 718.457 845.813 724.353 cv
787.967 790.683 li
767.976 784.024 747.474 778.701 726.702 774.602 cv
cp
.996078 .8 0 rgb
ef
726.702 774.602 mo
747.474 778.701 767.976 784.024 787.967 790.683 cv
751.661 832.315 li
730.251 827.235 708.548 823.227 686.568 820.623 cv
726.702 774.602 li
cp
1 .631373 .0156863 rgb
ef
686.568 820.623 mo
708.548 823.227 730.251 827.235 751.661 832.315 cv
701.371 889.981 li
680.532 884.633 659.563 879.918 638.604 875.619 cv
686.568 820.623 li
cp
1 .560784 .00784314 rgb
ef
608.583 910.043 mo
638.604 875.619 li
659.563 879.918 680.532 884.633 701.371 889.981 cv
665.179 931.481 li
646.702 923.205 627.773 916.025 608.583 910.043 cv
cp
1 .631373 .0156863 rgb
ef
608.583 910.043 mo
627.773 916.025 646.702 923.205 665.179 931.481 cv
625.901 976.516 li
604.412 971.885 582.734 967.97 560.958 964.653 cv
608.583 910.043 li
cp
.996078 .8 0 rgb
ef
625.901 976.516 mo
589.717 1018.01 li
546.506 981.225 li
560.958 964.653 li
582.734 967.97 604.412 971.885 625.901 976.516 cv
cp
1 .631373 .0156863 rgb
ef
728.879 651.451 mo
783.385 697.854 li
502.299 1020.16 li
447.793 973.762 li
728.879 651.451 li
cp
1 .560784 .00784314 rgb
ef
728.547 663.116 mo
771.759 699.902 li
758.727 714.844 li
738.362 708.948 717.865 703.636 697.285 698.96 cv
728.547 663.116 li
cp
1 .631373 .0156863 rgb
ef
639.613 765.093 mo
697.285 698.96 li
717.865 703.636 738.362 708.948 758.727 714.844 cv
700.878 781.172 li
680.887 774.514 660.385 769.193 639.613 765.093 cv
cp
.996078 .8 0 rgb
ef
639.613 765.093 mo
660.385 769.193 680.887 774.514 700.878 781.172 cv
664.572 822.804 li
643.165 817.728 621.462 813.716 599.479 811.112 cv
639.613 765.093 li
cp
1 .631373 .0156863 rgb
ef
599.479 811.112 mo
621.462 813.716 643.165 817.728 664.572 822.804 cv
614.283 880.471 li
593.443 875.124 572.474 870.407 551.518 866.108 cv
599.479 811.112 li
cp
1 .560784 .00784314 rgb
ef
521.495 900.532 mo
551.518 866.108 li
572.474 870.407 593.443 875.124 614.283 880.471 cv
578.09 921.971 li
559.613 913.694 540.685 906.515 521.495 900.532 cv
cp
1 .631373 .0156863 rgb
ef
521.495 900.532 mo
540.685 906.515 559.613 913.694 578.09 921.971 cv
538.813 967.004 li
517.323 962.374 495.646 958.459 473.87 955.143 cv
521.495 900.532 li
cp
.996078 .8 0 rgb
ef
538.813 967.004 mo
502.628 1008.5 li
459.42 971.714 li
473.87 955.143 li
495.646 958.459 517.323 962.374 538.813 967.004 cv
cp
1 .631373 .0156863 rgb
ef
897.422 564.614 mo
1328.04 564.614 li
1328.04 493.528 li
897.422 493.528 li
897.422 564.614 li
cp
1 .560784 .00784314 rgb
ef
1318.88 500.895 mo
1318.88 557.247 li
1298.91 557.247 li
1290.14 538.155 1280.83 519.346 1270.99 500.895 cv
1318.88 500.895 li
cp
1 .631373 .0156863 rgb
ef
1182.63 500.895 mo
1270.99 500.895 li
1280.83 519.346 1290.14 538.155 1298.91 557.247 cv
1210.3 557.247 li
1202.35 537.937 1193.05 519.116 1182.63 500.895 cv
cp
.996078 .8 0 rgb
ef
1182.63 500.895 mo
1193.05 519.116 1202.35 537.937 1210.3 557.247 cv
1154.67 557.247 li
1144.59 537.909 1133.5 519.048 1121.15 500.895 cv
1182.63 500.895 li
cp
1 .631373 .0156863 rgb
ef
1121.15 500.895 mo
1133.5 519.048 1144.59 537.909 1154.67 557.247 cv
1077.63 557.247 li
1068.13 538.16 1058.05 519.384 1047.67 500.895 cv
1121.15 500.895 li
cp
1 .560784 .00784314 rgb
ef
1001.68 500.895 mo
1047.67 500.895 li
1058.05 519.384 1068.13 538.16 1077.63 557.247 cv
1022.18 557.247 li
1016.47 538.016 1009.62 519.162 1001.68 500.895 cv
cp
1 .631373 .0156863 rgb
ef
1001.68 500.895 mo
1009.62 519.162 1016.47 538.016 1022.18 557.247 cv
962.014 557.247 li
951.539 538.137 940.39 519.356 928.719 500.895 cv
1001.68 500.895 li
cp
.996078 .8 0 rgb
ef
962.014 557.247 mo
906.581 557.247 li
906.581 500.895 li
928.719 500.895 li
940.39 519.356 951.539 538.137 962.014 557.247 cv
cp
1 .631373 .0156863 rgb
ef
939.513 635.699 mo
1370.13 635.699 li
1370.13 564.613 li
939.513 564.613 li
939.513 635.699 li
cp
1 .560784 .00784314 rgb
ef
1360.97 571.98 mo
1360.97 628.332 li
1341 628.332 li
1332.23 609.24 1322.92 590.432 1313.08 571.98 cv
1360.97 571.98 li
cp
1 .631373 .0156863 rgb
ef
1224.73 571.98 mo
1313.08 571.98 li
1322.92 590.432 1332.23 609.24 1341 628.332 cv
1252.39 628.332 li
1244.44 609.022 1235.14 590.201 1224.73 571.98 cv
cp
.996078 .8 0 rgb
ef
1224.73 571.98 mo
1235.14 590.201 1244.44 609.022 1252.39 628.332 cv
1196.77 628.332 li
1186.68 608.994 1175.59 590.133 1163.24 571.98 cv
1224.73 571.98 li
cp
1 .631373 .0156863 rgb
ef
1163.24 571.98 mo
1175.59 590.133 1186.68 608.994 1196.77 628.332 cv
1119.72 628.332 li
1110.22 609.245 1100.15 590.473 1089.76 571.98 cv
1163.24 571.98 li
cp
1 .560784 .00784314 rgb
ef
1043.77 571.98 mo
1089.76 571.98 li
1100.15 590.473 1110.22 609.245 1119.72 628.332 cv
1064.28 628.332 li
1058.56 609.101 1051.71 590.247 1043.77 571.98 cv
cp
1 .631373 .0156863 rgb
ef
1043.77 571.98 mo
1051.71 590.247 1058.56 609.101 1064.28 628.332 cv
1004.11 628.332 li
993.631 609.222 982.484 590.442 970.813 571.98 cv
1043.77 571.98 li
cp
.996078 .8 0 rgb
ef
1004.11 628.332 mo
948.674 628.332 li
948.674 571.98 li
970.813 571.98 li
982.484 590.442 993.631 609.222 1004.11 628.332 cv
cp
1 .631373 .0156863 rgb
ef
989.5 706.784 mo
1420.12 706.784 li
1420.12 635.699 li
989.5 635.699 li
989.5 706.784 li
cp
1 .560784 .00784314 rgb
ef
1410.95 643.065 mo
1410.95 699.417 li
1390.99 699.417 li
1382.22 680.328 1372.91 661.519 1363.06 643.065 cv
1410.95 643.065 li
cp
1 .631373 .0156863 rgb
ef
1274.71 643.065 mo
1363.06 643.065 li
1372.91 661.519 1382.22 680.328 1390.99 699.417 cv
1302.37 699.417 li
1294.43 680.107 1285.13 661.286 1274.71 643.065 cv
cp
.996078 .8 0 rgb
ef
1274.71 643.065 mo
1285.13 661.286 1294.43 680.107 1302.37 699.417 cv
1246.75 699.417 li
1236.67 680.079 1225.58 661.218 1213.23 643.065 cv
1274.71 643.065 li
cp
1 .631373 .0156863 rgb
ef
1213.23 643.065 mo
1225.58 661.218 1236.67 680.079 1246.75 699.417 cv
1169.71 699.417 li
1160.21 680.33 1150.13 661.558 1139.75 643.065 cv
1213.23 643.065 li
cp
1 .560784 .00784314 rgb
ef
1093.76 643.065 mo
1139.75 643.065 li
1150.13 661.558 1160.21 680.33 1169.71 699.417 cv
1114.26 699.417 li
1108.55 680.186 1101.7 661.332 1093.76 643.065 cv
cp
1 .631373 .0156863 rgb
ef
1093.76 643.065 mo
1101.7 661.332 1108.55 680.186 1114.26 699.417 cv
1054.09 699.417 li
1043.62 680.307 1032.47 661.526 1020.8 643.065 cv
1093.76 643.065 li
cp
.996078 .8 0 rgb
ef
1054.09 699.417 mo
998.658 699.417 li
998.658 643.065 li
1020.8 643.065 li
1032.47 661.526 1043.62 680.307 1054.09 699.417 cv
cp
1 .631373 .0156863 rgb
ef
952.669 777.869 mo
1383.29 777.869 li
1383.29 706.784 li
952.669 706.784 li
952.669 777.869 li
cp
1 .560784 .00784314 rgb
ef
1374.12 714.15 mo
1374.12 770.502 li
1354.16 770.502 li
1345.39 751.413 1336.08 732.604 1326.23 714.15 cv
1374.12 714.15 li
cp
1 .631373 .0156863 rgb
ef
1237.88 714.15 mo
1326.23 714.15 li
1336.08 732.604 1345.39 751.413 1354.16 770.502 cv
1265.54 770.502 li
1257.6 751.193 1248.29 732.373 1237.88 714.15 cv
cp
.996078 .8 0 rgb
ef
1237.88 714.15 mo
1248.29 732.373 1257.6 751.193 1265.54 770.502 cv
1209.92 770.502 li
1199.84 751.164 1188.75 732.303 1176.4 714.15 cv
1237.88 714.15 li
cp
1 .631373 .0156863 rgb
ef
1176.4 714.15 mo
1188.75 732.303 1199.84 751.164 1209.92 770.502 cv
1132.88 770.502 li
1123.38 751.416 1113.3 732.643 1102.92 714.15 cv
1176.4 714.15 li
cp
1 .560784 .00784314 rgb
ef
1056.93 714.15 mo
1102.92 714.15 li
1113.3 732.643 1123.38 751.416 1132.88 770.502 cv
1077.43 770.502 li
1071.72 751.271 1064.87 732.417 1056.93 714.15 cv
cp
1 .631373 .0156863 rgb
ef
1056.93 714.15 mo
1064.87 732.417 1071.72 751.271 1077.43 770.502 cv
1017.26 770.502 li
1006.78 751.392 995.637 732.612 983.967 714.15 cv
1056.93 714.15 li
cp
.996078 .8 0 rgb
ef
1017.26 770.502 mo
961.828 770.502 li
961.828 714.15 li
983.967 714.15 li
995.637 732.612 1006.78 751.392 1017.26 770.502 cv
cp
1 .631373 .0156863 rgb
ef
915.837 848.954 mo
1346.46 848.954 li
1346.46 777.868 li
915.837 777.868 li
915.837 848.954 li
cp
1 .560784 .00784314 rgb
ef
1337.29 785.235 mo
1337.29 841.587 li
1317.33 841.587 li
1308.56 822.498 1299.25 803.688 1289.4 785.235 cv
1337.29 785.235 li
cp
1 .631373 .0156863 rgb
ef
1201.05 785.235 mo
1289.4 785.235 li
1299.25 803.688 1308.56 822.498 1317.33 841.587 cv
1228.71 841.587 li
1220.77 822.278 1211.46 803.458 1201.05 785.235 cv
cp
.996078 .8 0 rgb
ef
1201.05 785.235 mo
1211.46 803.458 1220.77 822.278 1228.71 841.587 cv
1173.09 841.587 li
1163.01 822.249 1151.92 803.388 1139.56 785.235 cv
1201.05 785.235 li
cp
1 .631373 .0156863 rgb
ef
1139.56 785.235 mo
1151.92 803.388 1163.01 822.249 1173.09 841.587 cv
1096.04 841.587 li
1086.54 822.5 1076.47 803.728 1066.09 785.235 cv
1139.56 785.235 li
cp
1 .560784 .00784314 rgb
ef
1020.1 785.235 mo
1066.09 785.235 li
1076.47 803.728 1086.54 822.5 1096.04 841.587 cv
1040.6 841.587 li
1034.89 822.356 1028.04 803.502 1020.1 785.235 cv
cp
1 .631373 .0156863 rgb
ef
1020.1 785.235 mo
1028.04 803.502 1034.89 822.356 1040.6 841.587 cv
980.432 841.587 li
969.955 822.477 958.808 803.697 947.137 785.235 cv
1020.1 785.235 li
cp
.996078 .8 0 rgb
ef
980.432 841.587 mo
924.996 841.587 li
924.996 785.235 li
947.137 785.235 li
958.808 803.697 969.955 822.477 980.432 841.587 cv
cp
1 .631373 .0156863 rgb
ef
1002.65 920.041 mo
1433.27 920.041 li
1433.27 848.954 li
1002.65 848.954 li
1002.65 920.041 li
cp
1 .560784 .00784314 rgb
ef
1424.11 856.32 mo
1424.11 912.672 li
1404.14 912.672 li
1395.37 893.584 1386.06 874.773 1376.22 856.32 cv
1424.11 856.32 li
cp
1 .631373 .0156863 rgb
ef
1287.86 856.32 mo
1376.22 856.32 li
1386.06 874.773 1395.37 893.584 1404.14 912.672 cv
1315.52 912.672 li
1307.58 893.362 1298.28 874.543 1287.86 856.32 cv
cp
.996078 .8 0 rgb
ef
1287.86 856.32 mo
1298.28 874.543 1307.58 893.362 1315.52 912.672 cv
1259.91 912.672 li
1249.83 893.334 1238.73 874.474 1226.38 856.32 cv
1287.86 856.32 li
cp
1 .631373 .0156863 rgb
ef
1226.38 856.32 mo
1238.73 874.474 1249.83 893.334 1259.91 912.672 cv
1182.86 912.672 li
1173.36 893.586 1163.28 874.813 1152.9 856.32 cv
1226.38 856.32 li
cp
1 .560784 .00784314 rgb
ef
1106.91 856.32 mo
1152.9 856.32 li
1163.28 874.813 1173.36 893.586 1182.86 912.672 cv
1127.42 912.672 li
1121.7 893.44 1114.85 874.587 1106.91 856.32 cv
cp
1 .631373 .0156863 rgb
ef
1106.91 856.32 mo
1114.85 874.587 1121.7 893.44 1127.42 912.672 cv
1067.25 912.672 li
1056.77 893.563 1045.62 874.782 1033.95 856.32 cv
1106.91 856.32 li
cp
.996078 .8 0 rgb
ef
1067.25 912.672 mo
1011.81 912.672 li
1011.81 856.32 li
1033.95 856.32 li
1045.62 874.782 1056.77 893.563 1067.25 912.672 cv
cp
1 .631373 .0156863 rgb
ef
952.669 991.126 mo
1383.29 991.126 li
1383.29 920.042 li
952.669 920.042 li
952.669 991.126 li
cp
1 .560784 .00784314 rgb
ef
1374.12 927.408 mo
1374.12 983.757 li
1354.16 983.757 li
1345.39 964.669 1336.08 945.859 1326.23 927.408 cv
1374.12 927.408 li
cp
1 .631373 .0156863 rgb
ef
1237.88 927.408 mo
1326.23 927.408 li
1336.08 945.859 1345.39 964.669 1354.16 983.757 cv
1265.54 983.757 li
1257.6 964.448 1248.29 945.628 1237.88 927.408 cv
cp
.996078 .8 0 rgb
ef
1237.88 927.408 mo
1248.29 945.628 1257.6 964.448 1265.54 983.757 cv
1209.92 983.757 li
1199.84 964.419 1188.75 945.562 1176.4 927.408 cv
1237.88 927.408 li
cp
1 .631373 .0156863 rgb
ef
1176.4 927.408 mo
1188.75 945.562 1199.84 964.419 1209.92 983.757 cv
1132.88 983.757 li
1123.38 964.674 1113.3 945.898 1102.92 927.408 cv
1176.4 927.408 li
cp
1 .560784 .00784314 rgb
ef
1056.93 927.408 mo
1102.92 927.408 li
1113.3 945.898 1123.38 964.674 1132.88 983.757 cv
1077.43 983.757 li
1071.72 964.525 1064.87 945.675 1056.93 927.408 cv
cp
1 .631373 .0156863 rgb
ef
1056.93 927.408 mo
1064.87 945.675 1071.72 964.525 1077.43 983.757 cv
1017.26 983.757 li
1006.78 964.65 995.637 945.869 983.967 927.408 cv
1056.93 927.408 li
cp
.996078 .8 0 rgb
ef
1017.26 983.757 mo
961.828 983.757 li
961.828 927.408 li
983.967 927.408 li
995.637 945.869 1006.78 964.65 1017.26 983.757 cv
cp
1 .631373 .0156863 rgb
ef
1117.02 900.734 mo
1117.02 1008.97 1205.83 1096.72 1315.38 1096.72 cv
1424.93 1096.72 1513.74 1008.97 1513.74 900.734 cv
1513.74 792.498 1424.93 704.753 1315.38 704.753 cv
1205.83 704.753 1117.02 792.498 1117.02 900.734 cv
cp
1 .560784 .00784314 rgb
ef
1127.72 900.734 mo
1127.72 1003.13 1211.74 1086.14 1315.38 1086.14 cv
1419.02 1086.14 1503.04 1003.13 1503.04 900.734 cv
1503.04 798.337 1419.02 715.325 1315.38 715.325 cv
1211.74 715.325 1127.72 798.337 1127.72 900.734 cv
cp
1 .631373 .0156863 rgb
ef
1155.65 900.734 mo
1155.65 987.896 1227.16 1058.55 1315.38 1058.55 cv
1403.6 1058.55 1475.12 987.896 1475.12 900.734 cv
1475.12 813.573 1403.6 742.916 1315.38 742.916 cv
1227.16 742.916 1155.65 813.573 1155.65 900.734 cv
cp
1 .560784 .00784314 rgb
ef
1323.83 1018.89 mo
1323.83 988.954 li
1353.83 984.058 1369.86 962.763 1369.86 940.022 cv
1369.86 914.404 1354.71 899.44 1324.7 887.353 cv
1299.36 876.99 1288.58 869.506 1288.58 854.536 cv
1288.58 843.023 1297.03 829.784 1319.46 829.784 cv
1338.1 829.784 1350.05 836.119 1356.17 839.572 cv
1363.45 820.574 li
1355 815.681 1343.06 811.076 1325.58 810.501 cv
1325.58 782.58 li
1307.52 782.58 li
1307.52 811.649 li
1280.71 815.966 1263.53 834.102 1263.53 857.992 cv
1263.53 883.035 1281.88 896.271 1311.59 907.784 cv
1333.15 916.422 1344.51 926.207 1344.51 942.035 cv
1344.51 958.443 1330.53 970.243 1309.85 970.243 cv
1293.53 970.243 1278.38 964.774 1267.89 957.867 cv
1260.9 977.15 li
1271.1 984.349 1288.58 989.529 1305.47 989.814 cv
1305.47 1018.89 li
1323.83 1018.89 li
cp
.996078 .8 0 rgb
ef
725.28 895.665 mo
725.28 1003.9 814.091 1091.65 923.642 1091.65 cv
1033.19 1091.65 1122 1003.9 1122 895.665 cv
1122 787.426 1033.19 699.682 923.642 699.682 cv
814.091 699.682 725.28 787.426 725.28 895.665 cv
cp
1 .560784 .00784314 rgb
ef
735.981 895.665 mo
735.981 998.063 820 1081.08 923.642 1081.08 cv
1027.28 1081.08 1111.3 998.063 1111.3 895.665 cv
1111.3 793.263 1027.28 710.255 923.642 710.255 cv
820 710.255 735.981 793.263 735.981 895.665 cv
cp
1 .631373 .0156863 rgb
ef
763.91 895.665 mo
763.91 982.824 835.426 1053.48 923.642 1053.48 cv
1011.86 1053.48 1083.38 982.824 1083.38 895.665 cv
1083.38 808.501 1011.86 737.844 923.642 737.844 cv
835.426 737.844 763.91 808.501 763.91 895.665 cv
cp
1 .560784 .00784314 rgb
ef
932.09 1013.82 mo
932.09 983.885 li
962.095 978.989 978.12 957.691 978.12 934.951 cv
978.12 909.335 962.969 894.369 932.963 882.28 cv
907.617 871.917 896.842 864.436 896.842 849.467 cv
896.842 837.955 905.287 824.712 927.718 824.712 cv
946.364 824.712 958.307 831.047 964.426 834.501 cv
971.709 815.504 li
963.259 810.612 951.319 806.007 933.835 805.429 cv
933.835 777.508 li
915.775 777.508 li
915.775 806.58 li
888.975 810.897 871.786 829.032 871.786 852.921 cv
871.786 877.963 890.139 891.2 919.854 902.716 cv
941.411 911.35 952.771 921.138 952.771 936.966 cv
952.771 953.373 938.79 965.174 918.106 965.174 cv
901.792 965.174 886.641 959.706 876.153 952.798 cv
869.165 972.082 li
879.36 979.276 896.842 984.46 913.734 984.745 cv
913.734 1013.82 li
932.09 1013.82 li
cp
.996078 .8 0 rgb
ef
325.325 827.126 mo
755.94 827.126 li
755.94 756.041 li
325.325 756.041 li
325.325 827.126 li
cp
1 .560784 .00784314 rgb
ef
334.486 763.408 mo
334.486 819.76 li
354.452 819.76 li
363.221 800.671 372.53 781.861 382.376 763.408 cv
334.486 763.408 li
cp
1 .631373 .0156863 rgb
ef
470.728 763.408 mo
382.376 763.408 li
372.53 781.861 363.221 800.671 354.452 819.76 cv
443.066 819.76 li
451.011 800.45 460.314 781.63 470.728 763.408 cv
cp
.996078 .8 0 rgb
ef
470.728 763.408 mo
460.314 781.63 451.011 800.45 443.066 819.76 cv
498.69 819.76 li
508.769 800.422 519.864 781.561 532.214 763.408 cv
470.728 763.408 li
cp
1 .631373 .0156863 rgb
ef
532.214 763.408 mo
519.864 781.561 508.769 800.422 498.69 819.76 cv
575.734 819.76 li
585.234 800.673 595.31 781.9 605.692 763.408 cv
532.214 763.408 li
cp
1 .560784 .00784314 rgb
ef
651.68 763.408 mo
605.692 763.408 li
595.31 781.9 585.234 800.673 575.734 819.76 cv
631.178 819.76 li
636.893 800.528 643.744 781.675 651.68 763.408 cv
cp
1 .631373 .0156863 rgb
ef
651.68 763.408 mo
643.744 781.675 636.893 800.528 631.178 819.76 cv
691.347 819.76 li
701.825 800.65 712.972 781.87 724.643 763.408 cv
651.68 763.408 li
cp
.996078 .8 0 rgb
ef
691.347 819.76 mo
746.783 819.76 li
746.783 763.408 li
724.643 763.408 li
712.972 781.87 701.825 800.65 691.347 819.76 cv
cp
1 .631373 .0156863 rgb
ef
799.116 966.618 mo
735.204 999.261 li
932.948 1377.2 li
996.861 1344.56 li
799.116 966.618 li
cp
1 .560784 .00784314 rgb
ef
796.7 978.037 mo
746.032 1003.92 li
755.2 1021.44 li
776.393 1020.37 797.579 1019.91 818.693 1020.07 cv
796.7 978.037 li
cp
1 .631373 .0156863 rgb
ef
859.265 1097.62 mo
818.693 1020.07 li
797.579 1019.91 776.393 1020.37 755.2 1021.44 cv
795.896 1099.22 li
816.904 1097.32 838.099 1096.85 859.265 1097.62 cv
cp
.996078 .8 0 rgb
ef
859.265 1097.62 mo
838.099 1096.85 816.904 1097.32 795.896 1099.22 cv
821.437 1148.04 li
843.454 1148 865.506 1149.07 887.502 1151.58 cv
859.265 1097.62 li
cp
1 .631373 .0156863 rgb
ef
887.502 1151.58 mo
865.506 1149.07 843.454 1148 821.437 1148.04 cv
856.82 1215.66 li
878.341 1215.23 899.847 1215.45 921.241 1216.07 cv
887.502 1151.58 li
cp
1 .560784 .00784314 rgb
ef
942.363 1256.43 mo
921.241 1216.07 li
899.847 1215.45 878.341 1215.23 856.82 1215.66 cv
882.28 1264.31 li
902.196 1260.5 922.293 1257.85 942.363 1256.43 cv
cp
1 .631373 .0156863 rgb
ef
942.363 1256.43 mo
922.293 1257.85 902.196 1260.5 882.28 1264.31 cv
909.907 1317.13 li
931.903 1317.54 953.907 1318.7 975.867 1320.47 cv
942.363 1256.43 li
cp
.996078 .8 0 rgb
ef
909.907 1317.13 mo
935.367 1365.78 li
986.033 1339.9 li
975.867 1320.47 li
953.907 1318.7 931.903 1317.54 909.907 1317.13 cv
cp
1 .631373 .0156863 rgb
ef
892.641 994.563 mo
838.138 1040.97 li
1119.22 1363.27 li
1173.73 1316.87 li
892.641 994.563 li
cp
1 .560784 .00784314 rgb
ef
892.973 1006.22 mo
849.764 1043.01 li
862.796 1057.96 li
883.159 1052.06 903.658 1046.75 924.236 1042.08 cv
892.973 1006.22 li
cp
1 .631373 .0156863 rgb
ef
981.908 1108.2 mo
924.236 1042.08 li
903.658 1046.75 883.159 1052.06 862.796 1057.96 cv
920.642 1124.29 li
940.633 1117.62 961.136 1112.3 981.908 1108.2 cv
cp
.996078 .8 0 rgb
ef
981.908 1108.2 mo
961.136 1112.3 940.633 1117.62 920.642 1124.29 cv
956.948 1165.91 li
978.358 1160.84 1000.06 1156.83 1022.04 1154.22 cv
981.908 1108.2 li
cp
1 .631373 .0156863 rgb
ef
1022.04 1154.22 mo
1000.06 1156.83 978.358 1160.84 956.948 1165.91 cv
1007.24 1223.58 li
1028.08 1218.23 1049.05 1213.52 1070 1209.22 cv
1022.04 1154.22 li
cp
1 .560784 .00784314 rgb
ef
1100.03 1243.64 mo
1070 1209.22 li
1049.05 1213.52 1028.08 1218.23 1007.24 1223.58 cv
1043.43 1265.08 li
1061.91 1256.81 1080.84 1249.62 1100.03 1243.64 cv
cp
1 .631373 .0156863 rgb
ef
1100.03 1243.64 mo
1080.84 1249.62 1061.91 1256.81 1043.43 1265.08 cv
1082.71 1310.12 li
1104.2 1305.48 1125.87 1301.57 1147.65 1298.25 cv
1100.03 1243.64 li
cp
.996078 .8 0 rgb
ef
1082.71 1310.12 mo
1118.89 1351.61 li
1162.1 1314.83 li
1147.65 1298.25 li
1125.87 1301.57 1104.2 1305.48 1082.71 1310.12 cv
cp
1 .631373 .0156863 rgb
ef
979.73 985.052 mo
925.224 1031.46 li
1206.31 1353.76 li
1260.82 1307.36 li
979.73 985.052 li
cp
1 .560784 .00784314 rgb
ef
980.062 996.717 mo
936.853 1033.5 li
949.882 1048.45 li
970.247 1042.55 990.744 1037.24 1011.32 1032.56 cv
980.062 996.717 li
cp
1 .631373 .0156863 rgb
ef
1069 1098.69 mo
1011.32 1032.56 li
990.744 1037.24 970.247 1042.55 949.882 1048.45 cv
1007.73 1114.78 li
1027.72 1108.11 1048.22 1102.79 1069 1098.69 cv
cp
.996078 .8 0 rgb
ef
1069 1098.69 mo
1048.22 1102.79 1027.72 1108.11 1007.73 1114.78 cv
1044.04 1156.41 li
1065.44 1151.33 1087.15 1147.32 1109.13 1144.71 cv
1069 1098.69 li
cp
1 .631373 .0156863 rgb
ef
1109.13 1144.71 mo
1087.15 1147.32 1065.44 1151.33 1044.04 1156.41 cv
1094.33 1214.07 li
1115.16 1208.72 1136.14 1204.01 1157.09 1199.71 cv
1109.13 1144.71 li
cp
1 .560784 .00784314 rgb
ef
1187.11 1234.13 mo
1157.09 1199.71 li
1136.14 1204.01 1115.16 1208.72 1094.33 1214.07 cv
1130.52 1255.57 li
1149 1247.29 1167.92 1240.12 1187.11 1234.13 cv
cp
1 .631373 .0156863 rgb
ef
1187.11 1234.13 mo
1167.92 1240.12 1149 1247.29 1130.52 1255.57 cv
1169.8 1300.61 li
1191.29 1295.97 1212.96 1292.06 1234.74 1288.74 cv
1187.11 1234.13 li
cp
.996078 .8 0 rgb
ef
1169.8 1300.61 mo
1205.98 1342.1 li
1249.19 1305.31 li
1234.74 1288.74 li
1212.96 1292.06 1191.29 1295.97 1169.8 1300.61 cv
cp
1 .631373 .0156863 rgb
ef
380.571 898.214 mo
811.187 898.214 li
811.187 827.126 li
380.571 827.126 li
380.571 898.214 li
cp
1 .560784 .00784314 rgb
ef
389.73 834.493 mo
389.73 890.845 li
409.695 890.845 li
418.467 871.756 427.776 852.946 437.624 834.493 cv
389.73 834.493 li
cp
1 .631373 .0156863 rgb
ef
525.975 834.493 mo
437.624 834.493 li
427.776 852.946 418.467 871.756 409.695 890.845 cv
498.313 890.845 li
506.256 871.535 515.56 852.716 525.975 834.493 cv
cp
.996078 .8 0 rgb
ef
525.975 834.493 mo
515.56 852.716 506.256 871.535 498.313 890.845 cv
553.935 890.845 li
564.016 871.507 575.109 852.646 587.461 834.493 cv
525.975 834.493 li
cp
1 .631373 .0156863 rgb
ef
587.461 834.493 mo
575.109 852.646 564.016 871.507 553.935 890.845 cv
630.981 890.845 li
640.479 871.759 650.555 852.985 660.939 834.493 cv
587.461 834.493 li
cp
1 .560784 .00784314 rgb
ef
706.928 834.493 mo
660.939 834.493 li
650.555 852.985 640.479 871.759 630.981 890.845 cv
686.426 890.845 li
692.138 871.613 698.991 852.76 706.928 834.493 cv
cp
1 .631373 .0156863 rgb
ef
706.928 834.493 mo
698.991 852.76 692.138 871.613 686.426 890.845 cv
746.595 890.845 li
757.07 871.735 768.219 852.954 779.89 834.493 cv
706.928 834.493 li
cp
.996078 .8 0 rgb
ef
746.595 890.845 mo
802.029 890.845 li
802.029 834.493 li
779.89 834.493 li
768.219 852.954 757.07 871.735 746.595 890.845 cv
cp
1 .631373 .0156863 rgb
ef
338.479 969.299 mo
769.097 969.299 li
769.097 898.215 li
338.479 898.215 li
338.479 969.299 li
cp
1 .560784 .00784314 rgb
ef
347.638 905.581 mo
347.638 961.933 li
367.604 961.933 li
376.376 942.841 385.685 924.031 395.53 905.581 cv
347.638 905.581 li
cp
1 .631373 .0156863 rgb
ef
483.884 905.581 mo
395.53 905.581 li
385.685 924.031 376.376 942.841 367.604 961.933 cv
456.223 961.933 li
464.166 942.62 473.468 923.801 483.884 905.581 cv
cp
.996078 .8 0 rgb
ef
483.884 905.581 mo
473.468 923.801 464.166 942.62 456.223 961.933 cv
511.844 961.933 li
521.922 942.592 533.018 923.733 545.368 905.581 cv
483.884 905.581 li
cp
1 .631373 .0156863 rgb
ef
545.368 905.581 mo
533.018 923.733 521.922 942.592 511.844 961.933 cv
588.89 961.933 li
598.388 942.846 608.461 924.073 618.846 905.581 cv
545.368 905.581 li
cp
1 .560784 .00784314 rgb
ef
664.837 905.581 mo
618.846 905.581 li
608.461 924.073 598.388 942.846 588.89 961.933 cv
644.333 961.933 li
650.049 942.698 656.897 923.848 664.837 905.581 cv
cp
1 .631373 .0156863 rgb
ef
664.837 905.581 mo
656.897 923.848 650.049 942.698 644.333 961.933 cv
704.503 961.933 li
714.979 942.822 726.125 924.043 737.797 905.581 cv
664.837 905.581 li
cp
.996078 .8 0 rgb
ef
704.503 961.933 mo
759.935 961.933 li
759.935 905.581 li
737.797 905.581 li
726.125 924.043 714.979 942.822 704.503 961.933 cv
cp
1 .631373 .0156863 rgb
ef
288.495 1040.38 mo
719.109 1040.38 li
719.109 969.3 li
288.495 969.3 li
288.495 1040.38 li
cp
1 .560784 .00784314 rgb
ef
297.655 976.666 mo
297.655 1033.02 li
317.622 1033.02 li
326.391 1013.93 335.699 995.116 345.547 976.666 cv
297.655 976.666 li
cp
1 .631373 .0156863 rgb
ef
433.898 976.666 mo
345.547 976.666 li
335.699 995.116 326.391 1013.93 317.622 1033.02 cv
406.236 1033.02 li
414.182 1013.71 423.484 994.886 433.898 976.666 cv
cp
.996078 .8 0 rgb
ef
433.898 976.666 mo
423.484 994.886 414.182 1013.71 406.236 1033.02 cv
461.857 1033.02 li
471.938 1013.68 483.031 994.819 495.384 976.666 cv
433.898 976.666 li
cp
1 .631373 .0156863 rgb
ef
495.384 976.666 mo
483.031 994.819 471.938 1013.68 461.857 1033.02 cv
538.904 1033.02 li
548.401 1013.93 558.48 995.159 568.862 976.666 cv
495.384 976.666 li
cp
1 .560784 .00784314 rgb
ef
614.851 976.666 mo
568.862 976.666 li
558.48 995.159 548.401 1013.93 538.904 1033.02 cv
594.348 1033.02 li
600.063 1013.79 606.913 994.933 614.851 976.666 cv
cp
1 .631373 .0156863 rgb
ef
614.851 976.666 mo
606.913 994.933 600.063 1013.79 594.348 1033.02 cv
654.517 1033.02 li
664.992 1013.91 676.142 995.128 687.813 976.666 cv
614.851 976.666 li
cp
.996078 .8 0 rgb
ef
654.517 1033.02 mo
709.951 1033.02 li
709.951 976.666 li
687.813 976.666 li
676.142 995.128 664.992 1013.91 654.517 1033.02 cv
cp
1 .631373 .0156863 rgb
ef
325.325 1111.47 mo
755.94 1111.47 li
755.94 1040.38 li
325.325 1040.38 li
325.325 1111.47 li
cp
1 .560784 .00784314 rgb
ef
334.486 1047.75 mo
334.486 1104.1 li
354.452 1104.1 li
363.221 1085.01 372.53 1066.2 382.376 1047.75 cv
334.486 1047.75 li
cp
1 .631373 .0156863 rgb
ef
470.728 1047.75 mo
382.376 1047.75 li
372.53 1066.2 363.221 1085.01 354.452 1104.1 cv
443.066 1104.1 li
451.011 1084.79 460.314 1065.97 470.728 1047.75 cv
cp
.996078 .8 0 rgb
ef
470.728 1047.75 mo
460.314 1065.97 451.011 1084.79 443.066 1104.1 cv
498.69 1104.1 li
508.769 1084.76 519.864 1065.9 532.214 1047.75 cv
470.728 1047.75 li
cp
1 .631373 .0156863 rgb
ef
532.214 1047.75 mo
519.864 1065.9 508.769 1084.76 498.69 1104.1 cv
575.734 1104.1 li
585.234 1085.02 595.31 1066.24 605.692 1047.75 cv
532.214 1047.75 li
cp
1 .560784 .00784314 rgb
ef
651.68 1047.75 mo
605.692 1047.75 li
595.31 1066.24 585.234 1085.02 575.734 1104.1 cv
631.178 1104.1 li
636.893 1084.87 643.744 1066.02 651.68 1047.75 cv
cp
1 .631373 .0156863 rgb
ef
651.68 1047.75 mo
643.744 1066.02 636.893 1084.87 631.178 1104.1 cv
691.347 1104.1 li
701.825 1084.99 712.972 1066.21 724.643 1047.75 cv
651.68 1047.75 li
cp
.996078 .8 0 rgb
ef
691.347 1104.1 mo
746.783 1104.1 li
746.783 1047.75 li
724.643 1047.75 li
712.972 1066.21 701.825 1084.99 691.347 1104.1 cv
cp
1 .631373 .0156863 rgb
ef
362.154 1182.55 mo
792.772 1182.55 li
792.772 1111.47 li
362.154 1111.47 li
362.154 1182.55 li
cp
1 .560784 .00784314 rgb
ef
371.316 1118.84 mo
371.316 1175.19 li
391.283 1175.19 li
400.053 1156.1 409.358 1137.29 419.206 1118.84 cv
371.316 1118.84 li
cp
1 .631373 .0156863 rgb
ef
507.56 1118.84 mo
419.206 1118.84 li
409.358 1137.29 400.053 1156.1 391.283 1175.19 cv
479.899 1175.19 li
487.841 1155.88 497.147 1137.06 507.56 1118.84 cv
cp
.996078 .8 0 rgb
ef
507.56 1118.84 mo
497.147 1137.06 487.841 1155.88 479.899 1175.19 cv
535.519 1175.19 li
545.598 1155.85 556.693 1136.99 569.046 1118.84 cv
507.56 1118.84 li
cp
1 .631373 .0156863 rgb
ef
569.046 1118.84 mo
556.693 1136.99 545.598 1155.85 535.519 1175.19 cv
612.566 1175.19 li
622.067 1156.1 632.14 1137.33 642.522 1118.84 cv
569.046 1118.84 li
cp
1 .560784 .00784314 rgb
ef
688.513 1118.84 mo
642.522 1118.84 li
632.14 1137.33 622.067 1156.1 612.566 1175.19 cv
668.008 1175.19 li
673.723 1155.96 680.573 1137.1 688.513 1118.84 cv
cp
1 .631373 .0156863 rgb
ef
688.513 1118.84 mo
680.573 1137.1 673.723 1155.96 668.008 1175.19 cv
728.177 1175.19 li
738.655 1156.08 749.802 1137.3 761.473 1118.84 cv
688.513 1118.84 li
cp
.996078 .8 0 rgb
ef
728.177 1175.19 mo
783.614 1175.19 li
783.614 1118.84 li
761.473 1118.84 li
749.802 1137.3 738.655 1156.08 728.177 1175.19 cv
cp
1 .631373 .0156863 rgb
ef
275.34 1253.64 mo
705.956 1253.64 li
705.956 1182.55 li
275.34 1182.55 li
275.34 1253.64 li
cp
1 .560784 .00784314 rgb
ef
284.502 1189.92 mo
284.502 1246.27 li
304.467 1246.27 li
313.236 1227.18 322.546 1208.38 332.392 1189.92 cv
284.502 1189.92 li
cp
1 .631373 .0156863 rgb
ef
420.747 1189.92 mo
332.392 1189.92 li
322.546 1208.38 313.236 1227.18 304.467 1246.27 cv
393.085 1246.27 li
401.027 1226.96 410.331 1208.14 420.747 1189.92 cv
cp
.996078 .8 0 rgb
ef
420.747 1189.92 mo
410.331 1208.14 401.027 1226.96 393.085 1246.27 cv
448.703 1246.27 li
458.784 1226.94 469.877 1208.07 482.232 1189.92 cv
420.747 1189.92 li
cp
1 .631373 .0156863 rgb
ef
482.232 1189.92 mo
469.877 1208.07 458.784 1226.94 448.703 1246.27 cv
525.75 1246.27 li
535.25 1227.19 545.327 1208.41 555.708 1189.92 cv
482.232 1189.92 li
cp
1 .560784 .00784314 rgb
ef
601.696 1189.92 mo
555.708 1189.92 li
545.327 1208.41 535.25 1227.19 525.75 1246.27 cv
581.194 1246.27 li
586.909 1227.04 593.762 1208.19 601.696 1189.92 cv
cp
1 .631373 .0156863 rgb
ef
601.696 1189.92 mo
593.762 1208.19 586.909 1227.04 581.194 1246.27 cv
641.363 1246.27 li
651.841 1227.16 662.991 1208.38 674.659 1189.92 cv
601.696 1189.92 li
cp
.996078 .8 0 rgb
ef
641.363 1246.27 mo
696.8 1246.27 li
696.8 1189.92 li
674.659 1189.92 li
662.991 1208.38 651.841 1227.16 641.363 1246.27 cv
cp
1 .631373 .0156863 rgb
ef
325.325 1324.73 mo
755.94 1324.73 li
755.94 1253.64 li
325.325 1253.64 li
325.325 1324.73 li
cp
1 .560784 .00784314 rgb
ef
334.486 1261.01 mo
334.486 1317.36 li
354.452 1317.36 li
363.221 1298.27 372.53 1279.46 382.376 1261.01 cv
334.486 1261.01 li
cp
1 .631373 .0156863 rgb
ef
470.728 1261.01 mo
382.376 1261.01 li
372.53 1279.46 363.221 1298.27 354.452 1317.36 cv
443.066 1317.36 li
451.011 1298.05 460.314 1279.23 470.728 1261.01 cv
cp
.996078 .8 0 rgb
ef
470.728 1261.01 mo
460.314 1279.23 451.011 1298.05 443.066 1317.36 cv
498.69 1317.36 li
508.769 1298.02 519.864 1279.16 532.214 1261.01 cv
470.728 1261.01 li
cp
1 .631373 .0156863 rgb
ef
532.214 1261.01 mo
519.864 1279.16 508.769 1298.02 498.69 1317.36 cv
575.734 1317.36 li
585.234 1298.27 595.31 1279.5 605.692 1261.01 cv
532.214 1261.01 li
cp
1 .560784 .00784314 rgb
ef
651.68 1261.01 mo
605.692 1261.01 li
595.31 1279.5 585.234 1298.27 575.734 1317.36 cv
631.178 1317.36 li
636.893 1298.13 643.744 1279.27 651.68 1261.01 cv
cp
1 .631373 .0156863 rgb
ef
651.68 1261.01 mo
643.744 1279.27 636.893 1298.13 631.178 1317.36 cv
691.347 1317.36 li
701.825 1298.25 712.972 1279.47 724.643 1261.01 cv
651.68 1261.01 li
cp
.996078 .8 0 rgb
ef
691.347 1317.36 mo
746.783 1317.36 li
746.783 1261.01 li
724.643 1261.01 li
712.972 1279.47 701.825 1298.25 691.347 1317.36 cv
cp
1 .631373 .0156863 rgb
ef
591.592 1234.33 mo
591.592 1342.57 502.782 1430.32 393.23 1430.32 cv
283.676 1430.32 194.868 1342.57 194.868 1234.33 cv
194.868 1126.1 283.676 1038.35 393.23 1038.35 cv
502.782 1038.35 591.592 1126.1 591.592 1234.33 cv
cp
1 .560784 .00784314 rgb
ef
580.888 1234.33 mo
580.888 1336.73 496.87 1419.75 393.23 1419.75 cv
289.585 1419.75 205.569 1336.73 205.569 1234.33 cv
205.569 1131.94 289.585 1048.93 393.23 1048.93 cv
496.87 1048.93 580.888 1131.94 580.888 1234.33 cv
cp
1 .631373 .0156863 rgb
ef
552.962 1234.33 mo
552.962 1321.49 481.447 1392.15 393.23 1392.15 cv
305.008 1392.15 233.493 1321.49 233.493 1234.33 cv
233.493 1147.17 305.008 1076.52 393.23 1076.52 cv
481.447 1076.52 552.962 1147.17 552.962 1234.33 cv
cp
1 .560784 .00784314 rgb
ef
383.322 1352.49 mo
383.322 1323.42 li
366.427 1323.13 348.947 1317.95 338.752 1310.75 cv
345.741 1291.47 li
356.229 1298.38 371.38 1303.85 387.694 1303.85 cv
408.376 1303.85 422.359 1292.04 422.359 1275.64 cv
422.359 1259.81 410.997 1250.02 389.442 1241.39 cv
359.727 1229.87 341.374 1216.63 341.374 1191.59 cv
341.374 1167.71 358.563 1149.57 385.36 1145.25 cv
385.36 1116.18 li
403.423 1116.18 li
403.423 1144.1 li
420.904 1144.68 432.848 1149.28 441.296 1154.17 cv
434.015 1173.17 li
427.895 1169.72 415.949 1163.39 397.307 1163.39 cv
374.874 1163.39 366.427 1176.62 366.427 1188.14 cv
366.427 1203.11 377.206 1210.59 402.549 1220.95 cv
432.557 1233.04 447.705 1248.01 447.705 1273.62 cv
447.705 1296.36 431.684 1317.66 401.675 1322.55 cv
401.675 1352.49 li
383.322 1352.49 li
cp
.996078 .8 0 rgb
ef
983.329 1229.26 mo
983.329 1337.5 894.519 1425.25 784.967 1425.25 cv
675.417 1425.25 586.606 1337.5 586.606 1229.26 cv
586.606 1121.03 675.417 1033.28 784.967 1033.28 cv
894.519 1033.28 983.329 1121.03 983.329 1229.26 cv
cp
1 .560784 .00784314 rgb
ef
972.628 1229.26 mo
972.628 1331.66 888.607 1414.67 784.967 1414.67 cv
681.325 1414.67 597.307 1331.66 597.307 1229.26 cv
597.307 1126.87 681.325 1043.86 784.967 1043.86 cv
888.607 1043.86 972.628 1126.87 972.628 1229.26 cv
cp
1 .631373 .0156863 rgb
ef
944.699 1229.26 mo
944.699 1316.42 873.184 1387.08 784.967 1387.08 cv
696.746 1387.08 625.23 1316.42 625.23 1229.26 cv
625.23 1142.1 696.746 1071.45 784.967 1071.45 cv
873.184 1071.45 944.699 1142.1 944.699 1229.26 cv
cp
1 .560784 .00784314 rgb
ef
775.06 1347.42 mo
775.06 1318.35 li
758.167 1318.06 740.685 1312.88 730.49 1305.68 cv
737.478 1286.4 li
747.966 1293.31 763.117 1298.78 779.431 1298.78 cv
800.115 1298.78 814.096 1286.97 814.096 1270.57 cv
814.096 1254.74 802.736 1244.95 781.179 1236.32 cv
751.464 1224.8 733.111 1211.56 733.111 1186.52 cv
733.111 1162.63 750.3 1144.5 777.1 1140.18 cv
777.1 1111.11 li
795.16 1111.11 li
795.16 1139.03 li
812.645 1139.6 824.584 1144.21 833.035 1149.1 cv
825.751 1168.1 li
819.632 1164.65 807.689 1158.32 789.045 1158.32 cv
766.612 1158.32 758.167 1171.55 758.167 1183.07 cv
758.167 1198.04 768.943 1205.52 794.289 1215.88 cv
824.294 1227.97 839.445 1242.94 839.445 1268.55 cv
839.445 1291.29 823.42 1312.59 793.415 1317.48 cv
793.415 1347.42 li
775.06 1347.42 li
cp
.996078 .8 0 rgb
ef
1329.94 851.15 mo
1392.84 904.696 li
1068.46 1276.65 li
1005.56 1223.1 li
1329.94 851.15 li
cp
1 .560784 .00784314 rgb
ef
1329.55 864.609 mo
1379.42 907.06 li
1364.38 924.307 li
1340.88 917.501 1317.23 911.37 1293.48 905.978 cv
1329.55 864.609 li
cp
1 .631373 .0156863 rgb
ef
1226.92 982.295 mo
1293.48 905.978 li
1317.23 911.37 1340.88 917.501 1364.38 924.307 cv
1297.63 1000.85 li
1274.55 993.165 1250.89 987.024 1226.92 982.295 cv
cp
.996078 .8 0 rgb
ef
1226.92 982.295 mo
1250.89 987.024 1274.55 993.165 1297.63 1000.85 cv
1255.72 1048.89 li
1231.02 1043.03 1205.97 1038.41 1180.61 1035.4 cv
1226.92 982.295 li
cp
1 .631373 .0156863 rgb
ef
1180.61 1035.4 mo
1205.97 1038.41 1231.02 1043.03 1255.72 1048.89 cv
1197.69 1115.44 li
1173.64 1109.27 1149.44 1103.83 1125.25 1098.87 cv
1180.61 1035.4 li
cp
1 .560784 .00784314 rgb
ef
1090.61 1138.59 mo
1125.25 1098.87 li
1149.44 1103.83 1173.64 1109.27 1197.69 1115.44 cv
1155.92 1163.34 li
1134.6 1153.79 1112.75 1145.5 1090.61 1138.59 cv
cp
1 .631373 .0156863 rgb
ef
1090.61 1138.59 mo
1112.75 1145.5 1134.6 1153.79 1155.92 1163.34 cv
1110.6 1215.31 li
1085.79 1209.96 1060.78 1205.44 1035.65 1201.62 cv
1090.61 1138.59 li
cp
.996078 .8 0 rgb
ef
1110.6 1215.31 mo
1068.84 1263.19 li
1018.97 1220.74 li
1035.65 1201.62 li
1060.78 1205.44 1085.79 1209.96 1110.6 1215.31 cv
cp
1 .631373 .0156863 rgb
ef
1229.44 840.171 mo
1292.34 893.723 li
967.956 1265.68 li
905.053 1212.13 li
1229.44 840.171 li
cp
1 .560784 .00784314 rgb
ef
1229.05 853.637 mo
1278.92 896.085 li
1263.88 913.331 li
1240.38 906.524 1216.72 900.397 1192.97 895.001 cv
1229.05 853.637 li
cp
1 .631373 .0156863 rgb
ef
1126.42 971.319 mo
1192.97 895.001 li
1216.72 900.397 1240.38 906.524 1263.88 913.331 cv
1197.12 989.877 li
1174.05 982.191 1150.39 976.052 1126.42 971.319 cv
cp
.996078 .8 0 rgb
ef
1126.42 971.319 mo
1150.39 976.052 1174.05 982.191 1197.12 989.877 cv
1155.22 1037.92 li
1130.52 1032.06 1105.47 1027.43 1080.1 1024.43 cv
1126.42 971.319 li
cp
1 .631373 .0156863 rgb
ef
1080.1 1024.43 mo
1105.47 1027.43 1130.52 1032.06 1155.22 1037.92 cv
1097.19 1104.47 li
1073.14 1098.3 1048.94 1092.86 1024.75 1087.89 cv
1080.1 1024.43 li
cp
1 .560784 .00784314 rgb
ef
990.109 1127.62 mo
1024.75 1087.89 li
1048.94 1092.86 1073.14 1098.3 1097.19 1104.47 cv
1055.42 1152.36 li
1034.1 1142.81 1012.25 1134.53 990.109 1127.62 cv
cp
1 .631373 .0156863 rgb
ef
990.109 1127.62 mo
1012.25 1134.53 1034.1 1142.81 1055.42 1152.36 cv
1010.1 1204.33 li
985.294 1198.99 960.275 1194.47 935.149 1190.64 cv
990.109 1127.62 li
cp
.996078 .8 0 rgb
ef
1010.1 1204.33 mo
968.336 1252.22 li
918.469 1209.76 li
935.149 1190.64 li
960.275 1194.47 985.294 1198.99 1010.1 1204.33 cv
cp
1 .631373 .0156863 rgb
ef
1383.62 715.92 mo
1882.95 715.92 li
1882.95 632.493 li
1383.62 632.493 li
1383.62 715.92 li
cp
1 .560784 .00784314 rgb
ef
1394.24 641.139 mo
1394.24 707.273 li
1417.4 707.273 li
1427.56 684.871 1438.36 662.794 1449.78 641.139 cv
1394.24 641.139 li
cp
1 .631373 .0156863 rgb
ef
1552.23 641.139 mo
1449.78 641.139 li
1438.36 662.794 1427.56 684.871 1417.4 707.273 cv
1520.15 707.273 li
1529.36 684.612 1540.15 662.525 1552.23 641.139 cv
cp
.996078 .8 0 rgb
ef
1552.23 641.139 mo
1540.15 662.525 1529.36 684.612 1520.15 707.273 cv
1584.65 707.273 li
1596.34 684.578 1609.2 662.442 1623.53 641.139 cv
1552.23 641.139 li
cp
1 .631373 .0156863 rgb
ef
1623.53 641.139 mo
1609.2 662.442 1596.34 684.578 1584.65 707.273 cv
1673.99 707.273 li
1685 684.874 1696.69 662.841 1708.73 641.139 cv
1623.53 641.139 li
cp
1 .560784 .00784314 rgb
ef
1762.05 641.139 mo
1708.73 641.139 li
1696.69 662.841 1685 684.874 1673.99 707.273 cv
1738.28 707.273 li
1744.91 684.702 1752.85 662.574 1762.05 641.139 cv
cp
1 .631373 .0156863 rgb
ef
1762.05 641.139 mo
1752.85 662.574 1744.91 684.702 1738.28 707.273 cv
1808.05 707.273 li
1820.2 684.848 1833.13 662.805 1846.66 641.139 cv
1762.05 641.139 li
cp
.996078 .8 0 rgb
ef
1808.05 707.273 mo
1872.33 707.273 li
1872.33 641.139 li
1846.66 641.139 li
1833.13 662.805 1820.2 684.848 1808.05 707.273 cv
cp
1 .631373 .0156863 rgb
ef
1554.45 799.349 mo
2053.78 799.349 li
2053.78 715.92 li
1554.45 715.92 li
1554.45 799.349 li
cp
1 .560784 .00784314 rgb
ef
1565.07 724.566 mo
1565.07 790.704 li
1588.22 790.704 li
1598.39 768.298 1609.19 746.225 1620.61 724.566 cv
1565.07 724.566 li
cp
1 .631373 .0156863 rgb
ef
1723.06 724.566 mo
1620.61 724.566 li
1609.19 746.225 1598.39 768.298 1588.22 790.704 cv
1690.98 790.704 li
1700.19 768.042 1710.98 745.952 1723.06 724.566 cv
cp
.996078 .8 0 rgb
ef
1723.06 724.566 mo
1710.98 745.952 1700.19 768.042 1690.98 790.704 cv
1755.48 790.704 li
1767.17 768.008 1780.03 745.869 1794.35 724.566 cv
1723.06 724.566 li
cp
1 .631373 .0156863 rgb
ef
1794.35 724.566 mo
1780.03 745.869 1767.17 768.008 1755.48 790.704 cv
1844.82 790.704 li
1855.83 768.304 1867.52 746.269 1879.55 724.566 cv
1794.35 724.566 li
cp
1 .560784 .00784314 rgb
ef
1932.88 724.566 mo
1879.55 724.566 li
1867.52 746.269 1855.83 768.304 1844.82 790.704 cv
1909.11 790.704 li
1915.73 768.132 1923.68 746.004 1932.88 724.566 cv
cp
1 .631373 .0156863 rgb
ef
1932.88 724.566 mo
1923.68 746.004 1915.73 768.132 1909.11 790.704 cv
1978.88 790.704 li
1991.03 768.275 2003.95 746.235 2017.49 724.566 cv
1932.88 724.566 li
cp
.996078 .8 0 rgb
ef
1978.88 790.704 mo
2043.16 790.704 li
2043.16 724.566 li
2017.49 724.566 li
2003.95 746.235 1991.03 768.275 1978.88 790.704 cv
cp
1 .631373 .0156863 rgb
ef
1469.04 882.777 mo
1968.36 882.777 li
1968.36 799.348 li
1469.04 799.348 li
1469.04 882.777 li
cp
1 .560784 .00784314 rgb
ef
1479.66 807.993 mo
1479.66 874.134 li
1502.81 874.134 li
1512.98 851.726 1523.77 829.652 1535.19 807.993 cv
1479.66 807.993 li
cp
1 .631373 .0156863 rgb
ef
1637.64 807.993 mo
1535.19 807.993 li
1523.77 829.652 1512.98 851.726 1502.81 874.134 cv
1605.57 874.134 li
1614.78 851.469 1625.57 829.379 1637.64 807.993 cv
cp
.996078 .8 0 rgb
ef
1637.64 807.993 mo
1625.57 829.379 1614.78 851.469 1605.57 874.134 cv
1670.06 874.134 li
1681.75 851.436 1694.62 829.299 1708.94 807.993 cv
1637.64 807.993 li
cp
1 .631373 .0156863 rgb
ef
1708.94 807.993 mo
1694.62 829.299 1681.75 851.436 1670.06 874.134 cv
1759.4 874.134 li
1770.42 851.73 1782.1 829.696 1794.14 807.993 cv
1708.94 807.993 li
cp
1 .560784 .00784314 rgb
ef
1847.47 807.993 mo
1794.14 807.993 li
1782.1 829.696 1770.42 851.73 1759.4 874.134 cv
1823.69 874.134 li
1830.32 851.563 1838.27 829.435 1847.47 807.993 cv
cp
1 .631373 .0156863 rgb
ef
1847.47 807.993 mo
1838.27 829.435 1830.32 851.563 1823.69 874.134 cv
1893.46 874.134 li
1905.61 851.705 1918.54 829.662 1932.07 807.993 cv
1847.47 807.993 li
cp
.996078 .8 0 rgb
ef
1893.46 874.134 mo
1957.75 874.134 li
1957.75 807.993 li
1932.07 807.993 li
1918.54 829.662 1905.61 851.705 1893.46 874.134 cv
cp
1 .631373 .0156863 rgb
ef
1389.72 966.208 mo
1889.05 966.208 li
1889.05 882.779 li
1389.72 882.779 li
1389.72 966.208 li
cp
1 .560784 .00784314 rgb
ef
1400.35 891.423 mo
1400.35 957.561 li
1423.5 957.561 li
1433.67 935.156 1444.46 913.079 1455.88 891.423 cv
1400.35 891.423 li
cp
1 .631373 .0156863 rgb
ef
1558.33 891.423 mo
1455.88 891.423 li
1444.46 913.079 1433.67 935.156 1423.5 957.561 cv
1526.25 957.561 li
1535.46 934.898 1546.25 912.81 1558.33 891.423 cv
cp
.996078 .8 0 rgb
ef
1558.33 891.423 mo
1546.25 912.81 1535.46 934.898 1526.25 957.561 cv
1590.75 957.561 li
1602.44 934.864 1615.3 912.729 1629.63 891.423 cv
1558.33 891.423 li
cp
1 .631373 .0156863 rgb
ef
1629.63 891.423 mo
1615.3 912.729 1602.44 934.864 1590.75 957.561 cv
1680.09 957.561 li
1691.1 935.161 1702.79 913.126 1714.83 891.423 cv
1629.63 891.423 li
cp
1 .560784 .00784314 rgb
ef
1768.15 891.423 mo
1714.83 891.423 li
1702.79 913.126 1691.1 935.161 1680.09 957.561 cv
1744.38 957.561 li
1751.01 934.992 1758.95 912.862 1768.15 891.423 cv
cp
1 .631373 .0156863 rgb
ef
1768.15 891.423 mo
1758.95 912.862 1751.01 934.992 1744.38 957.561 cv
1814.15 957.561 li
1826.3 935.132 1839.23 913.09 1852.76 891.423 cv
1768.15 891.423 li
cp
.996078 .8 0 rgb
ef
1814.15 957.561 mo
1878.43 957.561 li
1878.43 891.423 li
1852.76 891.423 li
1839.23 913.09 1826.3 935.132 1814.15 957.561 cv
cp
1 .631373 .0156863 rgb
ef
1292.11 1049.64 mo
1791.43 1049.64 li
1791.43 966.208 li
1292.11 966.208 li
1292.11 1049.64 li
cp
1 .560784 .00784314 rgb
ef
1302.73 974.854 mo
1302.73 1040.99 li
1325.88 1040.99 li
1336.05 1018.58 1346.84 996.51 1358.26 974.854 cv
1302.73 974.854 li
cp
1 .631373 .0156863 rgb
ef
1460.71 974.854 mo
1358.26 974.854 li
1346.84 996.51 1336.05 1018.58 1325.88 1040.99 cv
1428.64 1040.99 li
1437.85 1018.33 1448.64 996.24 1460.71 974.854 cv
cp
.996078 .8 0 rgb
ef
1460.71 974.854 mo
1448.64 996.24 1437.85 1018.33 1428.64 1040.99 cv
1493.13 1040.99 li
1504.82 1018.29 1517.69 996.159 1532.01 974.854 cv
1460.71 974.854 li
cp
1 .631373 .0156863 rgb
ef
1532.01 974.854 mo
1517.69 996.159 1504.82 1018.29 1493.13 1040.99 cv
1582.47 1040.99 li
1593.49 1018.59 1605.17 996.556 1617.21 974.854 cv
1532.01 974.854 li
cp
1 .560784 .00784314 rgb
ef
1670.54 974.854 mo
1617.21 974.854 li
1605.17 996.556 1593.49 1018.59 1582.47 1040.99 cv
1646.76 1040.99 li
1653.39 1018.42 1661.33 996.292 1670.54 974.854 cv
cp
1 .631373 .0156863 rgb
ef
1670.54 974.854 mo
1661.33 996.292 1653.39 1018.42 1646.76 1040.99 cv
1716.53 1040.99 li
1728.68 1018.56 1741.61 996.52 1755.14 974.854 cv
1670.54 974.854 li
cp
.996078 .8 0 rgb
ef
1716.53 1040.99 mo
1780.81 1040.99 li
1780.81 974.854 li
1755.14 974.854 li
1741.61 996.52 1728.68 1018.56 1716.53 1040.99 cv
cp
1 .631373 .0156863 rgb
ef
1426.33 1133.06 mo
1925.66 1133.06 li
1925.66 1049.64 li
1426.33 1049.64 li
1426.33 1133.06 li
cp
1 .560784 .00784314 rgb
ef
1436.95 1058.28 mo
1436.95 1124.42 li
1460.1 1124.42 li
1470.27 1102.01 1481.07 1079.94 1492.48 1058.28 cv
1436.95 1058.28 li
cp
1 .631373 .0156863 rgb
ef
1594.94 1058.28 mo
1492.48 1058.28 li
1481.07 1079.94 1470.27 1102.01 1460.1 1124.42 cv
1562.86 1124.42 li
1572.07 1101.76 1582.86 1079.67 1594.94 1058.28 cv
cp
.996078 .8 0 rgb
ef
1594.94 1058.28 mo
1582.86 1079.67 1572.07 1101.76 1562.86 1124.42 cv
1627.36 1124.42 li
1639.04 1101.72 1651.91 1079.59 1666.23 1058.28 cv
1594.94 1058.28 li
cp
1 .631373 .0156863 rgb
ef
1666.23 1058.28 mo
1651.91 1079.59 1639.04 1101.72 1627.36 1124.42 cv
1716.7 1124.42 li
1727.71 1102.02 1739.39 1079.99 1751.43 1058.28 cv
1666.23 1058.28 li
cp
1 .560784 .00784314 rgb
ef
1804.76 1058.28 mo
1751.43 1058.28 li
1739.39 1079.99 1727.71 1102.02 1716.7 1124.42 cv
1780.99 1124.42 li
1787.61 1101.85 1795.56 1079.72 1804.76 1058.28 cv
cp
1 .631373 .0156863 rgb
ef
1804.76 1058.28 mo
1795.56 1079.72 1787.61 1101.85 1780.99 1124.42 cv
1850.76 1124.42 li
1862.9 1101.99 1875.83 1079.95 1889.37 1058.28 cv
1804.76 1058.28 li
cp
.996078 .8 0 rgb
ef
1850.76 1124.42 mo
1915.04 1124.42 li
1915.04 1058.28 li
1889.37 1058.28 li
1875.83 1079.95 1862.9 1101.99 1850.76 1124.42 cv
cp
1 .631373 .0156863 rgb
ef
1231.1 1216.49 mo
1730.42 1216.49 li
1730.42 1133.06 li
1231.1 1133.06 li
1231.1 1216.49 li
cp
1 .560784 .00784314 rgb
ef
1241.72 1141.71 mo
1241.72 1207.85 li
1264.87 1207.85 li
1275.04 1185.44 1285.84 1163.37 1297.25 1141.71 cv
1241.72 1141.71 li
cp
1 .631373 .0156863 rgb
ef
1399.7 1141.71 mo
1297.25 1141.71 li
1285.84 1163.37 1275.04 1185.44 1264.87 1207.85 cv
1367.63 1207.85 li
1376.84 1185.18 1387.63 1163.09 1399.7 1141.71 cv
cp
.996078 .8 0 rgb
ef
1399.7 1141.71 mo
1387.63 1163.09 1376.84 1185.18 1367.63 1207.85 cv
1432.12 1207.85 li
1443.81 1185.15 1456.67 1163.01 1471 1141.71 cv
1399.7 1141.71 li
cp
1 .631373 .0156863 rgb
ef
1471 1141.71 mo
1456.67 1163.01 1443.81 1185.15 1432.12 1207.85 cv
1521.46 1207.85 li
1532.48 1185.45 1544.16 1163.41 1556.2 1141.71 cv
1471 1141.71 li
cp
1 .560784 .00784314 rgb
ef
1609.53 1141.71 mo
1556.2 1141.71 li
1544.16 1163.41 1532.48 1185.45 1521.46 1207.85 cv
1585.75 1207.85 li
1592.38 1185.28 1600.32 1163.15 1609.53 1141.71 cv
cp
1 .631373 .0156863 rgb
ef
1609.53 1141.71 mo
1600.32 1163.15 1592.38 1185.28 1585.75 1207.85 cv
1655.52 1207.85 li
1667.67 1185.42 1680.6 1163.38 1694.13 1141.71 cv
1609.53 1141.71 li
cp
.996078 .8 0 rgb
ef
1655.52 1207.85 mo
1719.8 1207.85 li
1719.8 1141.71 li
1694.13 1141.71 li
1680.6 1163.38 1667.67 1185.42 1655.52 1207.85 cv
cp
1 .631373 .0156863 rgb
ef
1383.62 1299.92 mo
1882.95 1299.92 li
1882.95 1216.49 li
1383.62 1216.49 li
1383.62 1299.92 li
cp
1 .560784 .00784314 rgb
ef
1394.24 1225.14 mo
1394.24 1291.28 li
1417.4 1291.28 li
1427.56 1268.87 1438.36 1246.8 1449.78 1225.14 cv
1394.24 1225.14 li
cp
1 .631373 .0156863 rgb
ef
1552.23 1225.14 mo
1449.78 1225.14 li
1438.36 1246.8 1427.56 1268.87 1417.4 1291.28 cv
1520.15 1291.28 li
1529.36 1268.61 1540.15 1246.52 1552.23 1225.14 cv
cp
.996078 .8 0 rgb
ef
1552.23 1225.14 mo
1540.15 1246.52 1529.36 1268.61 1520.15 1291.28 cv
1584.65 1291.28 li
1596.34 1268.58 1609.2 1246.44 1623.53 1225.14 cv
1552.23 1225.14 li
cp
1 .631373 .0156863 rgb
ef
1623.53 1225.14 mo
1609.2 1246.44 1596.34 1268.58 1584.65 1291.28 cv
1673.99 1291.28 li
1685 1268.88 1696.69 1246.84 1708.73 1225.14 cv
1623.53 1225.14 li
cp
1 .560784 .00784314 rgb
ef
1762.05 1225.14 mo
1708.73 1225.14 li
1696.69 1246.84 1685 1268.88 1673.99 1291.28 cv
1738.28 1291.28 li
1744.91 1268.71 1752.85 1246.58 1762.05 1225.14 cv
cp
1 .631373 .0156863 rgb
ef
1762.05 1225.14 mo
1752.85 1246.58 1744.91 1268.71 1738.28 1291.28 cv
1808.05 1291.28 li
1820.2 1268.85 1833.13 1246.81 1846.66 1225.14 cv
1762.05 1225.14 li
cp
.996078 .8 0 rgb
ef
1808.05 1291.28 mo
1872.33 1291.28 li
1872.33 1225.14 li
1846.66 1225.14 li
1833.13 1246.81 1820.2 1268.85 1808.05 1291.28 cv
cp
1 .631373 .0156863 rgb
ef
1362.27 382.204 mo
1861.6 382.204 li
1861.6 298.777 li
1362.27 298.777 li
1362.27 382.204 li
cp
1 .560784 .00784314 rgb
ef
1372.89 307.424 mo
1372.89 373.559 li
1396.04 373.559 li
1406.21 351.155 1417.01 329.08 1428.43 307.424 cv
1372.89 307.424 li
cp
1 .631373 .0156863 rgb
ef
1530.87 307.424 mo
1428.43 307.424 li
1417.01 329.08 1406.21 351.155 1396.04 373.559 cv
1498.8 373.559 li
1508.01 350.896 1518.8 328.807 1530.87 307.424 cv
cp
.996078 .8 0 rgb
ef
1530.87 307.424 mo
1518.8 328.807 1508.01 350.896 1498.8 373.559 cv
1563.3 373.559 li
1574.98 350.863 1587.85 328.727 1602.17 307.424 cv
1530.87 307.424 li
cp
1 .631373 .0156863 rgb
ef
1602.17 307.424 mo
1587.85 328.727 1574.98 350.863 1563.3 373.559 cv
1652.64 373.559 li
1663.65 351.159 1675.33 329.126 1687.37 307.424 cv
1602.17 307.424 li
cp
1 .560784 .00784314 rgb
ef
1740.7 307.424 mo
1687.37 307.424 li
1675.33 329.126 1663.65 351.159 1652.64 373.559 cv
1716.93 373.559 li
1723.55 350.987 1731.5 328.859 1740.7 307.424 cv
cp
1 .631373 .0156863 rgb
ef
1740.7 307.424 mo
1731.5 328.859 1723.55 350.987 1716.93 373.559 cv
1786.7 373.559 li
1798.84 351.133 1811.77 329.09 1825.3 307.424 cv
1740.7 307.424 li
cp
.996078 .8 0 rgb
ef
1786.7 373.559 mo
1850.98 373.559 li
1850.98 307.424 li
1825.3 307.424 li
1811.77 329.09 1798.84 351.133 1786.7 373.559 cv
cp
1 .631373 .0156863 rgb
ef
1496.49 465.634 mo
1995.82 465.634 li
1995.82 382.204 li
1496.49 382.204 li
1496.49 465.634 li
cp
1 .560784 .00784314 rgb
ef
1507.11 390.851 mo
1507.11 456.988 li
1530.26 456.988 li
1540.43 434.581 1551.23 412.507 1562.65 390.851 cv
1507.11 390.851 li
cp
1 .631373 .0156863 rgb
ef
1665.1 390.851 mo
1562.65 390.851 li
1551.23 412.507 1540.43 434.581 1530.26 456.988 cv
1633.02 456.988 li
1642.23 434.326 1653.02 412.237 1665.1 390.851 cv
cp
.996078 .8 0 rgb
ef
1665.1 390.851 mo
1653.02 412.237 1642.23 434.326 1633.02 456.988 cv
1697.52 456.988 li
1709.21 434.292 1722.07 412.154 1736.39 390.851 cv
1665.1 390.851 li
cp
1 .631373 .0156863 rgb
ef
1736.39 390.851 mo
1722.07 412.154 1709.21 434.292 1697.52 456.988 cv
1786.86 456.988 li
1797.87 434.586 1809.55 412.554 1821.6 390.851 cv
1736.39 390.851 li
cp
1 .560784 .00784314 rgb
ef
1874.92 390.851 mo
1821.6 390.851 li
1809.55 412.554 1797.87 434.586 1786.86 456.988 cv
1851.15 456.988 li
1857.78 434.417 1865.72 412.289 1874.92 390.851 cv
cp
1 .631373 .0156863 rgb
ef
1874.92 390.851 mo
1865.72 412.289 1857.78 434.417 1851.15 456.988 cv
1920.92 456.988 li
1933.07 434.56 1945.99 412.521 1959.52 390.851 cv
1874.92 390.851 li
cp
.996078 .8 0 rgb
ef
1920.92 456.988 mo
1985.2 456.988 li
1985.2 390.851 li
1959.52 390.851 li
1945.99 412.521 1933.07 434.56 1920.92 456.988 cv
cp
1 .631373 .0156863 rgb
ef
1301.26 549.063 mo
1800.58 549.063 li
1800.58 465.633 li
1301.26 465.633 li
1301.26 549.063 li
cp
1 .560784 .00784314 rgb
ef
1311.88 474.278 mo
1311.88 540.419 li
1335.03 540.419 li
1345.2 518.011 1356 495.937 1367.41 474.278 cv
1311.88 474.278 li
cp
1 .631373 .0156863 rgb
ef
1469.86 474.278 mo
1367.41 474.278 li
1356 495.937 1345.2 518.011 1335.03 540.419 cv
1437.79 540.419 li
1447 517.754 1457.79 495.665 1469.86 474.278 cv
cp
.996078 .8 0 rgb
ef
1469.86 474.278 mo
1457.79 495.665 1447 517.754 1437.79 540.419 cv
1502.29 540.419 li
1513.97 517.72 1526.84 495.584 1541.16 474.278 cv
1469.86 474.278 li
cp
1 .631373 .0156863 rgb
ef
1541.16 474.278 mo
1526.84 495.584 1513.97 517.72 1502.29 540.419 cv
1591.62 540.419 li
1602.64 518.016 1614.32 495.981 1626.36 474.278 cv
1541.16 474.278 li
cp
1 .560784 .00784314 rgb
ef
1679.69 474.278 mo
1626.36 474.278 li
1614.32 495.981 1602.64 518.016 1591.62 540.419 cv
1655.91 540.419 li
1662.54 517.848 1670.48 495.719 1679.69 474.278 cv
cp
1 .631373 .0156863 rgb
ef
1679.69 474.278 mo
1670.48 495.719 1662.54 517.848 1655.91 540.419 cv
1725.69 540.419 li
1737.83 517.987 1750.76 495.944 1764.29 474.278 cv
1679.69 474.278 li
cp
.996078 .8 0 rgb
ef
1725.69 540.419 mo
1789.97 540.419 li
1789.97 474.278 li
1764.29 474.278 li
1750.76 495.944 1737.83 517.987 1725.69 540.419 cv
cp
1 .631373 .0156863 rgb
ef
1453.78 632.493 mo
1953.11 632.493 li
1953.11 549.064 li
1453.78 549.064 li
1453.78 632.493 li
cp
1 .560784 .00784314 rgb
ef
1464.41 557.708 mo
1464.41 623.846 li
1487.56 623.846 li
1497.73 601.441 1508.52 579.364 1519.94 557.708 cv
1464.41 557.708 li
cp
1 .631373 .0156863 rgb
ef
1622.39 557.708 mo
1519.94 557.708 li
1508.52 579.364 1497.73 601.441 1487.56 623.846 cv
1590.32 623.846 li
1599.53 601.182 1610.31 579.095 1622.39 557.708 cv
cp
.996078 .8 0 rgb
ef
1622.39 557.708 mo
1610.31 579.095 1599.53 601.182 1590.32 623.846 cv
1654.81 623.846 li
1666.5 601.15 1679.36 579.015 1693.69 557.708 cv
1622.39 557.708 li
cp
1 .631373 .0156863 rgb
ef
1693.69 557.708 mo
1679.36 579.015 1666.5 601.15 1654.81 623.846 cv
1744.15 623.846 li
1755.17 601.446 1766.85 579.412 1778.89 557.708 cv
1693.69 557.708 li
cp
1 .560784 .00784314 rgb
ef
1832.21 557.708 mo
1778.89 557.708 li
1766.85 579.412 1755.17 601.446 1744.15 623.846 cv
1808.44 623.846 li
1815.07 601.275 1823.01 579.146 1832.21 557.708 cv
cp
1 .631373 .0156863 rgb
ef
1832.21 557.708 mo
1823.01 579.146 1815.07 601.275 1808.44 623.846 cv
1878.21 623.846 li
1890.36 601.417 1903.29 579.375 1916.82 557.708 cv
1832.21 557.708 li
cp
.996078 .8 0 rgb
ef
1878.21 623.846 mo
1942.49 623.846 li
1942.49 557.708 li
1916.82 557.708 li
1903.29 579.375 1890.36 601.417 1878.21 623.846 cv
cp
1 .631373 .0156863 rgb
ef
2161.81 1238.45 mo
2101.29 1350.13 1961.68 1391.6 1849.99 1331.08 cv
1738.31 1270.55 1696.83 1130.95 1757.36 1019.26 cv
1817.88 907.574 1957.49 866.101 2069.17 926.625 cv
2180.86 987.151 2222.34 1126.76 2161.81 1238.45 cv
cp
1 .560784 .00784314 rgb
ef
2150.9 1232.53 mo
2093.64 1338.19 1961.57 1377.43 1855.9 1320.17 cv
1750.24 1262.91 1711.01 1130.84 1768.27 1025.17 cv
1825.53 919.513 1957.6 880.276 2063.26 937.536 cv
2168.92 994.795 2208.16 1126.87 2150.9 1232.53 cv
cp
1 .631373 .0156863 rgb
ef
2122.43 1217.1 mo
2073.69 1307.04 1961.27 1340.44 1871.33 1291.7 cv
1781.4 1242.96 1748 1130.54 1796.74 1040.6 cv
1845.48 950.666 1957.9 917.267 2047.83 966.006 cv
2137.77 1014.74 2171.17 1127.16 2122.43 1217.1 cv
cp
1 .560784 .00784314 rgb
ef
1883.42 1245.3 mo
1899.67 1215.3 li
1882.61 1205.67 1867.68 1190.67 1861.31 1177.61 cv
1879.22 1161.57 li
1886.05 1174.49 1898.44 1188.51 1915.07 1197.52 cv
1936.16 1208.95 1957.01 1204.49 1966.19 1187.57 cv
1975.04 1171.23 1968.93 1154.86 1951.78 1134.04 cv
1927.92 1105.74 1916.62 1081.94 1930.62 1056.1 cv
1943.98 1031.45 1971.64 1022.23 2001.38 1032.58 cv
2017.63 1002.59 li
2036.05 1012.57 li
2020.44 1041.38 li
2037.93 1051.63 2047.54 1062.98 2053.41 1072.69 cv
2035.37 1088.28 li
2031.06 1081.33 2022.42 1068.2 2003.42 1057.89 cv
1980.55 1045.5 1964.53 1054.5 1958.09 1066.38 cv
1949.72 1081.82 1956.53 1095.5 1976.57 1120.19 cv
2000.4 1149.25 2007.48 1173.06 1993.15 1199.49 cv
1980.44 1222.95 1952.19 1236.08 1918.86 1224.55 cv
1902.13 1255.44 li
1883.42 1245.3 li
cp
.996078 .8 0 rgb
ef
1720.04 697.021 mo
1818.04 777.848 1831.96 922.818 1751.13 1020.82 cv
1670.3 1118.82 1525.33 1132.74 1427.33 1051.91 cv
1329.33 971.083 1315.41 826.112 1396.24 728.116 cv
1477.07 630.113 1622.04 616.192 1720.04 697.021 cv
cp
1 .560784 .00784314 rgb
ef
1712.14 706.594 mo
1804.86 783.063 1818.03 920.207 1741.56 1012.92 cv
1665.09 1105.64 1527.94 1118.81 1435.23 1042.34 cv
1342.51 965.871 1329.35 828.721 1405.81 736.008 cv
1482.28 643.295 1619.43 630.126 1712.14 706.594 cv
cp
1 .631373 .0156863 rgb
ef
1691.54 731.575 mo
1770.46 796.662 1781.67 913.401 1716.58 992.319 cv
1651.49 1071.24 1534.75 1082.45 1455.83 1017.36 cv
1376.92 952.269 1365.71 835.528 1430.79 756.614 cv
1495.88 677.696 1612.62 666.486 1691.54 731.575 cv
cp
1 .560784 .00784314 rgb
ef
1673.36 971.561 mo
1647.04 949.851 li
1634.31 964.749 1616.72 976.516 1602.68 980.265 cv
1590.38 959.612 li
1604.37 955.388 1620.5 945.921 1632.54 931.326 cv
1647.8 912.823 1647.43 891.501 1632.57 879.252 cv
1618.24 867.428 1601 870.286 1577.28 883.121 cv
1544.93 901.103 1519.4 907.635 1496.73 888.934 cv
1475.1 871.095 1471.36 842.179 1487.22 814.979 cv
1460.9 793.268 li
1474.23 777.111 li
1499.51 797.961 li
1512.93 782.754 1525.91 775.512 1536.57 771.607 cv
1548.4 792.306 li
1540.76 795.202 1526.21 801.156 1512.46 817.836 cv
1495.9 837.9 1501.66 855.346 1512.09 863.943 cv
1525.64 875.121 1540.37 871.066 1568.45 856.133 cv
1601.53 838.315 1626.26 835.942 1649.45 855.07 cv
1670.04 872.052 1677.5 902.29 1659.79 932.789 cv
1686.9 955.143 li
1673.36 971.561 li
cp
.996078 .8 0 rgb
ef
1968.56 1077.03 mo
1996.84 1200.87 1919.38 1324.2 1795.53 1352.48 cv
1671.69 1380.77 1548.36 1303.31 1520.08 1179.46 cv
1491.79 1055.62 1569.25 932.293 1693.1 904.004 cv
1816.94 875.718 1940.27 953.184 1968.56 1077.03 cv
cp
1 .560784 .00784314 rgb
ef
1956.46 1079.79 mo
1983.22 1196.95 1909.93 1313.62 1792.77 1340.38 cv
1675.61 1367.15 1558.94 1293.86 1532.18 1176.7 cv
1505.42 1059.54 1578.7 942.864 1695.87 916.103 cv
1813.02 889.344 1929.7 962.627 1956.46 1079.79 cv
cp
1 .631373 .0156863 rgb
ef
1924.89 1087 mo
1947.67 1186.73 1885.29 1286.04 1785.56 1308.82 cv
1685.83 1331.59 1586.52 1269.21 1563.74 1169.49 cv
1540.97 1069.76 1603.35 970.447 1703.07 947.672 cv
1802.8 924.893 1902.11 987.273 1924.89 1087 cv
cp
1 .560784 .00784314 rgb
ef
1764 1265.99 mo
1756.4 1232.73 li
1737.23 1236.76 1716.11 1235.35 1702.7 1229.74 cv
1705.57 1205.87 li
1719.22 1211.07 1737.78 1213.42 1756.23 1209.21 cv
1779.61 1203.86 1792.33 1186.75 1788.04 1167.98 cv
1783.91 1149.87 1768.5 1141.6 1741.88 1137.29 cv
1705.27 1131.79 1681.07 1121.38 1674.53 1092.73 cv
1668.28 1065.4 1682.98 1040.21 1712.14 1028.35 cv
1704.55 995.086 li
1724.96 990.424 li
1732.26 1022.37 li
1752.17 1018.51 1766.88 1020.7 1777.71 1024.12 cv
1774.44 1047.73 li
1766.62 1045.36 1751.46 1041.2 1730.38 1046.01 cv
1705.03 1051.8 1698.94 1069.13 1701.95 1082.31 cv
1705.86 1099.43 1720 1105.21 1751.36 1110.52 cv
1788.44 1116.61 1809.47 1129.82 1816.17 1159.13 cv
1822.11 1185.15 1809.56 1213.65 1776.92 1227 cv
1784.74 1261.25 li
1764 1265.99 li
cp
.996078 .8 0 rgb
ef
1620.36 995.848 mo
1718.36 1076.68 1732.28 1221.65 1651.45 1319.65 cv
1570.62 1417.65 1425.66 1431.57 1327.66 1350.74 cv
1229.66 1269.91 1215.74 1124.94 1296.56 1026.94 cv
1377.39 928.943 1522.36 915.021 1620.36 995.848 cv
cp
1 .560784 .00784314 rgb
ef
1612.46 1005.42 mo
1705.18 1081.89 1718.35 1219.04 1641.88 1311.75 cv
1565.41 1404.47 1428.26 1417.63 1335.55 1341.17 cv
1242.84 1264.7 1229.67 1127.55 1306.14 1034.84 cv
1382.6 942.125 1519.75 928.956 1612.46 1005.42 cv
cp
1 .631373 .0156863 rgb
ef
1591.86 1030.4 mo
1670.78 1095.49 1681.99 1212.23 1616.9 1291.15 cv
1551.81 1370.06 1435.07 1381.27 1356.16 1316.18 cv
1277.24 1251.1 1266.03 1134.36 1331.12 1055.44 cv
1396.21 976.523 1512.95 965.316 1591.86 1030.4 cv
cp
1 .560784 .00784314 rgb
ef
1573.68 1270.39 mo
1547.36 1248.68 li
1534.63 1263.58 1517.04 1275.35 1503.01 1279.09 cv
1490.7 1258.44 li
1504.69 1254.22 1520.82 1244.75 1532.86 1230.16 cv
1548.12 1211.65 1547.75 1190.33 1532.9 1178.08 cv
1518.57 1166.26 1501.32 1169.11 1477.6 1181.95 cv
1445.25 1199.93 1419.72 1206.46 1397.05 1187.76 cv
1375.42 1169.92 1371.68 1141.01 1387.54 1113.81 cv
1361.23 1092.1 li
1374.55 1075.94 li
1399.83 1096.79 li
1413.25 1081.58 1426.23 1074.34 1436.89 1070.43 cv
1448.72 1091.14 li
1441.08 1094.03 1426.53 1099.99 1412.78 1116.66 cv
1396.23 1136.73 1401.98 1154.17 1412.41 1162.77 cv
1425.96 1173.95 1440.68 1169.9 1468.77 1154.96 cv
1501.85 1137.15 1526.58 1134.77 1549.77 1153.9 cv
1570.36 1170.88 1577.83 1201.12 1560.12 1231.62 cv
1587.22 1253.97 li
1573.68 1270.39 li
cp
.996078 .8 0 rgb
ef
1010.2 1340.46 mo
1009.82 1341.61 992.145 1370.8 992.145 1370.8 cv
990.61 1397.69 li
1016.73 1386.93 li
1015.96 1371.96 li
1010.2 1340.46 li
cp
1 .631373 .0156863 rgb
ef
1053.22 1066.21 mo
1056.68 1161.1 li
1015.96 1384.25 li
992.145 1370.8 li
988.636 1326.91 li
981.781 1241.25 985.289 1155.08 999.081 1070.27 cv
999.742 1066.21 li
1053.22 1066.21 li
cp
.215686 .211765 .337255 rgb
ef
932.225 1415.74 mo
932.225 1415.74 933.762 1377.72 992.145 1370.8 cv
992.145 1370.8 997.908 1385.4 1016.73 1386.93 cv
1020.19 1413.82 li
932.225 1415.74 li
cp
.215686 .219608 .341176 rgb
ef
1097.6 1341.36 mo
1097.98 1342.51 1115.65 1371.7 1115.65 1371.7 cv
1117.19 1398.59 li
1091.07 1387.84 li
1091.83 1372.86 li
1097.6 1341.36 li
cp
1 .631373 .0156863 rgb
ef
1175.57 1416.65 mo
1175.57 1416.65 1174.04 1378.62 1115.65 1371.7 cv
1115.65 1371.7 1109.89 1386.3 1091.07 1387.84 cv
1087.61 1414.73 li
1175.57 1416.65 li
cp
.215686 .219608 .341176 rgb
ef
1053.22 1066.21 mo
1049.76 1161.36 li
1091.09 1384.42 li
1114.9 1370.91 li
1121.63 1283.94 li
1126.05 1226.87 1123.61 1169.48 1114.36 1112.99 cv
1106.7 1066.21 li
1053.22 1066.21 li
cp
.215686 .211765 .337255 rgb
ef
1221.58 895.559 mo
1220.99 895.815 1220.49 896.179 1220.05 896.602 cv
1218.45 897.618 1217.04 898.982 1216.05 900.75 cv
1212.84 906.457 1214.87 913.687 1220.58 916.896 cv
1222.79 918.141 1225.22 918.579 1227.57 918.341 cv
1228.44 918.397 1229.33 918.263 1230.17 917.854 cv
1230.22 917.83 li
1238.74 921.304 1253.86 918.935 1260.91 916.051 cv
1267.96 913.171 1267.97 910.738 1269.43 905.184 cv
1273 902.984 1276.16 899.941 1274.38 895.266 cv
1280.18 891.636 1280.73 886.717 1278.42 880.574 cv
1279.82 877.452 1284.6 873.405 1277.4 870.866 cv
1270.19 868.331 1254.6 874.745 1247.04 878.771 cv
1253.63 867.997 1246.96 849.495 1239.98 857.977 cv
1240.82 866.876 1235.02 872.643 1228.99 877.435 cv
1222.95 882.229 1223.81 887.614 1224.86 894.065 cv
1223.77 894.573 1222.67 895.066 1221.58 895.559 cv
cp
1 .788235 .709804 rgb
ef
1024.16 878.541 mo
948.71 926.382 li
976.043 961.062 li
1022.64 906.644 li
1024.16 878.541 li
cp
.239216 .243137 .364706 rgb
ef
1106.7 927.205 mo
1082.28 878.541 li
1063.16 874.145 1043.28 874.145 1024.16 878.541 cv
999.742 927.205 li
984.218 1100.01 li
999.742 1099.06 li
1052.59 1111.77 li
1106.7 1099.06 li
1123.83 1098.99 li
1106.7 927.205 li
cp
ef
1026.34 846.973 mo
1026.34 846.973 1040.83 868.535 1052.29 868.535 cv
1060.53 868.535 1056.94 869.928 1072.44 859.377 cv
1079.55 854.531 1093.8 834.073 1089.84 809.603 cv
1086.1 786.459 1082.03 814.992 1072.74 801.054 cv
1066.37 791.504 1050.96 791.793 1036.74 803.679 cv
1022.52 815.562 1022.1 832.118 1026.34 846.973 cv
cp
ef
1059.91 891.52 mo
1048.72 891.52 li
1046.75 891.52 1045.16 889.928 1045.16 887.964 cv
1045.16 855.863 li
1063.47 855.863 li
1063.47 887.964 li
1063.47 889.928 1061.88 891.52 1059.91 891.52 cv
cp
1 .788235 .709804 rgb
ef
1031.34 810.936 mo
1030.2 848.889 li
1029.79 862.515 1040.61 873.841 1054.25 874.043 cv
1054.25 874.043 li
1068.28 874.253 1079.6 862.621 1079.01 848.599 cv
1077.45 811.312 li
1031.34 810.936 li
cp
ef
1082.28 878.541 mo
1165.54 910.932 li
1162.57 954.673 li
1091.31 919.035 li
1082.28 878.541 li
cp
.239216 .243137 .364706 rgb
ef
1028.06 822.996 mo
1028.06 822.996 1047.96 830.642 1061.3 829.429 cv
1061.3 829.429 1062.28 826.517 1059.85 823.603 cv
1059.85 823.603 1074.89 830.762 1081.33 827.609 cv
1085.81 816.81 1080.96 809.163 1080.96 809.163 cv
1044.56 806.372 li
1044.56 806.372 1028.06 800.79 1028.06 822.996 cv
cp
ef
1045.13 890.487 mo
1048.22 899.586 li
1059.51 899.586 li
1063.51 890.848 li
1045.13 890.487 li
cp
1 .631373 .0156863 rgb
ef
1048.22 899.586 mo
1027.35 1001.85 li
1053.57 1033.22 li
1077.19 1005.17 li
1059.51 899.586 li
1048.22 899.586 li
cp
ef
1045.27 876.892 mo
1053.57 1091.63 li
1020.14 979.624 li
1036.56 939.561 li
1019.47 892.645 li
1045.27 876.892 li
cp
.215686 .211765 .337255 rgb
ef
1061.86 876.892 mo
1053.57 1091.63 li
1086.99 979.624 li
1070.57 939.561 li
1087.66 892.645 li
1061.86 876.892 li
cp
ef
900.959 912.872 mo
901.563 913.082 902.103 913.401 902.572 913.785 cv
904.252 914.661 905.766 915.9 906.905 917.578 cv
910.587 922.994 909.179 930.369 903.762 934.051 cv
901.667 935.477 899.276 936.12 896.919 936.084 cv
896.061 936.211 895.162 936.156 894.288 935.816 cv
894.23 935.796 li
886.04 939.979 870.772 938.9 863.502 936.626 cv
856.231 934.352 856.019 931.928 854.09 926.516 cv
850.348 924.629 846.943 921.862 848.315 917.058 cv
842.232 913.928 841.27 909.076 843.051 902.754 cv
841.395 899.765 836.284 896.133 843.251 892.995 cv
850.223 889.857 866.297 894.932 874.171 898.3 cv
866.691 888.122 871.773 869.124 879.443 876.985 cv
879.354 885.924 885.622 891.177 892.044 895.445 cv
898.468 899.71 898.065 905.147 897.565 911.669 cv
898.693 912.078 899.826 912.479 900.959 912.872 cv
cp
1 .788235 .709804 rgb
ef
976.043 961.062 mo
892.648 940.313 li
899.805 907.483 li
975.633 919.678 li
988.883 945.131 li
976.043 961.062 li
cp
.239216 .243137 .364706 rgb
ef
1139.36 920.733 mo
1218.21 890.824 li
1230.58 921.971 li
1162.57 954.673 li
1137.79 941.13 li
1139.36 920.733 li
cp
ef
1038.61 895.313 mo
1054.32 891.52 li
1045.12 875.282 li
1038.61 895.313 li
cp
.505882 .552941 .709804 rgb
ef
1063.51 875.282 mo
1054.32 891.52 li
1070.02 895.313 li
1063.51 875.282 li
cp
ef
850.021 945.488 mo
850.021 975.556 830.563 975.734 807.679 975.734 cv
784.793 975.734 767.151 975.556 767.151 945.488 cv
767.151 915.423 785.701 891.048 808.586 891.048 cv
831.468 891.048 850.021 915.423 850.021 945.488 cv
cp
.239216 .243137 .364706 rgb
ef
699.792 1134.61 mo
683.625 1140.61 li
732.118 1271.25 li
748.287 1265.25 li
699.792 1134.61 li
cp
.505882 .552941 .709804 rgb
ef
676.15 1129.16 mo
719.107 1129.16 li
722.792 1129.16 725.781 1132.15 725.781 1135.83 cv
725.781 1144.67 li
725.781 1148.36 722.792 1151.35 719.107 1151.35 cv
676.15 1151.35 li
672.465 1151.35 669.478 1148.36 669.478 1144.67 cv
669.478 1135.83 li
669.478 1132.15 672.465 1129.16 676.15 1129.16 cv
cp
.317647 .337255 .588235 rgb
ef
678.375 1156.98 mo
718.518 1156.98 li
718.518 1151.34 li
678.375 1151.34 li
678.375 1156.98 li
cp
.505882 .552941 .709804 rgb
ef
929.352 1134.61 mo
945.521 1140.61 li
897.025 1271.25 li
880.856 1265.25 li
929.352 1134.61 li
cp
ef
952.997 1129.16 mo
910.038 1129.16 li
906.353 1129.16 903.366 1132.15 903.366 1135.83 cv
903.366 1144.67 li
903.366 1148.36 906.353 1151.35 910.038 1151.35 cv
952.997 1151.35 li
956.679 1151.35 959.668 1148.36 959.668 1144.67 cv
959.668 1135.83 li
959.668 1132.15 956.679 1129.16 952.997 1129.16 cv
cp
.317647 .337255 .588235 rgb
ef
910.628 1156.98 mo
950.769 1156.98 li
950.769 1151.34 li
910.628 1151.34 li
910.628 1156.98 li
cp
.505882 .552941 .709804 rgb
ef
706.385 1397.21 mo
922.755 1397.21 li
926.442 1397.21 929.432 1400.2 929.432 1403.88 cv
929.432 1412.73 li
929.432 1416.41 926.442 1419.4 922.755 1419.4 cv
706.385 1419.4 li
702.701 1419.4 699.714 1416.41 699.714 1412.73 cv
699.714 1403.88 li
699.714 1400.2 702.701 1397.21 706.385 1397.21 cv
cp
ef
738.401 1411.53 mo
753.51 1411.53 li
753.51 1274.63 li
738.401 1274.63 li
738.401 1411.53 li
cp
ef
875.637 1412.25 mo
890.747 1412.25 li
890.747 1275.34 li
875.637 1275.34 li
875.637 1412.25 li
cp
ef
724.06 1253.44 mo
905.087 1253.44 li
908.774 1253.44 911.759 1256.42 911.759 1260.11 cv
911.759 1268.95 li
911.759 1272.64 908.774 1275.63 905.087 1275.63 cv
724.06 1275.63 li
720.372 1275.63 717.383 1272.64 717.383 1268.95 cv
717.383 1260.11 li
717.383 1256.42 720.372 1253.44 724.06 1253.44 cv
cp
.317647 .337255 .588235 rgb
ef
738.486 1282.47 mo
890.658 1282.47 li
890.658 1275.68 li
738.486 1275.68 li
738.486 1282.47 li
cp
.505882 .552941 .709804 rgb
ef
719.123 1048.28 mo
702.811 1075.59 687.681 1107.62 678.118 1138.61 cv
675.732 1146.34 679.919 1154.58 687.502 1157.39 cv
687.794 1157.5 li
696.196 1160.63 705.429 1156 708.027 1147.42 cv
716.825 1118.4 728.81 1088.05 742.866 1061.55 cv
747.201 1053.39 742.342 1043.38 733.209 1041.93 cv
733.046 1041.9 732.888 1041.88 732.725 1041.86 cv
727.298 1041.06 721.936 1043.57 719.123 1048.28 cv
cp
1 .721569 .611765 rgb
ef
744.873 1005.12 mo
686.801 1076.93 li
723.466 1111.49 li
778.413 1022.98 li
744.873 1005.12 li
cp
.917647 .933333 .976471 rgb
ef
900.018 1046.97 mo
915.502 1074.75 929.66 1107.23 938.287 1138.49 cv
940.439 1146.29 936.005 1154.4 928.343 1156.99 cv
928.045 1157.09 li
919.555 1159.96 910.467 1155.05 908.126 1146.39 cv
900.205 1117.13 889.144 1086.42 875.883 1059.52 cv
871.797 1051.23 876.954 1041.37 886.127 1040.2 cv
886.291 1040.17 886.452 1040.16 886.615 1040.14 cv
892.063 1039.51 897.348 1042.18 900.018 1046.97 cv
cp
1 .721569 .611765 rgb
ef
869.092 1005.21 mo
927.164 1077.02 li
890.497 1111.58 li
835.553 1023.08 li
869.092 1005.21 li
cp
.917647 .933333 .976471 rgb
ef
888.008 1203.7 mo
861.08 1175.63 li
852.318 1116 li
867.676 1035.3 li
869.092 1005.21 li
807.007 972.623 li
806.958 972.714 li
806.958 972.525 li
744.873 1005.12 li
746.288 1035.21 li
761.646 1115.9 li
752.885 1175.53 li
725.958 1203.6 li
807.007 1212.74 li
888.008 1203.7 li
cp
.505882 .552941 .709804 rgb
ef
777.684 979.472 mo
777.684 979.472 776.976 1013.63 785.403 1021.08 cv
793.83 1028.53 811.394 1033.34 825.331 1029.13 cv
839.268 1024.92 843.033 1011.45 845.465 1004.64 cv
847.895 997.832 853.426 988.759 851.644 984.706 cv
849.86 980.656 835.923 970.933 827.335 969.149 cv
818.746 967.367 789.095 961.354 777.684 979.472 cv
cp
.180392 .203922 .505882 rgb
ef
775.337 985.176 mo
774.665 986.184 762.25 1048.93 764.597 1078.79 cv
790.435 1092.55 807.549 1085.84 807.549 1085.84 cv
807.549 1085.84 798.658 1025.95 809.227 1003.97 cv
804.194 978.128 775.337 985.176 775.337 985.176 cv
cp
ef
808.615 1011.62 mo
808.615 1011.62 li
800.961 1011.62 794.75 1005.41 794.75 997.757 cv
794.75 965.472 li
794.75 961.132 798.271 957.613 802.607 957.613 cv
814.62 957.613 li
818.96 957.613 822.479 961.132 822.479 965.472 cv
822.479 997.757 li
822.479 1005.41 816.271 1011.62 808.615 1011.62 cv
cp
1 .788235 .709804 rgb
ef
778.721 910.427 mo
777.261 958.848 li
776.737 976.235 790.55 990.683 807.943 990.944 cv
807.943 990.944 li
825.845 991.209 840.292 976.37 839.543 958.481 cv
837.547 910.909 li
778.721 910.427 li
cp
ef
885.466 1176.13 mo
885.466 1176.13 766.674 1159.38 708.989 1202.18 cv
695.034 1243.12 685.73 1334.29 707.13 1394.76 cv
707.13 1394.76 730.389 1391.98 745.275 1386.39 cv
745.275 1386.39 745.275 1311.96 761.091 1254.28 cv
862.501 1256.14 891.978 1266.37 885.466 1176.13 cv
cp
.239216 .243137 .364706 rgb
ef
700.105 1133.15 mo
699.587 1132.62 698.991 1132.21 698.351 1131.9 cv
696.603 1130.57 694.552 1129.59 692.226 1129.22 cv
684.717 1128.03 677.659 1133.15 676.46 1140.66 cv
675.999 1143.56 676.502 1146.4 677.708 1148.85 cv
677.993 1149.82 678.497 1150.74 679.285 1151.49 cv
679.334 1151.54 li
678.979 1162.21 687.652 1177.73 693.631 1184.25 cv
699.61 1190.76 702.261 1189.79 708.901 1189.15 cv
712.731 1192.15 717.32 1194.36 721.694 1190.55 cv
727.985 1195.4 733.563 1194.01 739.324 1189.02 cv
743.289 1189.29 749.626 1192.87 749.483 1184 cv
749.341 1175.12 736.072 1160.73 728.644 1154.11 cv
743.034 1156.96 760.495 1142.24 748.448 1138.05 cv
739.095 1142.56 730.48 1138.56 722.828 1133.92 cv
715.173 1129.27 709.655 1132.38 703.052 1136.13 cv
702.061 1135.14 701.081 1134.15 700.105 1133.15 cv
cp
1 .788235 .709804 rgb
ef
747.813 1176.13 mo
747.813 1176.13 866.605 1159.38 924.288 1202.18 cv
938.243 1243.12 947.546 1334.29 926.149 1394.76 cv
926.149 1394.76 902.889 1391.98 888.003 1386.39 cv
888.003 1386.39 888.003 1311.96 872.185 1254.28 cv
770.776 1256.14 741.3 1266.37 747.813 1176.13 cv
cp
.239216 .243137 .364706 rgb
ef
914.8 1134.53 mo
915.291 1133.97 915.861 1133.52 916.48 1133.19 cv
918.153 1131.76 920.149 1130.67 922.447 1130.17 cv
929.878 1128.55 937.213 1133.27 938.827 1140.7 cv
939.452 1143.58 939.107 1146.43 938.043 1148.95 cv
937.81 1149.94 937.358 1150.88 936.614 1151.67 cv
936.57 1151.72 li
937.52 1162.36 929.728 1178.34 924.122 1185.18 cv
918.519 1192.02 915.817 1191.2 909.148 1190.93 cv
905.492 1194.14 901.037 1196.61 896.455 1193.04 cv
890.442 1198.24 884.8 1197.17 878.769 1192.5 cv
874.828 1192.99 868.698 1196.92 868.345 1188.05 cv
867.99 1179.18 880.431 1164.07 887.479 1157.05 cv
873.27 1160.7 855.013 1146.97 866.805 1142.12 cv
876.396 1146.1 884.777 1141.63 892.159 1136.56 cv
899.539 1131.5 905.225 1134.29 912.025 1137.66 cv
912.959 1136.62 913.882 1135.58 914.8 1134.53 cv
cp
1 .788235 .709804 rgb
ef
699.154 1200.14 mo
912.736 1200.14 li
912.736 1055.93 li
699.154 1055.93 li
699.154 1200.14 li
cp
.239216 .243137 .364706 rgb
ef
821.058 1128.04 mo
821.058 1136.38 814.291 1143.15 805.947 1143.15 cv
797.6 1143.15 790.833 1136.38 790.833 1128.04 cv
790.833 1119.69 797.6 1112.92 805.947 1112.92 cv
814.291 1112.92 821.058 1119.69 821.058 1128.04 cv
cp
1 1 1 rgb
ef
684.935 1459.96 mo
684.935 1459.96 665.512 1433.48 707.13 1394.76 cv
707.13 1394.76 742.931 1389.06 745.275 1386.39 cv
761.737 1417.04 li
684.935 1459.96 li
cp
.239216 .243137 .364706 rgb
ef
948.516 1459.39 mo
948.516 1459.39 967.937 1432.92 926.318 1394.2 cv
926.318 1394.2 890.52 1388.5 888.173 1385.83 cv
871.713 1416.48 li
948.516 1459.39 li
cp
ef
772.594 937.02 mo
772.594 937.02 811.309 948.515 843.972 940.046 cv
837.547 910.909 li
813.122 897.703 li
778.721 910.427 li
772.594 937.02 li
cp
ef
777.684 979.472 mo
777.684 979.472 819.767 1003.5 851.644 984.706 cv
850.972 1012.89 840.767 1032.15 832.716 1036.18 cv
824.659 1040.21 749.499 1036.52 777.684 979.472 cv
cp
.317647 .337255 .588235 rgb
ef
1537.72 775.704 mo
1537.72 775.704 1609.72 803.383 1590.84 862.572 cv
1572.47 920.15 1588.36 955.889 1617.64 966.314 cv
1594.31 993.613 1542.19 962.841 1522.83 936.035 cv
1503.48 909.229 1504.97 808.96 1504.97 808.96 cv
1537.72 775.704 li
cp
.239216 .243137 .364706 rgb
ef
1519.9 885.739 mo
1451.35 920.825 li
1451.7 887.729 li
1519.16 851.049 li
1524.51 849.088 1530.39 852.073 1531.99 857.552 cv
1531.99 857.552 li
1535.22 868.637 1530.15 880.461 1519.9 885.739 cv
cp
.917647 .933333 .976471 rgb
ef
1468.6 824.022 mo
1463.82 912.33 li
1454.22 919.269 li
1430.75 911.931 li
1442.45 819.589 li
1442.45 819.589 1454.13 814.014 1468.6 824.022 cv
cp
ef
1466.09 826.307 mo
1465.89 826.864 1465.59 827.362 1465.23 827.795 cv
1464.39 829.346 1463.22 830.741 1461.65 831.781 cv
1456.58 835.146 1449.74 833.771 1446.38 828.708 cv
1445.07 826.75 1444.5 824.523 1444.56 822.337 cv
1444.45 821.538 1444.51 820.703 1444.84 819.897 cv
1444.86 819.846 li
1441.06 812.204 1442.24 798.042 1444.43 791.318 cv
1446.63 784.59 1448.88 784.416 1453.93 782.676 cv
1455.73 779.22 1458.34 776.087 1462.79 777.407 cv
1465.77 771.788 1470.29 770.94 1476.14 772.654 cv
1478.94 771.145 1482.38 766.437 1485.21 772.934 cv
1488.05 779.432 1483.16 794.305 1479.94 801.581 cv
1489.48 794.733 1507.09 799.631 1499.69 806.674 cv
1491.38 806.51 1486.43 812.276 1482.39 818.196 cv
1478.36 824.116 1473.31 823.693 1467.25 823.167 cv
1466.86 824.209 1466.47 825.257 1466.09 826.307 cv
cp
1 .788235 .709804 rgb
ef
1605.01 1342.7 mo
1585.96 1324.79 1576.14 1343.46 1577.54 1345.87 cv
1580.91 1378.41 li
1607.51 1367.43 li
1607.79 1361.53 li
1605.01 1342.7 li
cp
ef
1531.16 1022.89 mo
1528.64 1023.95 1491.08 1036.06 1491.08 1036.06 cv
1491.08 1036.06 1457.01 1161.56 1460.85 1195 cv
1464.45 1229.05 1464.98 1347.95 1464.98 1347.95 cv
1464.98 1347.95 1480.74 1351.95 1491.5 1349.36 cv
1491.5 1349.36 1512.34 1239.46 1512.62 1231.91 cv
1512.89 1224.36 1506.19 1213.43 1506.19 1213.43 cv
1506.19 1213.43 1565.07 1134.85 1567.65 1068.35 cv
1570.23 1001.86 1531.16 1022.89 1531.16 1022.89 cv
cp
1 .721569 .611765 rgb
ef
1519.39 1025.21 mo
1517.46 1027.15 1487.18 1052.51 1487.18 1052.51 cv
1487.18 1052.51 1502.65 1181.65 1518.75 1211.19 cv
1534.84 1241.39 1579.9 1351.38 1579.9 1351.38 cv
1579.9 1351.38 1596 1349.15 1605.01 1342.7 cv
1605.01 1342.7 1583.12 1233 1580.55 1225.9 cv
1577.97 1218.8 1567.67 1211.19 1567.67 1211.19 cv
1567.67 1211.19 1603.37 1111.83 1580.84 1049.23 cv
1558.31 986.639 1519.39 1025.21 1519.39 1025.21 cv
cp
1 .788235 .709804 rgb
ef
1492.2 1050.81 mo
1478.73 1063.37 li
1478.73 1063.37 1454.09 1146.78 1459.8 1184.03 cv
1459.8 1184.03 1543.64 1203.12 1576.98 1186.89 cv
1576.98 1186.89 1613.18 1109.54 1584.62 1068.75 cv
1553.16 1029.32 1492.2 1050.81 1492.2 1050.81 cv
cp
.239216 .243137 .364706 rgb
ef
1519.16 851.049 mo
1519.16 851.049 1536.62 838.362 1574.52 867.316 cv
1551.1 956.147 1617.61 1020.99 1594.84 1098.62 cv
1549.45 1105.69 1507.51 1078.75 1478.73 1063.37 cv
1507.33 996.269 1470.51 947.274 1475.74 919.704 cv
1497.57 887.467 1519.16 851.049 1519.16 851.049 cv
cp
.505882 .552941 .709804 rgb
ef
1525.2 862.188 mo
1525.2 862.188 1496.91 915.794 1494.43 926.22 cv
1492.44 938.135 1487.97 1024.01 1491.45 1041.38 cv
1478.05 1052.3 1454.72 1039.89 1454.72 1039.89 cv
1454.72 1039.89 1471.59 1005.64 1465.14 925.723 cv
1486.98 894.452 1519.16 851.049 1519.16 851.049 cv
1519.16 851.049 1528.18 845.806 1525.2 862.188 cv
cp
.239216 .243137 .364706 rgb
ef
1536.31 869.616 mo
1536.31 869.616 li
1542.43 869.616 1547.39 864.659 1547.39 858.54 cv
1547.39 829.714 li
1547.39 827.863 1545.89 826.361 1544.03 826.361 cv
1528.59 826.361 li
1526.74 826.361 1525.24 827.863 1525.24 829.714 cv
1525.24 858.54 li
1525.24 864.659 1530.19 869.616 1536.31 869.616 cv
cp
1 .788235 .709804 rgb
ef
1549.03 851.267 mo
1549.03 851.267 1544.07 886.015 1518.25 931.679 cv
1513.27 940.494 1539.6 1028.47 1538.6 1052.79 cv
1590.23 1078.11 1606.11 1070.17 1606.11 1070.17 cv
1606.11 1070.17 1581.79 961.958 1576.83 935.65 cv
1573 915.361 1604.62 873.106 1549.03 851.267 cv
cp
.239216 .243137 .364706 rgb
ef
1556.2 785.523 mo
1557.37 824.306 li
1557.79 838.229 1546.75 849.802 1532.85 850.009 cv
1532.85 850.009 li
1518.55 850.225 1507.01 838.338 1507.61 824.012 cv
1509.2 785.909 li
1556.2 785.523 li
cp
1 .788235 .709804 rgb
ef
1586.86 897.343 mo
1555.22 967.679 li
1534.87 941.622 li
1564.66 870.727 li
1567.61 865.85 1574.06 864.49 1578.73 867.768 cv
1578.73 867.768 li
1588.16 874.398 1591.57 886.805 1586.86 897.343 cv
cp
.917647 .933333 .976471 rgb
ef
1521.7 1390.95 mo
1521.7 1390.95 1518.06 1352.93 1577.54 1345.87 cv
1577.54 1345.87 1586.55 1365.13 1607.79 1361.53 cv
1611.31 1388.99 li
1521.7 1390.95 li
cp
.215686 .219608 .341176 rgb
ef
1492.65 1344.77 mo
1473.59 1326.86 1463.77 1345.53 1465.17 1347.94 cv
1468.54 1380.49 li
1495.15 1369.5 li
1495.42 1363.6 li
1492.65 1344.77 li
cp
1 .721569 .611765 rgb
ef
1409.33 1393.03 mo
1409.33 1393.03 1405.69 1355 1465.17 1347.94 cv
1465.17 1347.94 1474.19 1367.2 1495.42 1363.6 cv
1498.94 1391.06 li
1409.33 1393.03 li
cp
.215686 .219608 .341176 rgb
ef
1463.91 944.301 mo
1464.5 944.33 1465.07 944.472 1465.59 944.692 cv
1469.69 945.506 1473.52 948.405 1474.76 954.966 cv
1474.32 961.196 1470.68 964.879 1466.42 966.053 cv
1465.69 966.393 1464.88 966.576 1464.01 966.504 cv
1463.95 966.499 li
1457.76 972.372 1443.88 975.397 1436.81 975.268 cv
1429.73 975.139 1428.91 973.036 1425.77 968.716 cv
1421.94 968.008 1418.18 966.434 1418.13 961.787 cv
1411.89 960.587 1409.76 956.511 1409.68 950.412 cv
1407.42 948.177 1401.91 946.274 1407.29 941.656 cv
1412.67 937.038 1428.32 937.362 1436.22 938.306 cv
1426.88 931.188 1426.41 912.918 1435.3 917.923 cv
1437.58 925.917 1444.54 928.961 1451.38 931.09 cv
1458.23 933.213 1459.3 938.166 1460.57 944.112 cv
1461.68 944.187 1462.8 944.247 1463.91 944.301 cv
cp
1 .788235 .709804 rgb
ef
1463.05 941.816 mo
1551.23 934.847 li
1561.3 946.087 li
1555.22 967.679 li
1462.12 968.319 li
1462.12 968.319 1455.05 957.482 1463.05 941.816 cv
cp
.917647 .933333 .976471 rgb
ef
1516.88 769.748 mo
1516.88 769.748 1527.8 801.516 1569 816.905 cv
1594.81 794.072 1556.09 745.426 1516.88 769.748 cv
cp
.239216 .243137 .364706 rgb
ef
1533.26 780.669 mo
1516.88 769.748 li
1516.88 769.748 1499.01 783.151 1504.97 808.96 cv
1518.37 805.486 1531.77 790.099 1531.77 790.099 cv
1533.26 780.669 li
cp
ef
1559.56 1102.64 mo
1559.56 1089.58 li
1518.73 1089.58 li
1518.73 1161.03 li
1559.56 1161.03 li
1559.56 1144.1 li
1573.52 1144.1 li
1573.52 1102.64 li
1559.56 1102.64 li
cp
1568.12 1139.13 mo
1559.56 1139.13 li
1559.56 1108.04 li
1568.12 1108.04 li
1568.12 1139.13 li
1568.12 1139.13 li
cp
.917647 .933333 .976471 rgb
ef
1404.3 1132.83 mo
1420.47 1138.83 li
1371.97 1269.46 li
1355.8 1263.46 li
1404.3 1132.83 li
cp
.505882 .552941 .709804 rgb
ef
1427.94 1127.37 mo
1384.98 1127.37 li
1381.3 1127.37 1378.31 1130.36 1378.31 1134.04 cv
1378.31 1142.89 li
1378.31 1146.57 1381.3 1149.56 1384.98 1149.56 cv
1427.94 1149.56 li
1431.63 1149.56 1434.62 1146.57 1434.62 1142.89 cv
1434.62 1134.04 li
1434.62 1130.36 1431.63 1127.37 1427.94 1127.37 cv
cp
.317647 .337255 .588235 rgb
ef
1385.58 1155.19 mo
1425.72 1155.19 li
1425.72 1149.55 li
1385.58 1149.55 li
1385.58 1155.19 li
cp
.505882 .552941 .709804 rgb
ef
1174.74 1132.83 mo
1158.57 1138.83 li
1207.06 1269.46 li
1223.23 1263.46 li
1174.74 1132.83 li
cp
ef
1151.1 1127.37 mo
1194.05 1127.37 li
1197.74 1127.37 1200.73 1130.36 1200.73 1134.04 cv
1200.73 1142.89 li
1200.73 1146.57 1197.74 1149.56 1194.05 1149.56 cv
1151.1 1149.56 li
1147.41 1149.56 1144.42 1146.57 1144.42 1142.89 cv
1144.42 1134.04 li
1144.42 1130.36 1147.41 1127.37 1151.1 1127.37 cv
cp
.317647 .337255 .588235 rgb
ef
1153.32 1155.19 mo
1193.46 1155.19 li
1193.46 1149.55 li
1153.32 1149.55 li
1153.32 1155.19 li
cp
.505882 .552941 .709804 rgb
ef
1397.7 1395.42 mo
1181.33 1395.42 li
1177.65 1395.42 1174.66 1398.41 1174.66 1402.1 cv
1174.66 1410.94 li
1174.66 1414.62 1177.65 1417.61 1181.33 1417.61 cv
1397.7 1417.61 li
1401.39 1417.61 1404.38 1414.62 1404.38 1410.94 cv
1404.38 1402.1 li
1404.38 1398.41 1401.39 1395.42 1397.7 1395.42 cv
cp
ef
1350.58 1409.75 mo
1365.69 1409.75 li
1365.69 1272.84 li
1350.58 1272.84 li
1350.58 1409.75 li
cp
ef
1213.35 1410.47 mo
1228.46 1410.47 li
1228.46 1273.56 li
1213.35 1273.56 li
1213.35 1410.47 li
cp
ef
1380.03 1251.65 mo
1199 1251.65 li
1195.32 1251.65 1192.33 1254.64 1192.33 1258.33 cv
1192.33 1267.17 li
1192.33 1270.85 1195.32 1273.84 1199 1273.84 cv
1380.03 1273.84 li
1383.72 1273.84 1386.71 1270.85 1386.71 1267.17 cv
1386.71 1258.33 li
1386.71 1254.64 1383.72 1251.65 1380.03 1251.65 cv
cp
.317647 .337255 .588235 rgb
ef
1213.43 1280.68 mo
1365.6 1280.68 li
1365.6 1273.89 li
1213.43 1273.89 li
1213.43 1280.68 li
cp
.505882 .552941 .709804 rgb
ef
1302.77 911.138 mo
1302.77 911.138 1361.1 926.943 1336.27 1091.54 cv
1336.27 1091.54 1300.15 1056.42 1239.08 1084.44 cv
1239.08 1084.44 1231.28 940.956 1251.76 924.07 cv
1272.24 907.186 1302.77 911.138 1302.77 911.138 cv
cp
.239216 .243137 .364706 rgb
ef
1328.86 1023.8 mo
1358.29 1022.43 1391.06 1024.08 1420.55 1029.83 cv
1427.9 1031.26 1432.8 1038.29 1431.78 1045.71 cv
1431.74 1045.99 li
1430.62 1054.22 1422.8 1059.73 1414.66 1058.1 cv
1387.12 1052.59 1357.09 1049.1 1329.31 1049 cv
1320.75 1048.96 1314.7 1040.62 1317.51 1032.53 cv
1317.56 1032.38 1317.61 1032.24 1317.66 1032.1 cv
1319.39 1027.32 1323.79 1024.04 1328.86 1023.8 cv
cp
1 .721569 .611765 rgb
ef
1311.74 1013.82 mo
1397.11 1019.28 li
1397.67 1065.95 li
1302.88 1047.89 li
1311.74 1013.82 li
cp
.505882 .552941 .709804 rgb
ef
1226.85 1050.71 mo
1205.91 1071.43 1184.93 1096.67 1169.19 1122.26 cv
1165.26 1128.64 1167.12 1136.99 1173.27 1141.27 cv
1173.5 1141.44 li
1180.32 1146.18 1189.67 1144.16 1193.99 1137.07 cv
1208.58 1113.07 1226.34 1088.62 1245.08 1068.1 cv
1250.85 1061.77 1248.81 1051.68 1240.95 1048.26 cv
1240.81 1048.2 1240.67 1048.15 1240.53 1048.09 cv
1235.84 1046.12 1230.46 1047.13 1226.85 1050.71 cv
cp
1 .721569 .611765 rgb
ef
1117.08 1065.3 mo
1131.61 1090.93 1150.5 1117.76 1171.1 1139.64 cv
1176.23 1145.09 1184.78 1145.49 1190.52 1140.67 cv
1190.74 1140.48 li
1197.1 1135.14 1197.58 1125.59 1191.86 1119.57 cv
1172.51 1099.22 1153.54 1075.68 1138.63 1052.24 cv
1134.03 1045.02 1123.75 1044.36 1118.4 1051.05 cv
1118.31 1051.17 1118.21 1051.29 1118.12 1051.41 cv
1115 1055.42 1114.57 1060.88 1117.08 1065.3 cv
cp
ef
1132.52 1042.92 mo
1133.01 1043.39 1133.4 1043.94 1133.68 1044.53 cv
1134.93 1046.14 1135.86 1048.03 1136.22 1050.18 cv
1137.38 1057.13 1132.7 1063.71 1125.75 1064.87 cv
1123.06 1065.33 1120.44 1064.88 1118.15 1063.79 cv
1117.25 1063.53 1116.4 1063.07 1115.7 1062.35 cv
1115.65 1062.3 li
1105.77 1062.71 1091.33 1054.81 1085.24 1049.32 cv
1079.16 1043.83 1080.04 1041.37 1080.58 1035.21 cv
1077.77 1031.69 1075.68 1027.46 1079.18 1023.38 cv
1074.64 1017.59 1075.88 1012.41 1080.45 1007.04 cv
1080.18 1003.37 1076.81 997.526 1085.03 997.586 cv
1093.25 997.647 1106.69 1009.82 1112.87 1016.65 cv
1110.13 1003.34 1123.62 987.056 1127.59 998.18 cv
1123.49 1006.88 1127.26 1014.83 1131.63 1021.88 cv
1135.99 1028.93 1133.16 1034.07 1129.74 1040.21 cv
1130.66 1041.12 1131.58 1042.02 1132.52 1042.92 cv
cp
ef
1413.5 951.828 mo
1422.52 979.876 1429.47 1011.95 1431.62 1041.91 cv
1432.16 1049.38 1426.66 1055.94 1419.23 1056.9 cv
1418.94 1056.93 li
1410.71 1058 1403.34 1051.89 1402.79 1043.6 cv
1400.92 1015.58 1396.45 985.684 1389.3 958.842 cv
1387.1 950.563 1393.58 942.551 1402.12 943.149 cv
1402.27 943.16 1402.42 943.173 1402.57 943.186 cv
1407.63 943.604 1411.95 946.989 1413.5 951.828 cv
cp
ef
1386.57 948.026 mo
1386.59 948.714 1386.73 949.37 1386.97 949.979 cv
1387.31 951.986 1388.08 953.949 1389.42 955.671 cv
1393.74 961.235 1401.75 962.238 1407.31 957.919 cv
1409.47 956.247 1410.92 954.014 1411.66 951.59 cv
1412.08 950.755 1412.32 949.813 1412.26 948.81 cv
1412.26 948.745 li
1419.26 941.752 1423.21 925.77 1423.3 917.575 cv
1423.38 909.385 1420.97 908.363 1416.08 904.595 cv
1415.39 900.138 1413.68 895.74 1408.31 895.551 cv
1407.13 888.285 1402.48 885.693 1395.42 885.421 cv
1392.92 882.731 1390.9 876.299 1385.37 882.39 cv
1379.86 888.48 1379.71 906.609 1380.55 915.784 cv
1372.62 904.756 1351.49 903.656 1356.99 914.109 cv
1366.16 916.984 1369.46 925.14 1371.7 933.125 cv
1373.93 941.111 1379.63 942.504 1386.46 944.15 cv
1386.51 945.444 1386.55 946.736 1386.57 948.026 cv
cp
ef
1231.09 1031.35 mo
1177.3 1097.86 li
1211.26 1129.88 li
1262.16 1047.9 li
1231.09 1031.35 li
cp
.505882 .552941 .709804 rgb
ef
1261.04 1269.13 mo
1238.51 1189.21 li
1243.15 1157.65 li
1245.38 1142.45 1241.65 1126.98 1232.74 1114.47 cv
1232.74 1114.47 li
1223.92 1102.08 1221.93 1086.09 1227.45 1071.93 cv
1232.4 1059.22 li
1231.09 1031.35 li
1288.6 1001.16 li
1288.64 1001.24 li
1288.64 1001.07 li
1344.78 1015.63 li
1344.84 1059.13 li
1349.79 1071.84 li
1355.31 1086 1353.32 1102 1344.5 1114.38 cv
1344.5 1114.38 li
1335.59 1126.89 1331.86 1142.36 1334.1 1157.56 cv
1338.73 1189.12 li
1345.15 1274.25 li
1288.64 1273.73 li
1288.64 1273.05 li
1288.6 1273.82 li
1261.04 1269.13 li
cp
1 1 1 rgb
ef
1287.11 1037.28 mo
1287.11 1037.28 li
1294.2 1037.28 1299.95 1031.53 1299.95 1024.44 cv
1299.95 992.379 li
1299.95 989.55 1297.66 987.261 1294.83 987.261 cv
1279.38 987.261 li
1276.56 987.261 1274.27 989.55 1274.27 992.379 cv
1274.27 1024.44 li
1274.27 1031.53 1280.02 1037.28 1287.11 1037.28 cv
cp
1 .788235 .709804 rgb
ef
1314.8 943.549 mo
1316.15 988.401 li
1316.64 1004.51 1303.84 1017.89 1287.73 1018.13 cv
1287.73 1018.13 li
1271.15 1018.38 1257.77 1004.63 1258.46 988.062 cv
1260.31 943.997 li
1314.8 943.549 li
cp
ef
1325.19 978.913 mo
1325.19 978.913 1326.09 994.956 1325.19 978.913 cv
1324.1 959.534 1298.57 950.451 1279.71 950.451 cv
1254.17 950.996 1245.77 992.998 1239.17 953.995 cv
1237.14 942.032 1241.88 939.216 1254.92 919.66 cv
1263.85 906.263 1290.65 901.497 1310.6 918.169 cv
1330.55 934.847 1331.14 958.071 1325.19 978.913 cv
cp
.239216 .243137 .364706 rgb
ef
1330.57 1361.57 mo
1331.11 1362.88 1354.09 1395.41 1354.09 1395.41 cv
1358.1 1426.59 li
1326.8 1416.22 li
1326.46 1398.72 li
1330.57 1361.57 li
cp
1 .788235 .709804 rgb
ef
1427.56 1442.78 mo
1427.56 1442.78 1422.63 1398.63 1354.09 1395.41 cv
1354.09 1395.41 1348.59 1412.88 1326.8 1416.22 cv
1325 1447.81 li
1427.56 1442.78 li
cp
.247059 .254902 .403922 rgb
ef
1326.84 1219.24 mo
1313.56 1224.92 1304.16 1231.14 1304.5 1245.59 cv
1305.29 1279.75 1326.92 1395.92 1326.92 1395.92 cv
1340.58 1398.94 1354.09 1395.41 1354.09 1395.41 cv
1354.09 1395.41 1359.55 1310.78 1361.43 1251.04 cv
1362 1232.85 1348.57 1212.67 1326.84 1219.24 cv
1326.84 1219.24 li
cp
1 .788235 .709804 rgb
ef
1279.58 1364.81 mo
1280.12 1366.12 1303.1 1398.64 1303.1 1398.64 cv
1307.11 1429.82 li
1275.82 1419.45 li
1275.47 1401.95 li
1279.58 1364.81 li
cp
ef
1376.58 1446.01 mo
1376.58 1446.01 1371.65 1401.87 1303.1 1398.64 cv
1303.1 1398.64 1297.6 1416.11 1275.82 1419.45 cv
1274.01 1451.04 li
1376.58 1446.01 li
cp
.239216 .243137 .364706 rgb
ef
1275.86 1222.48 mo
1262.57 1228.16 1253.17 1234.38 1253.51 1248.82 cv
1254.31 1282.99 1275.93 1399.16 1275.93 1399.16 cv
1289.59 1402.18 1303.1 1398.64 1303.1 1398.64 cv
1303.1 1398.64 1308.56 1314.02 1310.44 1254.28 cv
1311.02 1236.09 1297.59 1215.91 1275.86 1222.48 cv
1275.86 1222.48 li
cp
1 .788235 .709804 rgb
ef
1239.46 1195.25 mo
1335.9 1195.25 li
1350.07 1195.25 1361.56 1206.74 1361.56 1220.92 cv
1361.56 1254.93 li
1361.56 1269.11 1350.07 1280.6 1335.9 1280.6 cv
1273.48 1280.6 li
1240.52 1280.6 1213.8 1253.88 1213.8 1220.92 cv
1213.8 1220.92 li
1213.8 1206.74 1225.29 1195.25 1239.46 1195.25 cv
cp
.247059 .254902 .403922 rgb
ef
1361.64 1231.63 mo
1360.48 1294.33 li
1253.76 1294.22 li
1214.26 1227.1 li
1309.23 1217.96 li
1361.64 1231.63 li
cp
ef
1328.48 987.532 mo
1328.48 987.532 1329.38 1003.58 1328.48 987.532 cv
1327.39 968.152 1301.86 959.07 1283 959.07 cv
1257.46 959.614 1249.06 1001.62 1242.46 962.615 cv
1240.44 950.651 1245.17 947.832 1258.21 928.279 cv
1267.14 914.879 1293.94 910.115 1313.89 926.79 cv
1333.84 943.464 1334.44 966.688 1328.48 987.532 cv
cp
.239216 .243137 .364706 rgb
ef
709.321 1102.54 mo
709.321 1143.99 li
723.279 1143.99 li
723.279 1160.92 li
764.11 1160.92 li
764.11 1089.47 li
723.279 1089.47 li
723.279 1102.54 li
709.321 1102.54 li
cp
714.72 1107.94 mo
723.279 1107.94 li
723.279 1139.02 li
714.72 1139.02 li
714.72 1107.94 li
714.72 1107.94 li
cp
.952941 .968627 1 rgb
ef
1101.07 1448.48 mo
1133.49 1448.48 li
1133.49 1194.79 li
1101.07 1194.79 li
1101.07 1448.48 li
cp
.317647 .337255 .588235 rgb
ef
1218.97 1463.25 mo
1015.55 1463.25 li
1015.55 1455.08 li
1015.55 1444.49 1024.14 1435.91 1034.73 1435.91 cv
1199.78 1435.91 li
1210.38 1435.91 1218.97 1444.49 1218.97 1455.08 cv
1218.97 1463.25 li
cp
.505882 .552941 .709804 rgb
ef
1648.45 1196.6 mo
586.069 1196.6 li
573.063 1196.6 562.522 1186.06 562.522 1173.05 cv
562.522 1161.03 li
1671.99 1161.03 li
1671.99 1173.05 li
1671.99 1186.06 1661.45 1196.6 1648.45 1196.6 cv
cp
.317647 .337255 .588235 rgb
ef
1609.73 1196.6 mo
624.781 1196.6 li
624.781 1196.6 li
624.781 1206.73 632.985 1214.93 643.111 1214.93 cv
1609.73 1214.93 li
1609.73 1196.6 li
cp
.505882 .552941 .709804 rgb
ef
565.385 1160.97 mo
700.904 1160.97 li
700.904 1154.58 li
565.385 1154.58 li
565.385 1160.97 li
cp
ef
700.905 1160.97 mo
759.927 1038.76 li
756.466 1037.2 li
695.21 1158.08 li
700.905 1160.97 li
cp
ef
1520.64 1161.03 mo
1656.43 1161.03 li
1656.43 1154.57 li
1520.64 1154.57 li
1520.64 1161.03 li
cp
ef
1520.64 1161.03 mo
1461.5 1037.3 li
1464.97 1035.71 li
1526.35 1158.11 li
1520.64 1161.03 li
cp
ef
1119.33 1102.62 mo
1119.33 1089.55 li
1078.5 1089.55 li
1078.5 1161.01 li
1119.33 1161.01 li
1119.33 1144.07 li
1133.29 1144.07 li
1133.29 1102.62 li
1119.33 1102.62 li
cp
1127.89 1139.11 mo
1119.33 1139.11 li
1119.33 1108.02 li
1127.89 1108.02 li
1127.89 1139.11 li
1127.89 1139.11 li
cp
.996078 .8 0 rgb
ef
1168.63 1161.01 mo
1323.46 1161.01 li
1323.46 1056.46 li
1168.63 1056.46 li
1168.63 1161.01 li
cp
.917647 .933333 .976471 rgb
ef
1257 1108.74 mo
1257 1114.79 1252.1 1119.69 1246.04 1119.69 cv
1240 1119.69 1235.09 1114.79 1235.09 1108.74 cv
1235.09 1102.68 1240 1097.78 1246.04 1097.78 cv
1252.1 1097.78 1257 1102.68 1257 1108.74 cv
cp
1 1 1 rgb
ef
1763.75 940.686 mo
1764.29 941.548 1768.32 975.172 1779.07 983.506 cv
1786.06 967.124 1773.16 936.374 1773.16 936.374 cv
1763.75 940.686 li
cp
.239216 .243137 .364706 rgb
ef
1760.88 1112.1 mo
1733.56 1093.82 1705.27 1070.61 1682.64 1045.92 cv
1676.99 1039.76 1677.27 1030.24 1683.12 1024.27 cv
1683.34 1024.04 li
1689.82 1017.43 1700.5 1017.69 1706.72 1024.54 cv
1727.76 1047.72 1752.37 1070.75 1777.22 1089.27 cv
1784.88 1094.98 1784.76 1106.45 1776.85 1111.82 cv
1776.71 1111.92 1776.58 1112.01 1776.44 1112.1 cv
1771.71 1115.23 1765.59 1115.25 1760.88 1112.1 cv
cp
1 .721569 .611765 rgb
ef
1758.87 1108.99 mo
1765.62 1114.85 li
1769.95 1118.6 1776.32 1117.89 1779.83 1113.26 cv
1834.87 1040.69 li
1838.38 1036.05 1837.72 1029.25 1833.39 1025.49 cv
1826.63 1019.64 li
1822.3 1015.88 1815.94 1016.59 1812.42 1021.23 cv
1757.38 1093.8 li
1753.87 1098.43 1754.54 1105.23 1758.87 1108.99 cv
cp
ef
1808.73 999.012 mo
1773.92 1061.58 li
1808.98 1083.98 li
1847.6 1031.11 li
1849.59 1015.76 1842.95 1000.59 1830.65 992.384 cv
1830.65 992.384 li
1822.94 987.25 1812.78 990.325 1808.73 999.012 cv
cp
.505882 .552941 .709804 rgb
ef
1664.4 977.934 mo
1666.57 977.88 1669.87 978.872 1677.11 977.602 cv
1678.69 977.045 1680.58 976.578 1682.65 976.477 cv
1677.74 969.071 1685.71 964.154 1685.71 964.154 cv
1685.7 966.955 1690.75 971.529 1692.94 973.381 cv
1693.77 973.536 1694.39 973.977 1694.62 974.824 cv
1695.55 978.203 1695.4 978.836 1695.4 978.836 cv
1695.4 978.836 1700.79 984.458 1701.03 989.692 cv
1703.08 1003.53 1702.98 1008.31 1710.03 1029.74 cv
1710.34 1034.74 li
1710.69 1040.36 1706.98 1046.67 1700.93 1049.89 cv
1696.57 1052.21 1695.16 1050.69 1695.16 1050.69 cv
1679.2 1051.23 1670.14 1030 1680.06 1012.03 cv
1686.96 999.53 1670.62 989.094 1665.33 987.092 cv
1661.29 985.564 1657.84 984.107 1656.72 981.388 cv
1655.94 973.593 1660.96 978.024 1664.4 977.934 cv
cp
1 .721569 .611765 rgb
ef
1682.43 1034.17 mo
1682.43 1034.17 1669.58 1031.23 1668 1021.77 cv
1663.17 1011.3 1658.24 1008.87 1658.07 1007.79 cv
1657.91 1006.7 1663.7 1001.28 1669.1 1002.65 cv
1674.51 1004.02 1680.09 1012.49 1680.81 1016.06 cv
1681.54 1019.63 1696.15 1017.67 1682.43 1034.17 cv
cp
ef
1712.71 1339.02 mo
1712.18 1340.32 1689.5 1372.32 1689.5 1372.32 cv
1685.59 1403.43 li
1716.52 1393.84 li
1716.83 1376.32 li
1712.71 1339.02 li
cp
ef
1616.93 1417.91 mo
1616.93 1417.91 1621.74 1373.83 1689.5 1372.32 cv
1689.5 1372.32 1694.98 1389.94 1716.52 1393.84 cv
1718.36 1425.51 li
1616.93 1417.91 li
cp
.215686 .211765 .337255 rgb
ef
1741.89 1207.31 mo
1743.74 1210.64 1745.41 1272.02 1743.41 1279.65 cv
1731.74 1324 1722.92 1344.16 1716.9 1375.46 cv
1706.09 1384.52 1688.63 1371.83 1688.63 1371.83 cv
1688.63 1371.83 1688.83 1280.45 1686.87 1220.58 cv
1686.27 1202.36 1704.8 1190.32 1721.59 1198.01 cv
1741.89 1207.31 li
cp
ef
1701.51 1197.2 mo
1734.79 1176.29 1881.45 1155.82 1881.45 1155.82 cv
1881.45 1155.82 1918.32 1064.13 1934.32 1172.42 cv
1934.32 1172.42 1947.23 1240.2 1882.06 1263.24 cv
1832.32 1280.84 1768.36 1258.25 1732.99 1240.69 cv
1716.98 1232.74 1705.27 1216.51 1701.46 1197.23 cv
1701.46 1197.23 li
1701.48 1197.22 1701.49 1197.22 1701.51 1197.2 cv
cp
ef
1698.71 1229.89 mo
1734.19 1208.64 1889.95 1186.79 1889.95 1186.79 cv
1889.95 1186.79 1929.82 1094.64 1945.91 1202.92 cv
1945.91 1202.92 1959.06 1270.66 1889.73 1294.34 cv
1836.82 1312.41 1769.15 1290.39 1731.76 1273.13 cv
1714.84 1265.32 1702.54 1249.19 1698.66 1229.92 cv
1698.66 1229.92 li
1698.68 1229.91 1698.7 1229.9 1698.71 1229.89 cv
cp
.239216 .243137 .364706 rgb
ef
1634.84 1348.63 mo
1633.57 1349.26 1594.96 1358.14 1594.96 1358.14 cv
1571.11 1379.58 li
1600.9 1393.96 li
1612.9 1380.56 li
1634.84 1348.63 li
cp
1 .788235 .709804 rgb
ef
1509.51 1342.46 mo
1509.51 1342.46 1542.75 1311.55 1594.94 1358.25 cv
1594.94 1358.25 1587.22 1375.83 1600.88 1394.08 cv
1580.98 1420.02 li
1509.51 1342.46 li
cp
.239216 .243137 .364706 rgb
ef
1731.96 1242.63 mo
1739.2 1259.84 1736.85 1280.07 1725.5 1294.53 cv
1719.79 1301.8 1712.07 1309.61 1701.64 1317.09 cv
1672.25 1338.18 1650.5 1346.11 1613.25 1380.44 cv
1599.41 1381.39 1594.96 1358.14 1594.96 1358.14 cv
1594.96 1358.14 1651.83 1283.63 1690.57 1235.66 cv
1702.37 1221.05 1724.44 1224.78 1731.96 1242.63 cv
1731.96 1242.63 li
cp
ef
1831.96 1007.71 mo
1836.23 1002.66 li
1838.98 999.416 1838.75 994.409 1835.71 991.471 cv
1810.61 967.168 li
1796.39 983.957 li
1821.49 1008.26 li
1824.52 1011.2 1829.21 1010.95 1831.96 1007.71 cv
cp
1 .788235 .709804 rgb
ef
1809.25 920.21 mo
1820.37 957.966 li
1824.37 971.523 1817.2 985.948 1804.47 990.012 cv
1804.46 990.012 li
1791.02 1013.43 1777.65 985.73 1774.49 971.495 cv
1766.09 933.641 li
1809.25 920.21 li
cp
ef
1827.04 940.813 mo
1827.04 940.813 1822.19 963.019 1817.88 949.616 cv
1812.67 933.424 1813.12 926.729 1783.49 939.216 cv
1776.43 942.189 1754.38 957.551 1742.51 931.928 cv
1730.47 905.926 1752 927.063 1757.98 907.341 cv
1762.07 893.824 1782.28 883.359 1801.85 892.738 cv
1821.43 902.114 1827.11 921.69 1827.04 940.813 cv
cp
.239216 .243137 .364706 rgb
ef
1817.16 972.888 mo
1817.16 972.888 1860.81 978.193 1911.86 1073.09 cv
1953.08 1169.06 1956.84 1200.08 1947.69 1223.54 cv
1910.76 1248.98 1872.41 1211.49 1850.59 1179.06 cv
1812.01 1150.25 1855.3 1121.88 1803.9 1005.51 cv
1817.16 972.888 li
cp
.917647 .933333 .976471 rgb
ef
1934.38 1133.64 mo
1951.37 1138.51 li
1956.06 1139.85 1960.89 1136.87 1962.15 1131.85 cv
1977.45 1070.77 li
1978.71 1065.75 1975.92 1060.59 1971.22 1059.24 cv
1954.24 1054.38 li
1934.38 1133.64 li
cp
.505882 .552941 .709804 rgb
ef
1930.95 1152.17 mo
1941.11 1155.08 li
1945.34 1156.29 1949.7 1153.61 1950.83 1149.08 cv
1974.89 1053.06 li
1976.02 1048.53 1973.51 1043.88 1969.27 1042.66 cv
1959.11 1039.75 li
1954.88 1038.54 1950.53 1041.23 1949.39 1045.75 cv
1925.34 1141.78 li
1924.2 1146.31 1926.72 1150.96 1930.95 1152.17 cv
cp
.317647 .337255 .588235 rgb
ef
1986.28 1123.92 mo
1962.59 1116.49 li
1971.01 1085.8 li
1994.71 1093.23 li
1986.28 1123.92 li
cp
.505882 .552941 .709804 rgb
ef
1935.09 1292.49 mo
1925.98 1289.63 li
1975.29 1109.89 li
1984.4 1112.75 li
1935.09 1292.49 li
cp
ef
1851.16 1430.17 mo
1831.46 1440.54 li
1761.79 1289.13 li
1781.49 1278.77 li
1851.16 1430.17 li
cp
ef
1930.13 1430.17 mo
1910.43 1440.54 li
1840.76 1289.13 li
1860.46 1278.77 li
1930.13 1430.17 li
cp
ef
1787.06 1422.09 mo
1959.37 1422.09 li
1963.06 1422.09 1966.05 1425.08 1966.05 1428.76 cv
1966.05 1438.18 li
1966.05 1441.86 1963.06 1444.85 1959.37 1444.85 cv
1787.06 1444.85 li
1783.37 1444.85 1780.39 1441.86 1780.39 1438.18 cv
1780.39 1428.76 li
1780.39 1425.08 1783.37 1422.09 1787.06 1422.09 cv
cp
ef
1810.19 1291.96 mo
1824.48 1283.05 li
1757.16 1159.59 li
1742.87 1168.5 li
1810.19 1291.96 li
cp
.317647 .337255 .588235 rgb
ef
1744.43 1147.17 mo
1883.94 1147.17 li
1887.63 1147.17 1890.61 1150.15 1890.61 1153.84 cv
1890.61 1163.25 li
1890.61 1166.94 1887.63 1169.92 1883.94 1169.92 cv
1744.43 1169.92 li
1740.74 1169.92 1737.75 1166.94 1737.75 1163.25 cv
1737.75 1153.84 li
1737.75 1150.15 1740.74 1147.17 1744.43 1147.17 cv
cp
ef
1758.92 1274.63 mo
1932.02 1274.63 li
1935.71 1274.63 1938.69 1277.62 1938.69 1281.3 cv
1938.69 1290.72 li
1938.69 1294.4 1935.71 1297.39 1932.02 1297.39 cv
1758.92 1297.39 li
1755.23 1297.39 1752.24 1294.4 1752.24 1290.72 cv
1752.24 1281.3 li
1752.24 1277.62 1755.23 1274.63 1758.92 1274.63 cv
cp
ef
1769.78 1304.41 mo
1915.75 1304.41 li
1915.75 1297.44 li
1769.78 1297.44 li
1769.78 1304.41 li
cp
.505882 .552941 .709804 rgb
ef
1749.46 1175.7 mo
1858.45 1175.7 li
1858.45 1169.92 li
1749.46 1169.92 li
1749.46 1175.7 li
cp
.317647 .337255 .588235 rgb
ef
1732.73 929.046 mo
1733.28 929.617 1733.7 930.278 1734.02 930.983 cv
1737.32 935.578 1738.55 942.081 1734.16 950.034 cv
1728.41 956.106 1721.72 956.604 1716.59 953.936 cv
1715.58 953.622 1714.64 953.07 1713.86 952.201 cv
1713.81 952.149 li
1702.77 952.59 1686.7 943.054 1679.94 936.46 cv
1673.17 929.863 1674.17 926.923 1674.81 919.563 cv
1671.69 915.333 1669.38 910.264 1673.31 905.396 cv
1668.27 898.447 1669.68 892.263 1674.82 885.856 cv
1674.53 881.466 1670.8 874.46 1679.97 874.577 cv
1689.15 874.693 1704.08 889.325 1710.94 897.524 cv
1707.95 881.596 1723.1 862.183 1727.47 875.508 cv
1722.85 885.893 1727.01 895.419 1731.84 903.877 cv
1736.68 912.336 1733.49 918.465 1729.64 925.798 cv
1730.66 926.892 1731.69 927.974 1732.73 929.046 cv
cp
1 .788235 .709804 rgb
ef
1829.55 1116.68 mo
1829.55 1116.68 1903.23 1124.16 1930.28 1104.71 cv
1933.55 1060.33 1876.18 997 1838.87 989.021 cv
1838.87 989.021 1799.7 989.519 1803.9 1006.97 cv
1813.22 1033.9 li
1851.46 1009.96 li
1851.46 1009.96 1872.92 1027.92 1867.79 1057.83 cv
1853.33 1080.27 1823.95 1039.38 1823.95 1039.38 cv
1816.49 1040.88 li
1829.55 1116.68 li
cp
.215686 .211765 .337255 rgb
ef
1732.84 928.325 mo
1732.84 919.715 1739.37 912.734 1747.42 912.734 cv
1748.12 912.734 1748.79 912.854 1749.47 912.955 cv
1749.53 906.338 1753.34 900.695 1758.75 898.336 cv
1759.79 889.088 1767.14 881.915 1776.07 881.915 cv
1783.16 881.915 1789.24 886.427 1791.98 892.901 cv
1793.6 892.359 1795.31 892.066 1797.1 892.066 cv
1799.19 892.066 1801.18 892.486 1803.04 893.221 cv
1804.78 892.281 1806.72 891.703 1808.8 891.703 cv
1815.37 891.703 1820.73 896.979 1821.52 903.778 cv
1823.25 903.014 1825.13 902.648 1827.11 902.584 cv
1830.67 902.464 1835.51 912.534 1835.51 921.144 cv
1835.51 929.754 1828.52 934.65 1827.11 933.763 cv
1824.65 932.221 1821.63 932.855 1819.38 931.344 cv
1817.44 936.579 1812.69 940.292 1807.1 940.292 cv
1802.4 940.292 1798.3 937.649 1795.96 933.698 cv
1792.93 936.869 1788.79 938.841 1784.21 938.841 cv
1782.96 938.841 1781.76 938.672 1780.58 938.395 cv
1778.33 943.362 1773.62 946.819 1768.11 946.819 cv
1766.86 946.819 1765.67 946.585 1764.53 946.256 cv
1762.04 949.664 1758.21 951.893 1753.87 951.893 cv
1748.01 951.893 1743.07 947.907 1741.17 942.355 cv
1736.26 939.849 1732.84 934.533 1732.84 928.325 cv
cp
.239216 .243137 .364706 rgb
ef
1772.38 973.73 mo
1779.5 1005.47 1794.95 1010.03 1794.95 1010.03 cv
1804.71 1006.34 1816.31 999.935 1822.73 984.173 cv
1829.15 968.415 1824.64 941.119 1824.64 941.119 cv
1816.3 943.077 li
1817.12 956.773 1803.49 977.208 1803.49 977.208 cv
1798.61 962.861 li
1792.31 968.947 1772.38 973.73 1772.38 973.73 cv
cp
1780.24 981.735 mo
1785 981.735 1795.78 974.867 1795.78 974.867 cv
1799.31 986.169 1790.81 993.261 1787.7 991.933 cv
1784.59 990.6 1780.24 981.735 1780.24 981.735 cv
1780.24 981.735 li
cp
ef
1764.63 1026.63 mo
1757.88 993.67 1747.06 957.909 1732.93 926.993 cv
1729.41 919.284 1720.78 915.958 1713.38 919.282 cv
1713.1 919.411 li
1704.9 923.096 1701.37 933.388 1705.32 941.907 cv
1718.66 970.736 1730.61 1002.91 1738.44 1033.61 cv
1740.85 1043.08 1751.16 1047.29 1758.75 1041.77 cv
1758.88 1041.68 1759.02 1041.58 1759.15 1041.48 cv
1763.62 1038.15 1765.79 1032.32 1764.63 1026.63 cv
cp
1 .788235 .709804 rgb
ef
1739 1036.41 mo
1737.09 1027.35 li
1735.86 1021.53 1739.28 1015.74 1744.73 1014.43 cv
1829.97 993.903 li
1835.42 992.595 1840.83 996.25 1842.05 1002.07 cv
1843.96 1011.14 li
1845.19 1016.95 1841.77 1022.74 1836.32 1024.05 cv
1751.08 1044.58 li
1745.63 1045.89 1740.22 1042.23 1739 1036.41 cv
cp
ef
1860.63 1039.02 mo
1791.74 1049.52 li
1782.97 1002.22 li
1839.5 991.619 li
1853.96 992.778 1866.43 1002.92 1871.32 1017.51 cv
1871.32 1017.51 li
1874.39 1026.65 1869.43 1036.62 1860.63 1039.02 cv
cp
.505882 .552941 .709804 rgb
ef
510.415 911.967 mo
510.415 911.967 463.781 875.025 438.682 888.41 cv
382.169 918.548 381.464 977.221 382.876 1005.49 cv
410.006 1014.79 487.494 1026.7 487.494 1026.7 cv
505.636 965.239 510.415 911.967 510.415 911.967 cv
cp
.239216 .243137 .364706 rgb
ef
530.627 1324.58 mo
530.899 1325.89 547.062 1360.13 547.062 1360.13 cv
544.88 1389.65 li
516.22 1374.38 li
519.319 1358.15 li
530.627 1324.58 li
cp
1 .721569 .611765 rgb
ef
609.817 1417.27 mo
609.817 1417.27 613.639 1375.59 547.062 1360.13 cv
547.062 1360.13 538.237 1375.26 516.22 1374.38 cv
508.26 1403.23 li
609.817 1417.27 li
cp
.505882 .552941 .709804 rgb
ef
527.406 1196.97 mo
524.933 1199.66 503.834 1257.34 505.584 1264.62 cv
520.175 1325.23 516.22 1374.38 516.22 1374.38 cv
529.024 1379.66 548.015 1359.86 548.015 1359.86 cv
548.015 1359.86 565.564 1275.49 579.12 1220.65 cv
583.25 1203.95 567.301 1189 549.236 1192.61 cv
527.406 1196.97 li
cp
1 .721569 .611765 rgb
ef
571.014 1197.97 mo
540.2 1174.19 395.912 1136.48 395.912 1136.48 cv
395.912 1136.48 369.871 1046.03 341.051 1145.33 cv
341.051 1145.33 320.114 1207.1 382.579 1236.91 cv
430.254 1259.66 496.914 1246.62 534.376 1234.67 cv
551.334 1229.26 564.97 1215.56 571.061 1198 cv
571.061 1198 li
571.046 1197.99 571.029 1197.98 571.014 1197.97 cv
cp
.215686 .211765 .337255 rgb
ef
455.237 1116.32 mo
484.081 1129.75 517.515 1141.52 549.34 1147.86 cv
557.274 1149.45 565.04 1144.43 567.07 1136.6 cv
567.148 1136.3 li
569.393 1127.62 563.837 1118.9 555.034 1117.19 cv
525.256 1111.42 493.817 1102.6 466.011 1091.32 cv
457.434 1087.85 447.975 1093.71 447.469 1102.95 cv
447.461 1103.11 447.454 1103.27 447.446 1103.44 cv
447.212 1108.92 450.259 1114 455.237 1116.32 cv
cp
1 .721569 .611765 rgb
ef
469.896 1109.4 mo
459.008 1113.44 li
454.47 1115.12 449.429 1112.81 447.744 1108.27 cv
416.118 1022.98 li
414.433 1018.44 416.748 1013.4 421.286 1011.72 cv
432.176 1007.68 li
436.714 1006 441.756 1008.31 443.44 1012.85 cv
475.065 1098.14 li
476.749 1102.68 474.433 1107.72 469.896 1109.4 cv
cp
ef
454.174 995.534 mo
463.499 1063.67 li
396.202 1070.17 li
407.349 1011.65 li
410.084 997.287 421.013 985.881 435.244 982.533 cv
435.244 982.533 li
444.153 980.436 452.932 986.464 454.174 995.534 cv
cp
ef
614.907 1128.83 mo
613.87 1127.01 611.396 1124.78 608.822 1118.14 cv
608.495 1116.56 607.938 1114.76 606.983 1112.99 cv
615.592 1113.35 615.685 1104.28 615.685 1104.28 cv
613.362 1105.69 607.038 1103.8 604.403 1102.92 cv
603.864 1102.32 603.185 1102.02 602.366 1102.26 cv
599.099 1103.19 598.647 1103.63 598.647 1103.63 cv
598.647 1103.63 591.278 1101.98 586.815 1104.42 cv
574.305 1109.67 570.381 1112.14 549.061 1117.06 cv
544.75 1119.32 li
539.907 1121.85 536.525 1128.08 536.884 1134.71 cv
537.14 1139.49 539.108 1139.89 539.108 1139.89 cv
546.654 1153.38 568.808 1150.22 578.767 1132.98 cv
585.688 1121 602.531 1129.29 606.841 1132.66 cv
610.131 1135.24 613.067 1137.36 615.885 1136.92 cv
622.746 1133.66 616.554 1131.73 614.907 1128.83 cv
cp
ef
559.198 1142.13 mo
559.198 1142.13 568.069 1151.3 576.711 1147.85 cv
587.819 1146.6 592.307 1149.46 593.293 1149.05 cv
594.276 1148.65 595.878 1141.14 592.037 1137.35 cv
588.198 1133.56 578.371 1133.19 575.043 1134.38 cv
571.717 1135.57 566.031 1122.5 559.198 1142.13 cv
cp
ef
616.059 1349.18 mo
617.21 1350.01 653.809 1365.71 653.809 1365.71 cv
673.531 1390.18 li
641.438 1397.72 li
631.989 1382.99 li
616.059 1349.18 li
cp
1 .788235 .709804 rgb
ef
741.206 1367.65 mo
741.206 1367.65 713.914 1332.61 653.809 1365.71 cv
653.809 1365.71 658.256 1383.48 641.438 1397.72 cv
656.425 1425.59 li
741.206 1367.65 li
cp
.505882 .552941 .709804 rgb
ef
569.946 1228.9 mo
536.972 1204.53 383.74 1164.38 383.74 1164.38 cv
383.74 1164.38 354.761 1073.12 325.844 1172.39 cv
325.844 1172.39 304.672 1234.1 371.225 1265.03 cv
422.017 1288.63 492.324 1276.59 531.768 1265.18 cv
549.623 1260.01 563.83 1246.47 569.996 1228.94 cv
569.996 1228.94 li
569.98 1228.93 569.961 1228.91 569.946 1228.9 cv
cp
.239216 .243137 .364706 rgb
ef
521.523 1251.98 mo
521.647 1255.75 521.86 1292.96 554.342 1319.46 cv
619.803 1372.86 641.438 1397.72 641.438 1397.72 cv
654.657 1393.15 654.32 1364.86 654.32 1364.86 cv
654.32 1364.86 606.278 1287.25 576.633 1235.35 cv
567.607 1219.55 545.085 1218.72 534.417 1233.78 cv
521.523 1251.98 li
cp
1 .788235 .709804 rgb
ef
434.195 1008.6 mo
428.145 1002.61 li
425.624 1000.12 425.603 996.048 428.097 993.524 cv
452.852 968.513 li
468.037 983.542 li
443.282 1008.55 li
440.787 1011.07 436.719 1011.09 434.195 1008.6 cv
cp
ef
443.969 977.15 mo
443.969 977.15 400.285 984.551 353.773 1076.72 cv
317.219 1169.36 315.031 1198.77 325.446 1220.36 cv
363.938 1242.29 400.63 1204.87 420.923 1173.13 cv
445.449 1153.93 434.46 1136.84 436.965 1095.57 cv
496.722 1089.53 443.282 1045.75 459 1007.15 cv
443.969 977.15 li
cp
1 1 1 rgb
ef
521.069 1044.33 mo
543.547 1021.8 566.028 994.396 582.856 966.652 cv
587.052 959.731 584.992 950.718 578.319 946.137 cv
578.062 945.96 li
570.67 940.886 560.585 943.134 555.97 950.824 cv
540.371 976.839 521.354 1003.38 501.262 1025.66 cv
495.065 1032.54 497.344 1043.43 505.854 1047.06 cv
506.007 1047.13 506.155 1047.19 506.305 1047.25 cv
511.382 1049.34 517.193 1048.21 521.069 1044.33 cv
cp
1 .788235 .709804 rgb
ef
519.615 1033.99 mo
519.615 1033.99 li
519.669 1042.04 513.189 1048.6 505.144 1048.66 cv
425.794 1049.19 li
417.749 1049.24 411.184 1042.76 411.129 1034.71 cv
411.129 1034.71 li
411.074 1026.67 417.554 1020.1 425.601 1020.05 cv
504.949 1019.52 li
512.995 1019.47 519.561 1025.94 519.615 1033.99 cv
cp
ef
587.354 898.522 mo
585.291 898.876 582.346 900.438 575.23 900.595 cv
573.631 900.358 571.749 900.271 569.762 900.563 cv
573.032 892.593 564.542 889.411 564.542 889.411 cv
565.074 892.071 561.14 897.377 559.414 899.55 cv
558.662 899.85 558.153 900.388 558.093 901.238 cv
557.852 904.627 558.115 905.199 558.115 905.199 cv
558.115 905.199 554.046 911.565 554.814 916.59 cv
555.475 930.144 556.462 934.676 553.81 956.397 cv
554.456 961.215 li
555.179 966.631 559.891 971.939 566.236 973.865 cv
570.815 975.258 571.863 973.541 571.863 973.541 cv
587.119 971.058 591.716 949.16 578.915 933.908 cv
570.016 923.312 583.556 910.31 588.2 907.414 cv
591.745 905.199 594.742 903.166 595.292 900.369 cv
594.569 892.803 590.637 897.966 587.354 898.522 cv
cp
ef
580.834 955.427 mo
580.834 955.427 592.473 950.218 592.191 940.92 cv
594.807 930.053 599.028 926.809 598.979 925.743 cv
598.933 924.68 592.422 920.611 587.546 922.925 cv
582.675 925.243 578.977 934.357 578.961 937.889 cv
578.943 941.423 564.706 942.3 580.834 955.427 cv
cp
ef
454.631 911.687 mo
441.17 954.49 li
436.337 969.861 445.024 986.216 460.464 990.813 cv
460.464 990.813 li
476.36 995.548 492.967 985.943 496.792 969.805 cv
506.961 926.892 li
454.631 911.687 li
cp
ef
323.522 1113.38 mo
305.814 1118.12 li
300.917 1119.43 295.881 1116.53 294.569 1111.63 cv
278.619 1052.08 li
277.307 1047.18 280.214 1042.15 285.114 1040.83 cv
302.821 1036.09 li
323.522 1113.38 li
cp
.505882 .552941 .709804 rgb
ef
327.097 1131.44 mo
316.505 1134.28 li
312.092 1135.46 307.555 1132.84 306.371 1128.43 cv
281.292 1034.81 li
280.111 1030.4 282.73 1025.86 287.145 1024.68 cv
297.736 1021.84 li
302.153 1020.66 306.688 1023.28 307.871 1027.69 cv
332.949 1121.31 li
334.131 1125.72 331.51 1130.26 327.097 1131.44 cv
cp
.317647 .337255 .588235 rgb
ef
269.412 1103.9 mo
294.108 1096.65 li
285.332 1066.73 li
260.635 1073.97 li
269.412 1103.9 li
cp
.505882 .552941 .709804 rgb
ef
322.779 1268.26 mo
332.28 1265.47 li
280.873 1090.22 li
271.375 1093 li
322.779 1268.26 li
cp
ef
410.279 1402.49 mo
430.823 1412.6 li
503.45 1264.98 li
482.909 1254.87 li
410.279 1402.49 li
cp
ef
327.953 1402.49 mo
348.496 1412.6 li
421.125 1264.98 li
400.584 1254.87 li
327.953 1402.49 li
cp
ef
477.389 1394.61 mo
297.182 1394.61 li
293.495 1394.61 290.51 1397.6 290.51 1401.29 cv
290.51 1410.13 li
290.51 1413.82 293.495 1416.8 297.182 1416.8 cv
477.389 1416.8 li
481.076 1416.8 484.063 1413.82 484.063 1410.13 cv
484.063 1401.29 li
484.063 1397.6 481.076 1394.61 477.389 1394.61 cv
cp
ef
452.995 1267.74 mo
438.093 1259.05 li
508.273 1138.67 li
523.172 1147.36 li
452.995 1267.74 li
cp
.317647 .337255 .588235 rgb
ef
521.834 1126.56 mo
375.823 1126.56 li
372.139 1126.56 369.151 1129.55 369.151 1133.24 cv
369.151 1142.08 li
369.151 1145.77 372.139 1148.75 375.823 1148.75 cv
521.834 1148.75 li
525.521 1148.75 528.508 1145.77 528.508 1142.08 cv
528.508 1133.24 li
528.508 1129.55 525.521 1126.56 521.834 1126.56 cv
cp
ef
506.728 1250.84 mo
325.699 1250.84 li
322.013 1250.84 319.025 1253.83 319.025 1257.51 cv
319.025 1266.36 li
319.025 1270.04 322.013 1273.03 325.699 1273.03 cv
506.728 1273.03 li
510.415 1273.03 513.4 1270.04 513.4 1266.36 cv
513.4 1257.51 li
513.4 1253.83 510.415 1250.84 506.728 1250.84 cv
cp
ef
342.94 1279.87 mo
495.117 1279.87 li
495.117 1273.08 li
342.94 1273.08 li
342.94 1279.87 li
cp
.505882 .552941 .709804 rgb
ef
402.679 1154.38 mo
516.301 1154.38 li
516.301 1148.74 li
402.679 1148.74 li
402.679 1154.38 li
cp
.317647 .337255 .588235 rgb
ef
415.402 938.791 mo
415.402 938.791 423.272 962.078 428.131 948.512 cv
434.001 932.117 432.982 925.165 473.1 940.071 cv
482.658 943.621 509.474 964.835 513.109 935.752 cv
514.307 926.171 513.907 916.995 508.719 907.416 cv
501.299 893.721 471.14 882.397 445.76 890.777 cv
420.383 899.155 414.101 919.015 415.402 938.791 cv
cp
.239216 .243137 .364706 rgb
ef
470.528 919.254 mo
470.528 919.254 450.031 986.41 449.323 1021.05 cv
424.581 1029.53 382.876 1005.49 382.876 1005.49 cv
382.876 1005.49 425.995 893.806 470.528 919.254 cv
cp
ef
480.042 889.608 mo
480.042 889.608 448.216 915.817 438.855 944.835 cv
423.412 942.728 li
423.412 942.728 432.07 905.288 453.599 885.631 cv
453.599 885.631 468.573 879.548 480.042 889.608 cv
cp
.505882 .552941 .709804 rgb
ef
415.727 941.033 mo
415.727 954.397 424.529 965.233 435.389 965.233 cv
446.25 965.233 455.053 954.397 455.053 941.033 cv
455.053 927.667 446.25 916.834 435.389 916.834 cv
424.529 916.834 415.727 927.667 415.727 941.033 cv
cp
.917647 .933333 .976471 rgb
ef
412.568 940.17 mo
412.568 951.864 420.27 961.344 429.772 961.344 cv
439.273 961.344 446.976 951.864 446.976 940.17 cv
446.976 928.474 439.273 918.994 429.772 918.994 cv
420.27 918.994 412.568 928.474 412.568 940.17 cv
cp
.505882 .552941 .709804 rgb
ef
383.224 1026 mo
385.34 1019.06 385.997 1011.72 384.362 1004.1 cv
397.242 985.7 411.5 1000.42 411.5 1000.42 cv
411.5 1000.42 417.816 1018.2 412.783 1038.09 cv
402.44 1035.12 392.59 1031.37 383.224 1026 cv
cp
ef
383.224 1026 mo
392.59 1031.37 402.44 1035.12 412.783 1038.09 cv
412.115 1040.73 411.225 1043.41 410.115 1046.09 cv
399.819 1042.51 389.924 1038.08 380.81 1032.42 cv
381.741 1030.32 382.558 1028.18 383.224 1026 cv
cp
.917647 .933333 .976471 rgb
ef
394.479 1067.57 mo
393.002 1068.86 391.602 1070.17 390.241 1071.49 cv
381.404 1066.77 373.188 1061.2 366.813 1053.74 cv
372.283 1047.32 377.372 1040.17 380.81 1032.42 cv
389.924 1038.08 399.819 1042.51 410.115 1046.09 cv
407.045 1053.51 402.142 1060.93 394.479 1067.57 cv
cp
.505882 .552941 .709804 rgb
ef
363.459 1057.55 mo
364.585 1056.31 365.708 1055.04 366.813 1053.74 cv
373.188 1061.2 381.404 1066.77 390.241 1071.49 cv
387.826 1073.84 385.6 1076.24 383.538 1078.67 cv
375.299 1072.8 368.156 1065.81 363.459 1057.55 cv
cp
.917647 .933333 .976471 rgb
ef
342.118 1087.45 mo
344.854 1079.73 348.651 1072.42 353.923 1067.32 cv
356.992 1064.36 360.245 1061.08 363.459 1057.55 cv
368.156 1065.81 375.299 1072.8 383.538 1078.67 cv
375.897 1087.66 370.597 1096.98 366.933 1105.26 cv
357.845 1100.54 349.33 1094.97 342.118 1087.45 cv
cp
.505882 .552941 .709804 rgb
ef
340.254 1093.33 mo
340.816 1091.36 341.427 1089.39 342.118 1087.45 cv
349.33 1094.97 357.845 1100.54 366.933 1105.26 cv
365.896 1107.6 365.004 1109.84 364.214 1111.98 cv
355.25 1107.57 347.071 1101.8 340.254 1093.33 cv
cp
.917647 .933333 .976471 rgb
ef
335.145 1125.07 mo
335.145 1125.07 335.691 1109.31 340.254 1093.33 cv
347.071 1101.8 355.25 1107.57 364.214 1111.98 cv
360.002 1123.39 359.063 1131.51 359.063 1131.51 cv
335.145 1125.07 li
cp
.505882 .552941 .709804 rgb
ef
419.095 989.132 mo
421.708 989.736 424.358 990.325 427.011 990.888 cv
427.677 1001.55 426.41 1012.15 423.9 1022.35 cv
420.788 1022.18 417.767 1022 414.853 1021.81 cv
417.744 1011.04 419.886 1000.43 419.095 989.132 cv
cp
.917647 .933333 .976471 rgb
ef
384.736 976.508 mo
386.047 977.931 388.361 979.345 391.405 980.724 cv
383.74 993.896 388.931 1007.07 394.389 1020.25 cv
389.289 1019.79 386.206 1019.47 386.206 1019.47 cv
386.206 1019.47 363.117 982.487 384.736 976.508 cv
cp
ef
459.057 996.813 mo
460.683 1005.6 460.501 1014.7 458.251 1023.05 cv
455.919 1023.1 453.521 1023.13 451.083 1023.13 cv
452.922 1014.06 452.893 1004.53 451.011 995.467 cv
453.918 995.968 456.635 996.421 459.057 996.813 cv
cp
ef
391.405 980.724 mo
398.066 983.742 408.233 986.609 419.095 989.132 cv
419.886 1000.43 417.744 1011.04 414.853 1021.81 cv
406.708 1021.29 399.526 1020.7 394.389 1020.25 cv
388.931 1007.07 383.74 993.896 391.405 980.724 cv
cp
.505882 .552941 .709804 rgb
ef
427.011 990.888 mo
435.412 992.672 443.823 994.228 451.011 995.467 cv
452.893 1004.53 452.922 1014.06 451.083 1023.13 cv
442.19 1023.14 432.749 1022.81 423.9 1022.35 cv
426.41 1012.15 427.677 1001.55 427.011 990.888 cv
cp
ef
459.057 996.813 mo
466.296 997.989 471.013 998.648 471.013 998.648 cv
471.013 998.648 479.29 1007.39 468.251 1022.57 cv
465.12 1022.81 461.754 1022.96 458.251 1023.05 cv
460.501 1014.7 460.683 1005.6 459.057 996.813 cv
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 22.1.0
%%For: (ahmad safarudin) ()
%%Title: (flat people concept vector metaphor-20-01.eps)
%%CreationDate: 12/6/2019 12:57 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!9sCQBg_E@,uq$daBJJHGocc;$1a(\na;9!Z"^OpFoCFC5qRF/DO;fp>!KO!OSRD`eV7<EYU71QqpoYZE?CN35,2M7c8fA6aTW
%ZX5l.]74mCs4sk"rq=O!3PD_tR$.otSBOcYo!=tee'/u<T>kei]r8?)POl3\'7]uHLY)"_Y4&!tI!g0erUb2\\:&ULqW6u>j44+m
%G?<\L?`m0(s7PdH_d?3S]"NFg"9%BR0B1Tu]t(iUmDIu?eak4q(af*_q8`O57),H#nBXeS?[m&cUp$qnT*Z(:c2IY3++Mgb$'=r.
%ci<[!fAGCH4[379h`T]ogFr'\k?fKKqQ&qk=7QT2m$B(ms7n\Rnau/5Dm/$R5"hNGm48%Rk?jb+`;b&X_cos/pfE;5ZMYfnrZhGT
%b=Yn9o?-(mDkE$hKR\.mIgXWMQXB_1I5q$FR8\q6B@hT?LCQTF3J6B)I!g0cGP1aKdsEGO?iK<dmd9Dlo/0=JFiI\)e#O,NIs1k#
%Hqs:PT,-J7:o2`[M"6Tbf(MnCU6e*RT5CXhqCaeZJ,SKnT<>BS>X,YcnG2,9=#^.FPJ+e:+h(8Hq!RkPnXo8gSr"]4Zmp.m]8&>s
%[tK-ElF46(]K3WTir<k&r9<M:]Ba*5g(1[]0U6$Wq:kAqh-F@cG`@Dm>:4oFH[YplLOWaZYC`P>E#9;cD`ClAc)KE9E_3hKJV\4.
%P8?]()9nh:V>6'QrfWT=+!,@7]=It'JhMWPO,l5<[PaZ4WQ>*YWu%W0DdE@sTG$;2ce%n!G3ck+s/t*.k2LSlU"A2W^H"O6@5a_H
%YJ6f[E_fp'p>NXWfBlr?Dq)_;[uChDI/WpIqSCE>)ZJtsIP61$?[m@uNrJg7Nt:^9IW>DT_bYdQo?Z;VHuj`4Qg<8L&!&Q^DbbfW
%k25E1IW>3En)Vri*j8mK)t`Ub2]#OSDh%;.#)U[Hl]_73I`qc&r83S24`,7$EOH()qO@As>i.`Xm2D;Z5,Q:PDm/T4*`)]h[DC%U
%^X->jBUlLXn_s04T0K>M=sn6&=L]+Fk0X*S53W"<0jS)Ag^d+5mHX6;Y7H[Y@)?f"hskFWn9AsO\*FR4psfo,c`b)J[b7UOh!15-
%cejrY\A!Ia[#Tb9lScTsFeO3lkNAo#gRIXQYMO_XoD8*[a*1>:TDnKPE4`Q]r-dt3ru:tE^\jHo^\[KgRtoafVn9@+T(40:ccte1
%l`YbbHG9BgeVA#AGlNPG)5!%Lp;)jl3\0;N;s=6sHWturogF<-T@D%cYBaZc55'J0qe>-kL:o.%r0oW([!?"<T\fRj=+@oX_r1+J
%Rh'=7%.gqepS9C2^3Y"pI(eplLV(%B:/>5FJ+`N(GL#d@='LmYCQ`AE`-V+A,@m2J7E-N,CLpbjmWWd0In,=on4:7ki^82X^%\c,
%N;iPl*K/sM5PrFaU&fjJhSK"`@-sf.O?Rmq+oV\b`0&nDpBLO3s)Fc]rVb\Vq&:$fk9"WG8V-^(s4fj:oq)3NoLhOBY>'lR[pPXh
%qu,($p$$tR2dbC&P'alkA57Wis7@f<T<CNU,Q5qW%Q-V/]-%j<f"h;nL^$SsOKP)-&-)PfI^3YHJ,U&[p:ojargd_PV4fmIme!^_
%Akm8n8q3Xk\X,5X7T=thputRLT+P-%"#EE!dBWB'nbMb@Q?9`S@H>UMArn)f7m%-.rXXtEn^d?oC\mM'2EYcYEt`[fNUA-+A6M1m
%`-#LJr)!SGRehLL3]2)V^=5LP]j+TeIJ$:7ib)VJ[LfZdn?4dS0g&Nu5755s55Q)^'AOaFf"VqOSG*!KgRG[Mf+1u0IlfekbB.\#
%"kM_[^:#]mjR)"#e+Fq7F:Wl3IXDNFb:ffX0*oDa#EMr^,s8p<$gZ-:DluXGI!sh"o%BXbGPQTs*k_RN+&5'#gYM6[IIN+tHbB1:
%h=L<fgLm-C5$kYcrbItu48%$Mp\OcVgGb2Fp[,$TQ`'esrjR[]o=nNndL?UT)4bGJ;&f8eD'.efmeKWd;uPnZZP_fWq;ksIMTb\I
%^ZRr`&@RWi2ECEuS,H\X?/Ye"=[_lX;&G=A.kBoIlC6OD[VGbHS,7GTs#jE;J(fk\kMq'']m5&)5A7^E^V9O3qi=p!l_jbOHi(!*
%Dk=`D-t)Gcs/Im<j&Y>m'd!4p2\46\%sOAlh`ctKo'^bGIJAnLqY%+BO0e->qYBCc*Mn7H[f5/C9eH:AH0W-C?g8&2f/1-!Df77g
%C?!^sLZO;l[X!)ioL#DLFSb?bf2k@fHhHOGn\_E^Rq4WIlf7ZUmGirgo.Nk2^O(DhrK3AeS,]u^[QmH_4Y7)4DOqp=@W;/JAi@*T
%o%,<[+'1&%_T_c!_q!cd;M"A.@S$`0TLBZ%H21B_qX3m"*U"$BgOK.;Q7"qFF8PBORtqlpqcJqcA$5]hY$1QqDm*hW^&F-2\Tr7B
%qV_/KE<#G(LPL*"oKA[ANo/F:gT.f*2gDpEH[!Xl3T\h#:L>_uNB^_Km?rqj=5VfghE:hJI%>ZT/(EYjFM>?dbLP'C)oumdF0"V4
%M4Y5P^Kkb-gthS$dnJ#lBE@pQf2(;-$W(0c[Po,l#Ch!mr0G@\_`q;,9`qiIX8DABi>pq$LUZS/rnP$lHXXKKrPRf*r:\t6mIK:e
%\UJqCbMi%Jos(U.3kIJFEPBFiq4#,^DnH!3hu43SDte69rMdF#?.#597%=&<8boU**7>b9Kc0oY-MSfMV7ZcF&)6>3kR%.Hr2]/<
%J%Bs'OeFMDIf/3W:]0DC?s3O/-Radam%oI$j7V,#J,8LjIs_(^pl&R.r^=rll2P",c-cU+IX$6]rC1Meo\&[TT'-)J?%;\9hobLP
%5MY+%^Xfkf4l&>=p[ZeX4l>WKT%GA=CZf&SGQ$[dh-IJus6UW7rS^Lnep_"&FE<Ip)3b"Z-@7gg5MV;_rT;;,hV6HW/ATkMQn-J,
%>k,k0\RO;^q">4go0i<Vo/M-E1F?J9(&+VCEK6EPO1s="97(L@rQt4d^Nt1%.uRpWh9Ru"kHhYTh>M<_mgn;<h`Te&+&8?b4&Q>t
%3PYC:B.PaN\U&Wa*d[dOY92Y,?n'r=]tO4?@mBn7LUngW+3+$XA)2o(HL/k3+(Y0:@235f/o"Y\GAjY!`PhFA\CMudV@VR5s7#e*
%n,)JFObW_(L?9AreV?Zln[nN*TR:e_5F;BE0J>?Zo_RkHHC_\ZI^o"j?g*siUA'`BlaLdS03I1X0=1H=qhK+)ICan,i-0Z6I]&4t
%*GND5m]sV#Be@^r]AOpqiS0jrY!@C0k5+?)]DI%,oGrm/mruh@bPba1I<5"-GI8u&pV(R\_9:>Ta*HEZ1klgUUa^\9[(E17Sce6M
%]-k1eFb=3>Uu1#n?bErJd*1iB5'A`H?Mp>lNpul9_qU7*<UW)cp&K7fW_72ocelO[locEus)0!oIFr)[8+>$QP<K(EcaR`mhS+F0
%T(0jFDr`cdqs`\oko7jsm0D2l<f-JJT!%T\lhU\gg,%Oi<in`)9$X?dpJ2lGl07lqgXeZ=?p:1=IIf;#^A?sdTcqF=\6_#ch'8UO
%iicE@Yg\ur1HEn[]lLM@Nr'8*T0BV<[L^"3QE,AsgYL8Fm#0cokJqp5PHOf1I8AbkYulaHiMFpJ62fs<c&\c05LTMmnV(Dkmm"1P
%1#m2OMjsT^+5XK(T.[jgJbJf/_tiu]"m5(3rdB]Z5$B#d?Jk^kS01%GqVsg>lL`&6cH4Y%?I9MXV3Q\*pB!tem.&?\dt]k32:`ep
%mqM%Orr/U$C7HaPC:W^p*T%RO0AkU#rm3TNFnPo=P5a'_HeV?-2Gs+ce%<)VL8Ve8:Y2ZAT)/*L_qR-=54lh[LC\h'oY,H=?f9Xd
%[D.N3P=An3H6qH&54C"8Wpa0k:D^JUf?C;i*O,/NFntrSs#pq(L&LN=rH]6nf\RX0rs/2jVi1H<n#g'9==fTG*_RS=I1MCrlh@ME
%I!,CHA_J_6FZmL)e_GS=28tpeGlK&7n?gL_+-2^4)diC4]A_3T5&AE8ZbH2NVYL!@f=)jK5Xk@q])If>ZoaaA6EKUh=3oT+oC&9R
%J,Sm5=8:D8Q)n+*@4:r!q;nS3!1=Y,qOKblD\c?`]8Nr_1[u5ErG":!rQ!@GqnCqA=n&h2B_d`ii2+PIrc%Q.ThE?L:&Eu"o`Mg_
%^&QQZ+)]qu7XP0QH_tAdVq`n_l/b"Q@\9OPi-4W+0\e5Wft&h$eG[h,^**FL_`.)Pl^,N;i$D+NkO$;sr4:dBMr@_Q_EU4j]tn"O
%FERV\R?!=iUH=<u?a3B_gc=mT[X&J!g@loZBY$"qfgk\C=f5%RL_U<4I"#2T&'!_rb\"opo&alB[pNH+IXD$>Yb<*)b?s(4.;oAs
%?2`m]GGGQ&]Y2#Xr%Mp[".t!jHi)>No]0![p]o'VqU=!Flekm!=G%d,J-.(8>L'D!)mATWg/A9Ti(o8tiT3!_rQ3C]lOt^WQhS."
%$(LXqrQejKReEq4rAB!Tld6hYjIb%8#,#>@SW<[FrqtCBp^)D&e":3L^Kp?Rh+rO+"h8[HbFWV@Y@dSpqlda4ktg0Pcd/Cd&n4[r
%:W>:H(Y.X^f[nI0s5>%b&BrFfG[\9Sa2*If'T<%WkW[`/B;n%`,8%8C+M)qtC+0c)A8SS7nbgk.U_!i/ah)IArS@fsD02PT!9iT/
%3L:,;rMaQe3d]fnERjft'(PQ'l:TqggDX&si65\g_2GJW_".p5ad>aSn=MQ4^RdqL#>6)*FF*%R]u]g^N1[Mr?S8UY?M7>;b=/_1
%K"A@_;u7=KXPc^DrYJh]ds,>6NK(:J(mhYP>pL528]?TkC_U8-ff=984cpUb+EFR_8G<%WPY,HRN5'=_`lVC&VT9ug_F:+nM.FLm
%p,q&%?Y:BGj+0\(,[uc\YJau+QDPCV&XGC'iPN*HiA4:+Nf1/0L9!Sg3#J%e>SG#/$)Sc`^k>*Kd7OM\O^;F0K3dP1.t]p(LAdW4
%V!"]`H\#2)0*Tc0T":g5K)0Y;NbBqLGkoiK)KQh:RPTptn^7a4LRJ;3>'Jmp6[:\s?'JBH8Zd=CjM20``9tpm*a#fCU<jd^b^+H1
%C2!(dg;]7'mSp4"#]s&4=]?M=mCYdK'Rb/WGY2>Y3J,\PO$"'#Jp+di9J1043`o<qCSOp>1\qJ4#:EPK+IieYoA%W=JP2gi"ji&F
%r6S$*PDad:1'n"#F4Z/aq/FKh7Tplj)uc).]*Ki+euAdkDB_S9`+"bh_Rl0F0NW#HQ\#Up&c]qJdeSi(8i>(f7H3.$8lJ;S%+pcW
%W,tq-?3OMW`EO*-OVYT(kWP,1O],\j,*HK5$)C"V6b]e-13TMMWA,\bG!Wa/qXT?ST]91pe<2X(>j3FtMeOB>iWOd>2RH^SF64\$
%`'cX%JitDXOWkJYVM#rK.?SSIK>)b%S0a,bde0Cm8tH`bJ>3s66QK9Z=*inX)ISQW#7_Uu1o&-_5[.W5+;&)2<9Q\aQMP_OP$dhh
%mt;B+Bu(.h.1,VJHV-d1RLqAU^`5"*`^(MWG9diI>pVNU;PY1BC;f!9%/h&R'knhQSl\_0<15"e\4D42F?!,I7t`\87qiYG._R>L
%7qPlHV3/QV9"**\9eolDca8TqbW+GCQ9r4'-2\U01QFMVe6X:M?:_G<Gd8$:;qh\pb(9>:`RAE]+'D3Cf\e!Q&c'Kj:m1NP4LO`0
%V*s$;$IW7Rb6F!BPj"ddFCN3_+%!G3$1R3-T`CSs4>3s!oJFE^E)Yr)A>iLMc<2(`g6eT*g)10.lrn1=;8hCtl>[r04Ed-Q7U.Mb
%!iUoCIJCZ@=@"o*M$"kS84RmD043*0>tC1,in239jFB$U<f7"d<!BtPj3[I`cnQfl^r7g"CPt%<,R6lN@/ZA;duc'=lSIs^\DCa_
%6)'DdOXIr[bM@q]ANPmR:(8S"D`pRHmWPt;AN]2a9_r<)Q.,rJ1e:t;>``EH'01X(k[d-YM]1h<nLDo8-:^!"\ij;Oa@CHQoTOkI
%m7;4ig`eA650Js-HCpE_d:/P,Z=d8P+Bb#JfGSVD!L87B@1oV!PN9sm`uqAV--A)%7SjC%;$gp4"!DnfAMWnEM#ER;Tb6:Ki6aPa
%\l$8%W5/k4>,9R((o>Ii8sTPiV]3f-3Y6n:D?;C<'<qlhm8RF!:WR?`E$4-!'j5_t&^JH<V+kDql$PmtE'eM1+h=(6JU*N:CE$jY
%")2;c#Fp#q4N2u$$@ttGjS2,=UjO-@g!M-%3(R`-&K&]TV*LR)AD!=THSj.#e;:'(oE:Bc,R*ta+](KXkJG8e-4/N'p/);O*4L#c
%Wi&*6]8T1NU8*E/BEs'O@Rk!KlpefH@Kn3eVLr<JgQKuUbF?hm8p[2M1<XcA(`M3D)p1:o7-9]/`07+4*CuKI6i\8!1>nXj4pB4P
%%Va"3U-TS=FatVJK36k&P"sAISrJj,N$"aS$n>Q/aIEMM`<BrJ1q_*kFb$VR"dbQ@LRiFjS6a,!U9Pl%'(/_!N3"jD'rs!Op/Sem
%K5YRM:5E-2h%inhdcHLr0:(VeA`UH)okNP-M'RsL[=X(M4idg>mPrN*N+W\uQ<*1*%L]jR#Q?St%mttNka#=k"pK0D-V+!bpS?"V
%#,)T=dH=emHkfJ(j,;n/Pm2ZtZ(5C=^_"<!9bMq9a*aj`%bjrljE%DAc]RY7T&cJpE(]9*^u<q,!bOjVc6euV^*#]"8THZ8N?T+g
%k<17VUhg2cZ@q=/_?uj]*iB`R1DDPb-5Zg0.`*'sUGN;^a5/\4"#%H"*6gYu&idDc(*Vj,Tdsr8;%@kL0@Iri]J8nq:.lfI3Y$SR
%i5<?sW"iAb&"*K=:?[4rRW8>D88<fHV(^b+5`O,**eBMm$^$]Skd#Bj4CEV?]O<5Q:FGU='>]nZR$\8`*sL]+jO(M;\l&NfaMAAn
%AoIJt@/L2bLR9/enT<^JkI"P_g`RRf<IqcZgJjn#:39tk\],jn/[Zf#-lD,ZE^YR^.-eWpW3[@6DDOsH=tA.^Y*TT',"arO7pM^I
%$n,pA]h_p\kZFq5U0i0YIMn=nD\NN2i&9S+8*h=?[bpE#^4D[W+N"g#<b%ctEDU%[AD@qg#3)Tk[[dLT_cd$R,i,Ud0%JP23:q$E
%Nc]-D"g8N6l@d$8>t[\#^&LYQ6jnn7T2!?h#>0K)<eI8gE9+AhPN3(WFiSrb[LdFQ_N1guq,HUsTQ@G3(UPmE8\mA4LNFTFNYFGT
%D"&(AK]@N18ZO"74164MW2%m'RKqT%b?=,3_YV20P+EHniREe3fI.S9H<2d1]^WO'_@t=g6!?da]k+'(??\pPN\UF>*[8_q6ALcL
%m`==BE6b=dZ&ihYF/\^7S-gYJqS4<MB)NtAfd=\,jsRQ*;)6u@kb*.4^o7Q:EmmS\3%9K%(6u$:5QgG\4I8Hb%I9D'&DR:92\-%n
%Ki9<=W)VCB!A-3=`^5l2HX7D6F&P'VJVg>R<N#UTaH"pG1kO_rM@mM<im@@_qZ6@u/.Ohu[L*uYplL7Y!M4Kno&ZGo1;tk*>8oW2
%CLTd4i(h?G(nU/A,[Qu<fuPUI7,sbE,gdD;2"(O7&:%At4^R`A7?qD^Ko$V?PqEtk\gLoR#A1-Qlg1]_R.`eLG`dViAC&9JTu_E]
%S&W@e0#+R<qC%&%m75!;]GH:QK#M<O)WtQ'/(0X%8Y]^boKgil<Vt2uNUUr%Os]3%m,:*+2+KYKjS+N')n`hQ$?=>H(qNYs#dZJ8
%PMNl$32^<8f]o"ir#`OP5`XX(%"YA\#>i`VJUhpJhT<td@rHofK%h%o&>TL_0XE$CpH0oBk?b?+IN84soK4UO!N-!6KWaeMYnZHF
%P]Jm)*cMV#p2c!(K7)(lifHPU!QJgWj/a2OcDAsS!bb!IU4f[JCe<sgTh?O;*`[[W.pXfK-9MG9C*#4tEL+N-mLH9t_)SE$%#?$R
%8^c62%S&rXmJ9_"Z$4(+JAUI$qilWRC^-W?Js79>9Up[#)hqiK?gc"K]]#InK`6`_&d]*$&Z/$il\4rRNG'WUX;+B2SFuZGOU!XJ
%nLI:k\B>cMkVQ(SmX_baAluXBdTK,99EUHh^<ScmBn;L2(:QGI1%`M"2.RU1,I;dCimPXYmbJ]s=sfM7<\]/,SGejdKLe;lM6>C%
%NDM"aOj:#]Q\K4-cWn:W+0cj[>WMS<g,:Q9ij*7n-IU`lI5R\6_h!8cQrsUXN(DBcAQCYk$IFn]Q6?Em^1GW(%<StHZ:mJsUX^/C
%%9i!A45;DZrGuF8hJkQMS<HQ%9.n*Bf5mp5`g>6geHgS6Oi9$qm0T*XT(.Ck&niik[E#9r\2RC>j3^:P,juG#ZSG,6;<qu4UYo`S
%2Kob64%pm;$LR:?(a7At'[egRK!Cbg4++1=?#EqZQ)nIcJN2oS3$<fD.O9CN3Lgj([I6c)"ffFi_WKMJVn$X(AXT*$G:qW#os1JR
%R:@&Z1hf7Rp+:ZTbB@9;6?hqO`_/tI^&_H/R.o[lh`9&n7pP17\*/oeqrF,jO6rdEZO1)D33DVb3u3S-/phO(%[MiuA9@:B^#OTb
%NCF$J/Cf#BUSA\$]Gtm>Wj?lpVqR=9BS>7>CA7XBDUA<&T/p%joFYIOgH:f!aW)I!?'0k"GCJ7Mh]opfO.Dd6Nk<in=f.ZBD'%*g
%U=bPh2slX=&`;XM[eL&Nm#<#kp+G&L+:\%chp+[&kBc`U`m7$1X2s9ZbmT<&`!Gjr*OL/'a*n^V,O1hHG0e@o\]dE,=3&QKS%!P1
%V/suNGT$%r:#H:ikFB3f\Pg&B7SoGBC\EL2A5MN:9)P&A4,/2h8;hQ2apI;7j@JRWQ[<a#;UuU?>5.V+d6fBpXt4*s-&3e(Bqs,%
%c`o;E_bXt=5W.oS`%U4+1D1gUCn]6H"7QcXj_F!Le\Il'l0>>OR!gM8'i-0*cb\8eo%Gt:;W*UpMXcNu6-DH)48tr$Y]>U*!a]e[
%jk'2Ur?Q<#?63P#4Vqg;.c"cO1uNbE>%gi]DI@mM<h.WXSC;1KK7PHt8M@HV4^SichQpj,KK(9%L*ja0d^9-q@"^CC;DJ:qbT2$6
%mVX2ZA[4mf'G;giHFgO3.eLpj"XP8C)ZWX)>BK:"YO2-)4(9p!!`EEer./X.#I(,TNb`gA9jW8i*UTJNH^&1+%kJ`'N^e].P"0(\
%kt$@]ieC$b%c[n7XW9><o,bfT@8YAQOXf5K[-[+)b&fp?Sium.Ak%;lp:(\E7$%!WJY+T>+?/T:eHh%N%g.!/_6N;Td0#/](t`7/
%?@k@s7?14*loOEC:[LTneq-Za>F5sd%^(:8B[HaTnT%rT/^sp4X:X*n!=$[(#BK@Z,<EZ!,,,X@blK#X"!7r!I1Z<JgFCsH]"ZH>
%K'B=3L*%E4C\:@LrQ2`NJYo\+E\#EME,//C0F4PQ$WFQ84>;&pJ/#SZA=-6@;mt)G1ouo8+.ZQB0*RO@?_5#G`>]kK*ESj#)"KOK
%S'_I_]-1=s3rqL@^certGWg#B@@aaKNQoV@R"@Rj3\o6u.Qf5D4f]-&-.]H)!18E`)^&$_-lC#DE,,0!cOo?1BW?=@nU!0Z^7'@e
%"Jn@*Gm*;rXqr(XdkbkR;T>=iKL!(72aJ&e3:p`5_#c;7S/"aJMdo6qS,kN4IRTK&3\8q#02/7Fq!<!U,t4ENR'n_!mHfG/5kaC*
%R2H%N:#Um5ZI]pUs7c]=Q.ku/^g^O.!+4])m/5>VEZ$qHnIRdgge-Cjja)Ka[@gIq(-]hkLIe^QN'GtV&?So;[0O>!T"J78fL)5?
%K[)3:MRtS3pZX5?CL:]p_P^W#p0<OsmVHqb1l[-MftD6?2[6<3$k4J?HG5lf//:31N:A8)l),H_G-%]l.?I$g]lgL@BJY+rk7Ni\
%Ru%QEd)^se4L^eY"m)X"k^"S`mM1fc1HQ9+NlBQ"-*n'lLt*]hM^-X"EjM;//1M2qd7DlqW:[JRe#f9"kTc-M1L8?&Af9X:5tb^o
%T()kK+L2(=PO3HR-C(`'4<s9bTs!QjZXZR[%aFufm,AUE<:FK5la]k(I\NfZ"gg)9m9m*H^+TXkDlh^_O%_$ocNp@^i(=DJ>WB/n
%](h3'YY[.2Jc]/iiOas0B09:9lk*sB3&.*MXu*\(d%-9s_7!-&65;JkGA2"@XZb^b/![>GUkDh;Xh>8SI)]ILoh+73C]V(E2ceK6
%'qXT)<-XXNn.sc<fh0M2^\%l0Zj&N;4F2V5iUP(B&)'A15r4q+$X32r.H1H^QXX`M-1(nRV+(t3(6Va)HO*.LLh#`UD5#(@pO[E3
%Dp5:7.U5b$[(qe2r\/"92'YHkR&5G3BnG')Bf<;mo;r,/da%6W9^#FTWM9oeC^OI+)ehNM.iG$I3Uj=X>7A'jXcAFkIaf.%gdW'L
%.s^/eD,F_go),<\AON[KNp;N=VO:q?1>F0\F#,Rc3Qr',m_$Y<!\-MJ>=_<Xr'n0Ckk\uYH:(u[S/EO0kO=CeI)1MF#EdQd4(u9^
%*1^2.h0;D.#+<PV7Xnh[]8(_-7rsju3@8e3BsAS$4NL.]a>Bc[Y$=dIks4a+,D8W.`5G_p"QJs2GG-a9&g]FZ3jniA<K\j,P0R0b
%:a,OCU!_n,T[APEPe)\6Y9cRrUinaGm[Zb17GImV(%[%;+AiX8$DaU6-4`%SVW$(D22@?Sbe_V`Gm"_sU"#FNe8R_9.oEJ>g'T=h
%E"Qbu/M89>+_63Rh7TL_UqCERA>PIg8$E*A$"?sq>)\L*^aC2_=]..oM*Xg`DC_GHK<.q%J0WLRd$M,q39WPG=Amt;i.>Z`e!)dH
%!gG5oR3@8Y<:Yua3*(2^Ej(^fZp'q_$)7<[I;hp0H7Df4Y]#olk\g#Z#N`f_1.e^E9A5-lD2]&r7_;N@87ZZ#FkpIZ@16fn4C,a#
%(/ca-?uG%:1LB?nF@OlAgoBOI*I3PuS!5i]]@CO>"#?5FoM^in&6X8i<G^?#^67,6DFoQ!%U#d@o1'cc>B:`tmIr0?$DBrUm7QEM
%2$]0Vg'",8G9rfB%UoIK;E$MbjqN9B,VYcJ(I=(GI_8]2?.\>b5c,f/_@:D["`Ha/=c0ZX>"BW\K$[jQT.@=j+k&BZOa>e%2*+p[
%CarPVUXKAVo6nA(M8sB4\5G7Df&dZqVdd_]j3e+1*/87*AibMnAf#**'qM`TAr(&4K>!Gnc*icpc@)B%G%+1RCMkBaL23VT6p2`?
%@;@J<1l?Hh5?nR&_mKPNW>cdlEsf[gnN]&O.c2@?+P%jPfLD]e1,5j[IH50f[d^!""?n,beDiM4h#Zs-)[4W$:5$MS7#DaI-Q*PN
%&SJa2W7=-=Oj8^L#&KaFH\nOc+?c$Z1!jWrBRmNMi[I#)CSDr&'5?8A$',r1=^')`GhK#$@</_I!AbN-3shf88b4Lu?KapF9KSrD
%CASNUh%iaI()*9Hl&R+8i2TsL2Poco.i1:LM]>I%`=Tl4RVWV9R?>K'b&24s7M]YHd,\bO`2oj[PEie#XY^F]\p+LjS6r!f>D.nd
%Au((+.&SD'q(@Z68u+=%eU[o_p*<i%V@"+Y("nm(`(T)49SA6K"PU`c*n_W_N4]3r`'%V-[3UWCJ9Gf<B1R*3/UE6#27]JmO6`G!
%G$Bh$p`)"8Yk:#b<fukZfJ;sI^f&fU]MajM.We(SqQbZJI1fb;NA`sL3J7BW$Nf>L@LPqP/+o(M_F6*ac=iY>Ec&LF5aV7_8RZ*S
%jL<@Ca)PE.OK+QHfSI_Z\l:WC>d0.(]ah?I65:6M@UD7B'+X,XHF]rj%NK"BF=l_+Xb@'3S`efD\1\,D.NTNL)4FQ?.\>gNBRF1A
%OZ?)9r]7D_8]C9lX2-uR!J)l1SLf@3S7gI;V4Y*NrN&R*_1%*ENpShD4(P8sZm5F08\']*n],Qu45Lu05>i;j9-Bd.TTb'H.Tjr%
%H82qqCG=r<WA!b?p8)19iQI3%]=l2d=,;qdi_YFHSDf7NK'OW8/b2>!dQ216WeVP?ITdJf;ic?!ZYUu?&1C'aVW?b!<fb(g=*Qu@
%<Z?;f`26WunMfP!X_c7%Hpm=(<M7Y)5XY9*[YPrK*I>>6Rf.b0_`tGQDN7i8gZ&PV]]4hF@0.9>%rRVRT87>iaW5_]3c-7k\Q+"*
%:lPmbc<tHqh",)Z>.Z[Jd3<unFH#"`Moum5GuE8BEF'BQPOghE\nc6-0%W87NnSV6!X!FQ5iYf/Ia7"Xna6[p/i!LDda&FCaG@k3
%:?XZ/G\C^,0T8\MQUIQ&3dFWp]!5^N+u6o78tmW.jf*gMK0hHd^kr!KU@lrCE"TEi,^<1Ogl+)lDrl`k3g"f,+Y=0^Ht`HIPXn5L
%.JW7?P)&ja1ejdKbX)YU76IWa:C=1TUjt%P,i9*a;Ps*;hL,m<2"2`VN0JEU]U<h]a(-Lp*o:`hgEdJHdkKUBN6le/L#dhSBZC*m
%8liX@U=.G>7R>;uK*\EoROLd,-;Vd/Gi@/HT_XHM0P%1;Sk0M;kF$/g:g!P5>\Okn>KVJ77QcZIEjY/bpBY`rKA@@5BLX70TL?mD
%:A66Yp\\J4A&n"fRFB*+;Bh*0k"#^?q"S92g@0o8d]8D8V?#^"\Nu+^@0nADFEK#BHj<=imK7BdOB++l@(rAi(Cp6&#6E9kL9De>
%)>l$AQ99)BlKEgfpZ7S?Dt_KS!eWjA$6TNJ=n6LXQ%9,EkB4DLd7HaEe;+jmacO8u^-dNlg*<\e[W4hq.&%utZ(=sKF&P'V!J;7O
%%dsCf14\enP2+gNe4b71,CuA!DgEW^^',#U-sR7qcU]'m*KkY!K5aO?4#f2dk)=kGUN\!D*@HA)??lYATGErSQQTIJ?M^"A[S!TA
%:T'LA7<'Qtn,R0rKG!W0Cia'lYiI%H1Mu(nDnPF]fUUTd-R'k<'=/A.N32/SM5JsSl)'sG.G/^7/8hc3Z!309LYaC)%c-e4-cdi7
%(MM8Qk`;9?[T#/3<#YImag7KM1sBX<_GVsY.3Z;CC^fOS3/"/^/E\8:.;[$G!D\IjS\MEG"j-i@/Ckk#A`7(M09opaZLP^Ep,JkS
%%-&+#>i?EFW#Zif+d/T?PV=gO00=Kq2^<1(2Sn8&\H[%]jXdt04_JnKV5$R&!i2$@S<b,>m)bIRM!V+'PJe4N3hl(N-VF=+"t02q
%bkMO^WVsfujas<7UV7&OU!hPh,f2cR)M'CYZ;D#2gX,/b[hk`olA\K>4?4/:Loe(iO3r60!uSRg&_X9/S<Q)gn>LFdiYcaBOdQ\:
%"++@N;`NKs,TCI/X\b.-25F.rd@3/"DoDoOUp7cf=sNA9Ptc#!Ihdc\dl8P_P@Ie]/^Q)B?t$NdWsB_Y.7^CiF5dY.!998li'?7"
%l$geF&UC+V]HCAtGY(Y%6q9X'P%VEA8QJqq#V3V8fn7f$Z@u\NaIHuPpEUBP&lLDA4=AGqG'\&O31Pnk"hKDO/-Ee*p6&kfq-qu<
%$#[g-1iZhmC>(4/I>)/L;IpSdHq1K]"MY[*keoh.n*`j94%et*dO0>6h/,aGED=!-$7:PR/gZ)#!L8CfAF_:*77r<\?,ctn[VNtp
%:8i`=2aX'f$K/JXN7o_G.pj8.:5L'`6)C%OMh7ACWIS_"c,lh"H,.7;\)jlGAtSStQh\tInHHhJcTe$G17N5<f0WP/R"i,i!TDP?
%n(8s/>smcn`0$CmPcetqi3a8"m<DPQnQOl:"AJiU6oVb%\BkLsJ;,RU+Q*YQ`nC0H3--MSVm[EI!-.SoC76j8VoPL79?I!Z^bc*7
%)$EQ2];rIA_?$t%hM_):Q)m2llI)-)^2gg\KW'6LK9M8@.gRL+cjMrc>q(:njPU9(7U3b0a0KFDAiUg:@k#9$(VZC@9ND0#="=MS
%EIrZCfl2kJ&_IGo-lD.0EC=mrVfb>_5?r49>fS*?1_Q0:G`l#a1l>-r!=%i1J\n>5rRBp6=`bWR1dh%@hqj/#lGu_<$h^g'[V$[:
%)ltXTe@pX)2^6EXN,r@QK#.ZHmE#ss#cTtCi'<&75#>sE#*,,C8:Ca2/r'PVZd4>Z5ph3'l*)GjG3eIq6^W9LZD9o7*tCsmr@qOd
%R`<4[XSA+@23S-^G@NlG&V4$UHW"?9qZP;/)89@L+"P&m"44T6,+VT5-O#S5?(@/;[30@"*Ci!j379?0R*r9q6mJnlQ./>W<_930
%.#0f'ER)60%?95P#`iKa)T\&5jaAEM@I]dcO93&$R84g/&5bK>j$L";kXl8-76F#jE+F&U3r+q(f9oSt*iWdPl&EMo^bc6b?6p`2
%>p*qS@0ARU%spQdA0f.Z0jH&`j2&!p36H,,3rM>9!jbL3)Q!Q6=l'>k8uD!#in/B,OkgkF'KN[0b0//I7<fZu.@[lJghoFnN,qc3
%,9Z\mkEPas;kp+2I4;ra,sm*B?f?"kHg4lBU&W^@k%9PHD=JDraH`8Wo&Yl_U.=Qi>8oW2Ddl10EH)"#W=1ATM@8uE-7&ZfOW1Z8
%M(]itHSV0o]Jq<>)BQf1$gs`MG-3,'^sA(['T+\cIYFW)Z]8JJT>@e!\37,PFsqZeJkb96A="TBFGTo\Ne51'<X>f2"6G++>3J=S
%3c]1Yd\'A32!DSe?"o*anD\DJG;4:0mWkPE"7EM?)6H6/[?_O#=BVFe\?dD>hPPZ`n>%4uP?)2"&m%'pcu>!r/WT1\6ZUL%A@U[*
%9g&H<rMH:$`3r>bG;(R(S:u.,WIf4i>gYD_99I5c<M_b]3s&@NO0"oh^\=7Z,6/Sug%u./:`!@Z!Eq[b`58M]M;nsJW71>&"`Ca)
%1fP\%,%1PfYjC#BnBts17338c"e+[6=sPfWTNGPbdIG\Eo=J^:E6`2A7n@ie`KJ]+m")=h^+TX,4#r6>N-m+g:J!,t,`7)#/s<c3
%Y'*:ai/N,p,PPZG25$'-+&@i-O9f_OE=<%PPIiuGlb'Y/ZG,=a;NFf<O0fO:M1@`--IUl;5%</1_m]+T*g%_ipKa>4"Oj(PE>-pC
%!u":^U'rI&'G^mZQ\[_KY1a>9Wr^*YjnI7a_uf*i@G<"!j#B.n5rpHoFB6r+'MJj]Q7=T^7ol+&>koWURbRr\iLlqk_SN(UT!0R^
%k?j8TVDP5MU.T-#o$`Nt1n5d`,#qH=-QO&3n5D4X-r&0OF$:M,\[H@;6jt+gM$pJ=[:aQ63I.:6T0.-^D9qCt)^EmPNT^U"78+pc
%b8e!pjX7]!Gd^'2+bD#J?FVnb#'2sf:Zk^A9`m8i(C)rGlF09d+D2="MWI,Ym)b%PXX(aB('1%43Pe60f);[":hST5#?Z253$:dB
%KaqohmH7Z(`ak&:NS>&]PcS%O\hhM#VL%_G?`9<<C+"bI(3Jim_C'Vdj4VD+j^,6TiSS44Hdq=K]dGaGCCVLrFa%uLL=8^\Ngn=:
%HgU(!".0j+X'bFhLTs4W$]`S'r$.t`Dt+kJRqFW_i+Jb/K,ac6"JTQp5Litca/RdZL1u=UpD2Y+[J=3O$`K<Eq.atHaSsif9(+*-
%_)ceL)OoQ0Mg#F@U^C%IDt,uoX1,L<!OgX`?J2thJh*D$pl8>XlKn&L\0^Th*I<p-TRohS5I.lp(>k+ek*M&C>W+Z^EV.2'8i3K=
%mOc05<p`UK2);E1(>n_kH;UF@=Nra2CE>]D4e&eQDH[dFPLDQZg,Y)c5W``4fa-rMG8=O':tX9DT9<;7,(:,b]QCe/0,5S/#Sk;u
%/]>i(-o*3["OtW`F_]ODN4e_;4l\\V@R4=8bBDqZ/Fn2r/q2(*`"kKNaq0p2i.P>@$76dtU=]S'NSpR^#CX/e+<LX)5VHE6FTg.p
%Mc;MHC-"&BF==Vl&Y$eXaK:i>?rMgRg5gf;16ch&"QBuJLE'j#$1UBt6*5Keegj9=-.WI*C40f`#4urmHGlA?4\mbO)>P&_kP-Gn
%kL5SEdZ6of,[U^!B:7T#X+GFg?B*2^[:9CD)Ua0a;4Q*hGft5g+tZ,l7pc*uMTd1p7,V]&FH_jVPraGmPE1YP5UVUM6m,P@\*c7V
%\eDoS+O`;0Z7>Q"`"Ul-s6L2R+B$KdK479&#qtJ@D3AS&4_ZmR7F_dIC;">[NpuRV"lBp\p4j9'J]"_!rCfj+/d[7'I.49DL)RA1
%p?^s@_)V1,2#uXA0`cjtqdX+\p,sk//u:bW&c]r5d.N?N,,'c+H-k=s`ZSA4'bNPW8/s(mOtV%???U1&kg[>'),$V1i`u*_2+Tkm
%;XS^=KZ'\AOMM>DfE]0dH4og#jU9j-:`#=5L8e0V.kh2O4[-`i&NWn&T$BBIBe`UIg,^7!:cahFX+G2!@H:EN6)%o\foH+G8TC/.
%r8)L*."!fjVl)pAI#)H$-`*'QWRdDjBgaVXE,ac0ER0h9rG_b%J+!E_H"<c1D*\%&\.4_`6OH3IlJ8fs8E\3IA$b_aV]a?J%Ql=,
%+,*?/ope@CGtq`rZd3h.4@9jDVkSY0fM2L2/ifHrC<u)LFD_>H4<hTL0t61Bl#'?>NkdLL"/k,cK"BS(YcH_*Oq"=k@p_ROC',3r
%LW_3*Vb7%O/#HY4<U3@H2;jg&\@dJGF^3m'Pds72Ns_EN8^,#9^Fia*Lc@dHVdWaDUm&sAJ4`GE+mWf)S0&\m2qJBnZ#M6uB\X('
%50XX@OkCcOqVDjpP4tih-ATb#kk>.dCZ:OoJJAR0'R-bbi\m6&@=)o#gln3ZNEuK]M4H6&,/=K[WB/M`g='10nEIBs4V)%X4'Q(t
%D8\Xo]!hk2pttFUBH[MmfrXm-oTL9P3(KX6C(&g:WqN8t)WC.%JNL"m$QHQ_X7'nVkU@i=1D`^:DIO?^T4eVfnZ!d0O=ErkD1R%?
%='HTHJa?<R$fmRNHW/j_;[)E`RKE5b%__7(JK$-LrQ+3Z'"HtOZalc`Lm1u3D2q[tN]TnlE<UiD-#go+g7*h3A70<^h".qBa<V1n
%1Bd:4iG,UNgNJd\_#./!i/22\#jcPSe?6+ifZk&<1,*aJFZsrkU,@p`%T`N%8Ms`[%k_C9^os74dW&87e6_>8I("EQ>201Zm>9"$
%V0]WNR.KnQ;g-E'`"`=lfZ9HolGL!522VNA).#d:rsMCn\cqBqiPs<sT#1H%j#3V4h(X-_Q+05b/U@.^C(8([23?Vr[DI-?[h-O+
%!tKD/mllc]Q9k5%^=eLU+2!ktk\fjo%(8Wf?d$'cS%Y)1DAG>8]7%7G[C%u75I^>168\JOYoCB9N;F/6CN\-j9bIjFQRq3Igl:/W
%jO&TSJo:\G`rU`TQ8dLNC.IRpD^-K%.e8"%CGV`+.<7iKK=B4gEjK0052CJ;RT.q34^pRrKApE5+P[#)7.5;@,dFPX3D0*<A.B8>
%1j+H\egHWZObY&>8bh,jOO2HJ7Y%(h9Gf*5odOrs3$bQ#$O<O4I[>d`g.4OB?+]].GW8>5(7ht*1"R#Ka@2Q^I(P1=KmPj!WdFOf
%X7Aa"$bqn$e[\\t62dihA4rUm31EAQRMb`+h"UN77d/H?lQB2i'FrD6L<M`BA%WuqDW)Vf.Hq0'Mh><cjGJmkS3\D8a\@Mg%5nqF
%'hh*&@*aim4SsB)1$s+2TqZj\/>fb3=@nINP0n(Q/O:q^?8?82^64]e8B6\me6LFjX,e*%HP1%NFfjK,;@AKm87I@e+B^$*e\L]b
%Dc%V%o/=]7Iq2*4D?.C-LkH6JBoP4V2qVOI.6':kDbgb>M%No4\W+gep=QVMk=4TY@!H(bDjc1!#8?u,PLW(J=i"CYFICE#f(W$%
%$BZON+LX=(`sC-dC<n5Gq.=\)b!+afPd*U`9uDP;aL$I@mZnkT%m%A:GnVKq&>WdQP$l"$\#joN_A8\>O-(`U-CIS+aOq7R<Ph@>
%=\t6p"8QY)2'R%F6r:>.isj[bUiX-mPO@cu18i#J7VGGQ*HCIO9Hji^fbad;-Eg.\K8+P9loJKFBB7'7:p/<-RADotkpa0%6?*aP
%EBe+e'ja94L,SC1K+of=36AX\2VJ\q65*9[#=+'9cAAqllD\]=G-q4HXlN_qXCcOkg1H'E2%!f2h63W\'_iH:.s5?7D,9,;.\NBY
%K5-1L[Sl)Z>EGkWKEt:>'FF)fi*\KYNHAL.1n9,@-.D):(;mS>V882#)mbRK$&pO&g=g)WbnIZc2eEF(A%&+:W?$aeHOA5c@MnpS
%BLtkJ1tq?*h#LJ2<:a!S])dG>F.>'`Gg4[`d6H".2TmP7p(ZDi]AR[CUXGk"4]ek2aKE>:l,^_'N!I>2`(t9M."`N+QAtQVj@4.p
%SF7b+QG#h*Q$NeCor"+sCSN'h0B-(gfUhY!%EDJ(l-I`HI7HW5!>X[CmQX,-FI'fc:U6Chr6V#G,-IZ-&im\Xe0`b@Bu*]Oj$j=n
%8(AbBT#2_gZ5o;"7KrplU>D'"k@^r#+;&08'cmb1C`Ws%knd^"((')cjB8"h2C.P#i6eSr26A?3"eCIC-c$XZjHaH#:#2`rXGcm'
%*'GKEB+ZnOl57mP3.[>\::2M!N_4?CZCF@\>u^$]VDB##6Zb9(K0'G*6*sYI;,J,73NO_P"%q[U2Nj;dR&m`PU]*kG06MiuWj>M0
%_H[/7T+Oi)&XhiR?&FZ//p1/eWs_n;8cUG_#88(Q*g4;5,f/4`Z(#43i#lt@;TX24_H$q&aP"%"\,CHKDn?n/$MDTK,<1kTE5$'>
%Y<tfn0X7BZp=()POtDLj[MEt"hnmDA0CP$f4gbuN!GBY_:G%C'M3;$T$>;]qa?::8`:50Ab&/a1Gk.'lOsP$8JMdmsr'#0jPGOnX
%gA@\62NUDJR3_M$a52>GJYdl=\ND*\$Triu,D&fL,U'8e4ODJq$:sO"3\i`fhB86&J8n2td!=,%;W*MD_$qBR$^^MM\;?`[O.Rii
%EtfT[UaV)7,+V,HGt1U`M%.mSUL9VF*_N244(@Q)`2GA27Q(]Th8!rQ/@&VK#g7VEd2;DZCrBN_\N:8+#9f&Hq)sWC`i6)+3+G)&
%U[!)'q?"qSPQlQsnVh9:a;'mLS>1+cP^10mBgt5JA'';fI:*6?:ehA;8c@]R/sWRR5U1==;`Wrdg@Kq:?L:H)_h$#8W4"ss]I`rl
%6JE$Q0Q59uJoPZT7mrkENh,FP!U!)BqbhBaW\?-4WUrBNG?:Sai($::DQq)4f+l?j8PuCWm]:1NgknUn=#:1.?><,p$W5&L+o,Fb
%)u?huWDUpiC9%4&ML70Ca(83ZLPX,RZ/l(BN$L98`AFm;"L23BIPc&<A_r$!8d[^6eWO=!$TjJ'5Y=SI@e.HC-VM`A"i6uo,-;5q
%QK23X/N?An=/A,&Yn<GEJ\p_UM?T/@_cau5BC^5('(04H?j%N#HpRaa>+9ZI+An+&F@msp`2V1MJk3_,QK5E(;d"-h,ND/7R0go/
%^QK%?Kuff(%5n77.LH2&cCW2s9\<?#(.jjh!M'fs8um0!>^5I>_l9lYTK!`NVUWGL(Bmch<@KIuLF60+bJUr_BdD3)5c3S.8YXW+
%a=V9!Ligpj00$HbEE@fHi0F178ras>]5.Y'%_sq!$E&j5/N+oD*%3SE5c@&h1s]^@?BUlicdq@b(+7f,-OoA-7J\<JQ/33S)?XWo
%?="(Fk28[f*!C;D6Ad!>-'MiS>r9Fh"Z%g00?Qi;<&7k<G[G^Lr?4b?)\),ge1.]TC-ZNg+@s"r[Mp[nn%@[ZhfJ?R\I^:D/gZ;L
%^kTk3!b"Q9Ofj3B+oAYMM3Dl@NFbI.]?'PK<8OrA1-@:,8G)65l:T'f_a'?Gb,[,VU%,,P`U@ScW?k/[0!qG3aCuc`8LWT,eZ<mF
%IaB!8aH;=5YPaup\*\kUl*.MSo'.Y>rY14m1+dMRC9@h41^DK;.nVulR$:pBFj7cN#\rH<3U=$^0;Tli&Y$dm`\,h!Ekue-/?WLM
%b*o%OEFLMK027HD_E0[#U<jINKfni3e1(4d'!GJG)Q"*0Rm7U,:kFMWNE4%*LE\qqEC=bs1uNDN"uf?uek)Ho3BNA^)GHZOb.2\m
%-r?h3?F4l%C!m8R6T_Tmk#-g__Ru-RC>pf_44pAm,;=mJr.7Tu;(?^WOG&FF+Ek['9UmJjo/N,VoKAq>FkFW*U3)+i>U1A'I`Dr;
%>u/;618/Y<Ym%)nbE<tl#uC0j:7/KVgS%m]qseae3&oHm=);msFf=5hGMIRsB<=NAg;&CZ`G,&b\H5m/^1c;)G[FNYPl)@u\Ccg/
%.B^H1_ViF?\^k?3`J$gaEWrW.1o2=dFG<YsM*jkNeWR2rWb9nm*YcWUNU5WNlB^@V"ek^0C$]MlCIk=M3AUsKa#B'2d[R?U$sog$
%L_$;)L,kd]%Zu[A?ShMC4X\k@]<G_G>g/995ITn3f_BPjLLfpfh\pe6LZQ!5<Y>i(e8&3ui9FV/q@`;G)Op/FLJqMu&0YlA8'Tg3
%03ed9o27O#M?ese+WsVoQUmH+Jm!"eA@S\`K`dYr>??%+@u#HL*PlGP.,6FF,A6UUa(`!M?a`J<m+AQG#<<.DT(n(9&AU.V=0BfK
%^n#N^HBDXD3u-DhKH,.`:<VKt&/re'/L?lRYjM/C`N9XC9L?Aii9HZ/<65lC'C\]E:'1soS7h$3X;l]s!ZgUJQc.,P`'VW6LV?#1
%MC=i?PNbN'+Q5/LIrOfEOUk<Aat]4JqI\f85e@aa)0PIV5N84JEo;m4@p'&gMoN!L)oG[<Bfp&;MiTC2o2Lhin0P@,:^oO,HkA[c
%C#g1c6PInnEQ`nH-DA$`n[+O-JSDMR'puiAF,.sj29DiCPt.=Q1:$WCU2W!L7?5(IpskQuLm2ciVO[XGAs$HQfSq+77h#Xkj>;q5
%m[DI1jV3p06RQf`(IYnfFV.@oj]ZEP&KR&m:/mf"(c1a-UBlKO>_%@4^6ur2fe+84ZVW<!eF#o/CI+kA/PJ9V+mGM`fAKJ2HTZ%"
%OoZkba:1Zn>2t0iH7)r<KO7tmfa(ieJ\sM<+:Id3n@17KcujA03h@%!&_.;/&_fTQq>sCqPQH8@YrreHb7/WR8),c.0J%YnENDR@
%SBG\njO`I7;BS_k0V(Y7UCiN<)_X0)<Hs?flaTNg#daFKV@5SgTYe<_OogVKKXXd`C!VcjEU)4mD"LJoY)^1G(e835nH[apb^m_I
%O?8U')0re"7mb%)cK)p%U;XjD&#ug'(.X=)ApqU3EC#nN7AVNM<%ocB7i'EKA0s9ZHKZ6E;[lM=o(0d'*fuPsns_]V&9QtFihTi-
%GoSooi/G1lo'-fIds]P:Na1eY/bI7%HkMH&G"KN3+g5r6Fe=+op[!hMk@S]:KEI`$8@g854j8r?oqfG*<PbkX3VGW_I68u]ERY/K
%0o,+HltTR*[/3J/m&;1+KVbdSS_CP,+an=uA:"BJS78N5fMQW_pG,R:<#j1<[ARVsD,'$X>#8tiUImRoq8$r=pVq;An2*Z7/\R\)
%^1U_)f[5X&gj8V5^0"!gO;-UtLQFb5[S/-=YjkF+4e-u6r&cta,pP`c%q0_!&ecVriLJq^b+[CK!b]H2_\DNliAcaoCJgX<K7U$c
%;+dHmkp%EUEsulcc[07<Lf4@gC_QqAl$\4EZGP#kVAHCrd5)&J>]O._4)r6@OP%7inKfEO'!*uhggfA?!BBgQNrUl+%LeA'>tTOG
%"/HO<_B4FA?/`G?#He`Pr'M@b<Dh`6!,Gg#(a,n#R*6:uZS!%TO%NI\TFj0l$TLZQ"$ajH<HD;4"1L^`Y/<>()`)Z8p8E"sb+9[Y
%j.mGF+CbA]9)m,ojuq"Lg@_<#\s1oq7g9Yca51Ii&$B02MDY\hpktASaf&0HlAg8FP=;L-_0'N\Vs^#Kpi/`%98]uS78#'bZAm#H
%4['6mNq;Rl/OqQ//@8LZ91l0.L"/gCAG.D0!2k'.4>`"/>>Jn>s&h&Z?e`_TXQ*^TN90^<9#Ig9M5(j<N:m\2E?C9<Xk9J(ChWNp
%KD.B]:0-HHU$`Y_F0\>J;sQulUHf&S#S;u)dHilFf=!>*$OO#lJV/-3#L\4P&h&(e$iA7n*%<j["Hq3sSOg;$mi"`NT<jc1WpJKI
%@l(u2CY4<W;t&u7O,+8qlpd$NJjcq%"3?[HA95[L-^X?%&5CsOWUp@e$7H@q_Budr*+!aBbDG-UQ3K*F:6LPSD)#%8!%9O6Kp0ZX
%f$t$sK?in3#j.:piLZeY,hf>ZM'6nkbBRF8EXWt?Tt(@gVj[!V;IE6\GE/&0`5Cg_>'GM.Oo*uLA=tD'BUgOPVX@!U,<<dS"iP]Q
%4Oc=\jc8->SZ\(kaF,;*ihaq#NA>MkmbH=R<DGk.2@&XjFnPC8#-VD_%_=ZRF36Lu`0QnYpt!tu7kcHl<Yt!`'2"%H]sE$?:#f[C
%G3?$bO29s#:;7<aqoPDD3^8O%\0br]5LEtha/[j[L1s&jF'A$Xg)Rukp[kN2D-XY,^@tggZ(qDk\j%XgmMsh?"=$`sURgTENmH8S
%]?Pch?.WYIi&8%>POB@=J5./)MpM$U;m![ThLBr@VK+B]](9=u7ppBTk5d-0flSk5Ou1VLhM6M]^%5"cHY0\B1fP_!SKE4)e`Pf7
%^TXRH]_R-%kb2VLjtXU18jbWuY9U'<0Dc7F7dW:dTO%9Jll?lL[gI^9_$-`saGqdlWCD(<&R<koH8Z`<E_dHJe:O'r7U@3]ND'V\
%N/5=4:0)<9Q8?9#_q6UW@luugac$$c%FC$-+@b9*l:U*=`lGs+i1>HT";s.gM5B\+X<X*\CI0q0FC7E#Y!&!Ya:o*u?MQR8NOU#6
%!,Bp@%gIe/e;(/Nen=_.FCUEJG_A*Ogn\tioV:C`JFf0JQac+;*E][X/aL`F&0OFF*f,Rp+t=2')\[Rp*>oc(:<>#_;918iIgtS^
%&aR_]S4SKYS)D;QQ:\Qa]UhY"=\28=dI_Z.82)DPGN;Z<3HqPJQ%F/K^o5[#9,7\t!e99p/R*2e08E\*lt>,)I"]saiWA!lZca&o
%JPXlh_`96K?=6e!9g^et5>,:+RoA!]Kkfqu0#Tgh%c\Ej:r]V!*auUI0&f0EOaF5fUiTSP&J^?&Jg)`(!-KN0?"q)VYUM\J]T2qd
%f`C=r?IkO&W*q%G$8QuhU:=khjNARS(Hu+L09H'#-7j]o/C>\rDPsG:GLobj\B,oZ&<b0YJi`!<)+im7F94WEGk")uaXI-iE&$o?
%dO3P:oULMNlftPQR(ZoOmsC.C6cXi1+5][*BF4tOYE5f`QX"c\oKs1Oqq[+dYY3t\K1]n8MgHnclem&c6(PVsl+F$E.@;seHuJ'O
%%X[7d,*$$#K@'b4=<Kt0(,mB=B5.!kTG[-X>\R<<N.O[.I%=4JBLil8RdW`.S@1Lc+lcfaIU*&_6MM;<8ZWS3M<J3$FFKCU5Hq.Q
%SJ,7+FNYbNe[fP=`"AAk?X]3AlVPnT*-ZTX8]kF6$O009,3j%lNd'E(<To+cT[(]_(V!Ik;c+tPn8k+bI+iq]E*"NZ;PL!^,B?+G
%PI`:g?W]iCgL37NV*UZA=ToPPM9r)VK22/K2fdfH#**Pm,9%Q1$A;23&pc!OlOHD$Q+T$gp*-JOj99S]a<qi3>s^F/j:=^HY%nXr
%j(2j^gQ=E.)i"LQ,1r=C>Xkk7@s^#jg=]WLnEFQ%*?.V+HSaW8:#eNJGAekq8"h`]T`p)8A=`6#4ZR%-eZaM&Ts/01m7Y?m^u&?'
%H`fC;*4OjFUY.2@kfL]JYd9Vf>\R;)d8nokWZk9$C/"#sKf`U"A"1sh5VeDF.*$,"f%sT_Z`6=i<,5pgX4H+`>.=Q2nLL^/XbH]Z
%FG;f_5TT::KtORe[?Cgfe'3S.DRJ=X<!i_SHXY6%B0tX@+cW6U(s49mNHJ:4ShCQ=V]#tF=F5tb%dcaR]@4R_9njT/$GRL6)*&H_
%P"a"ZoKfdPh<i:&WfKCX&L8UIl+uCZ,(1-IZh(8-XYdc-Gbg_`I;8:Yc-Bd&P9"N-*O,YbR0EgiLuHi@BflGQ#tW\F8n5cc$?RS<
%%'<6=][%J<&5cQP0R+NSamcRf"6Tu!#8`a81W#p`Z!1m(Fqo]cE_f/`6f`W9CPs44#N(ZGB>4Fnl<6U";ai.nIcqOcbDR+u9((>7
%S('Ei>'=k)D.3A@aDGIKF:h>_6a83JXS&t=Tf_ls%6=_KD[[#3Q0c/]G%<Na9m3o"fPP.e8D/qPn(Jt#DFKfRl%a/MnU5&h\WT%'
%Q52@'-P'>oYj`:#js+WXV\ZD>Ol6^Y@sdWt>IBE^6iLia7@;hk(("/9^OQQ-N\^6KF3_sj#2GOjj[I.05]_$VT?b"R,u:/*fY1[&
%;N-s$(qq-!,)=^M1j1#$his]P\AFR`BLLe:9^HI2H.eZfdubmA<O<s\8:)*37-+!^8@=35aDrX0[N[7GMk1U,eD]9N0d%6WqKP0X
%KG\pjdk%+*c.p^/;arr7qDn+P9:ft\5`+0MpT[L`<YI*[/k`^t7])b.,Q_1CBZ=;81"==$b,Z/i$St+B,Qfer$6:iL8-%O:_;LFI
%,S4!X`GgQh)d,)07gMQA0/K_dgtosiZM$bEGHV9)NARZF\B&ZQ:hgO4N79^SC`!P>T3(OEa.p=r\ue+0EC^@CmqDqS.jSn/7s7G0
%DA#uL`le_<OMMh1'8(k<8ld!&+ZALsKWN=_nG2QuM$RsA??#uVK:G7kNEAu>0=.QWUs=YF1*(LOPN"$R\:XO4.jn^TZ,*]U_enIG
%5@3X0F@Jp+r-Q_GKQZRAd.;-F7bLHJG"<b`QPVi_![=J'&38cNOiMMh60Y(['K@u#7YX&LaTL,J@RjWa5Dqh'O\tb,D/!:>n@*DV
%`NJftF@K`"($8-VfNDG.31gi-8:[,<hSXg+2R:Bq,2a.!7?\<tbI'K\5B7-g:%ib@Q*96s>9WYKG-p)HD.G%;"[5XdP=R]1OM8@H
%\V5-k,cH<8V0:(a%;L8d"lJ>oiPb$YESJR+F,lFo>&\MT?ol^!OJa>5?ZI[]h!?tN%BM'?@I8?c)76j)d<b:&R?m1C8kPYc-;hZ+
%+;VX0\:oTegL.2FNh*RHNUtiMVi6iAE\._Krme.R*SDVc<-r:%O^XRa4.T-RZVDD&<Oae!d84-R8jDRd6.2l%)54)bH]c4$4(LPB
%?%M&(ElgS8>KP3E!cpgD/PB4M(=aD<NX-n.b\L"l?l=tAp,uOkLJ-tfm#FU<dF1nr3D#@TSr<^SFJPN?!L:>(gX'sj,Gh#D[rOO2
%OhX3A^q%UrR!%Uf<:J2#Ol"lN%3O9mO[,k?=d2$kbCFEij@"T4;?U72*/5TT8!%]B9'UDS!,:d#r4F7!lIJSS4gMEI,`D*pZ:B2$
%g+pqs8<L+@+Hr%n-Y-VFAJNaU7dO)V7#;^&_N^%M0EnoLaI/JfH,N@VAFQF"5k7r8_dsFj`/n*4aJk$?c>[R?"Y[j^RBFrQ)5eUA
%T<Fl)MpET)1?-CCBQ,^BXgY-.0$mc^d]NdOQ>kZ!Us7tXe3=R?NcNW<nd'jEVC%IL;)>=a'R69*ijFP.*N1gBdh59.Zn-GB).!r@
%Q:-:=lccY)q#6"9lr%V[AT]D!5,'DX)tHnaV_`@]A:KkKd&TK+ejcY;5ru%\i?lMPk4)JRQe2V=QTtSGl\1ETDXsT\r&I<R_t9Ye
%.>%d'4L1:`P)C^:ZG:^$G@rom$Eb="'7r`_2Y!ZAC%>l8Nu)cEj6Y=;=GAXu4KQiI,oLmg.O#^9cIn"-P+$GB0JR%([/8!m'ae/a
%VL#`$8QRr`]F$Q^LQUCK[u)#X-oE"V;H[4u!0h\l=r5[Am6%TmOb'#ifc\BV(V:O#:?a5]Ei\l0@8cSN?[*r>I_!Uf\gB[mQ6g*g
%!hVhTC.qW!E<;=q0W<H1$dotN/M<cVqGR<?!'IZ=[!(%p%S%'k>_TXC-`Q$6;-^@cZUr?aOh"9haG.s#i"!m&I21@;,cPE#P`7(t
%H$%i,giB$#OQX'LWLQ#A]-HG^6C$tBAu0!u$sA:^nY,H"DY9O"PIH"ra1P*\7CN4C'9P#Kn4[&>AN,/Sg$GdAT%&R&Am4Fp#<"?R
%]\tbN3J/NONAm]1'r&loDMB/7(8SaR71GDDe0_=bOA`*W![Vc`\A$YO&st,(k9aBMG1S!*5m[38/c]Et93$]:1c:2.S@o$K;NZAq
%-k\sY7q5dk134CB9fRCCYKX#0?-ZkK1Jt[;$,!3?JINk]D!Z.m6-6V?".Enf2!5G1EX7XVc]'[ui-#JmS0eibW'sZ;#L(dF?6,B7
%i)7Zp+l%uS#a5jf+[q+o/!<G06ar3E3$*b`;dYZGcuM=l&>`?_0m9OnI"X1(kAYA"C7;=Uqkbu;gW'40Xo_=/@H;Sl)m//qkec1#
%m:8UV16*_48F:/;dii+qZj7fRWs3]Ab.Y`oesD,*5eih/CK`\C5-dhA-fd0X&o<6^RtZcYU/I6:N^f"$>.:"8cl,Ijl;/%gjY9`]
%:5Ls4>q%cp@aMq@SB:TFN\#Q#Z9-WXo&62+--Q@-6O7lO'>BfK1=T6eJR^f&8oPc:j9nW*T+UYDSj]Hc(;u+<KcL!9#G9H'A]qhH
%U/UkaQtFDOQD^%IXQ9VOUQ\EK^0U5d7=@9ckDtP\O6!k*Bfp*k-Y;(k>V"XD!)2@'\YJ3><4O4jN_S\*Ls1QJ4FM/n6P(nZ,%X$f
%P#dN;7DTkQU';Z0$^hd#jA/h7:+A"+/5@">ns"1BO*EIIGKe4oQ0KQ\EY=@*6cVM]@:\G#`@rUk@%69E[9RFPiWb<46RllM>V#?M
%,JlB#+A(MQY(7D1I1nCq38C82[i;iqcuQa'a;LCI>P6g&(LOW'n#-_FnSf@;&r&a]0CV%OSXt[:&EDUYOHGsg@+Lpp3e1A<L*nSY
%1j^:.%N2DN:#fX>'keh+9Pgru#9Z'l4@4cEr1*(Qfa'G;-@5<9D5j5!P@uVRWV!"F3<Ei2n7Qo>gp)JZ#nO'sIZ>$S2F74!:lE^-
%T"%Vm'YT4<F=JE2"I[[hQrF&60LpQl$*O$1i5;/0KKqL!2-Au\V-7<i9mAST?4*\FgW\n"dudE0kM4)#-kM11IX=PLmMN'X9]][?
%'k#usmts-LF,#)WO&Z&SCnTDCLt6@r*@r?KTX37UQZuLkdkD6p_%R1QR/kj0SgW#`Uf4lWI=@cpY^Tc!A)X]1]:1C'`\ZUPZ^Xqu
%khN8"W;)b+\A0)G2VN&;'j+/\37'W*HCkgJ&Y=lcI8Ij@a>>mkFNh:n?LFc*m-:$aJ_[XfF7sT_C`I0Y?]$G%5u0u(@,kI8Ker*+
%A9\T'Z#$4"6\#oD/!@:RmS`\HN0=^Z(TbH\YHn^I<`%2o<>+ol\PP?"ChMT:S&0co/0@\'\b]E[pLB<TjFV^_)DJ,%?r:X&^>s_S
%pHiMn!d%1<]tgVueHe]scC5JnX46+bEKoBj?!7=7q]I+t[>4\uh&rDj`I!/KZe'(m'qA4^8njUe;ue=#7u$eL$V7W;o7>5>:dFL(
%gj:%=\>(2>6sCgZ(:0sS(o'<u?3TQJ%R`U_Jd:p2Vb2.A<WT)V+'E0!4KNp4O7jg6of>7>$TqM\AX6!+_B">W10gqdJN><d?JnlO
%9g^cn^jK]1>`Zp'XfsdOfJYU=Tc=m(6:s]b5h,.TqK!6.47I-"'r[<P4.tS35B&cJ4k>YIoq`gAo#QL(X9)d%C`sXP<`>,Y\2i_1
%='0#^>e#nLG@V:Sbq?C]ncH@?A7BKiSt%d\W'Njq0=KPnRQ313QkA7H=q#'4gl^8IQd)/M,!(A,Gt;:)?(`BY_T3qta<Gj*f%!n,
%0IsOD;B#k?D;"HPoI$!!&XgYSa=Bn8Fsgi_D*J/[e)3$M+71Rc5b]eem`=PuaY?,QP?T^0WqN8t)WAjKKSq5u-Pl,03V!HM"dl/X
%p>O$"oYel6peFXG&(,9,'s)J^CM];^<=l*"8#A[Hdf@pEj>GE<@W^Tei;%*kCTB1lX>4($6qkKqm(fV&F]'m5_g<n?g@;1ba']Wi
%)ZGk!QJW5d:tp-q:tRG7[Ka7ePsl!2-hXn;498B6!d%Id]tg]"R>,E@cTL/8S6l>A9]<B*=Voej(`%ng,)Skk`\*s\&!q7\LL$n<
%S=J(@'Hd6-?V(.`*RpA.ch*#e'FfbOO]A7X8Y[CJK-duQnk><l>@bL;g/0MMWX,?Qb^W7n3jim77VLboLL&)#ZTL2RQgDd19J-Z'
%p-6'lQ[qhs<^$lDp51-c2S^c!IF7R_AG?uNSB,3>O3W0EFU7SN6!/q[3-$`saDa"Q$4A)b@M_EVHoRhd`W.bLE.hBeV!6G3lPt!i
%:6>mM4&]Rs)Ni=6#$"^3Xu&NkGiji5n`5#S.?W[$E2&X6&mq(&\JHS2oTUAr2'm&Z\!t4?%X$2b3&JfV91,?p<L@5uM@3Xfa#/fh
%-bLD+'n@";,`A2R8E>JV+=^WiK@Fkpo;Z2h2%g[,D:=&=V)u6BO2s-f'P>\9*p=oJH9VUQP;FVo'a'e&$R`WR6kKe7iSkd*Gr)/>
%Xk&sCC4so2#"_t8^fA4>YIM^E\F?U0mXNM6&(rd+39.Q"5WKl]$IhZ#28YOBFFg3'320^#]*VQSM5m9=U%(3RQugkEb`c`ir89A7
%6IVs9'M@cVQTP%=Z>Ik!5i/n(o<sAOi&Df2;N1J7S@DClD!BrKLk9^7^pb]g"KBSG5Uh5=LF'Ka8dGE%dmZ)1?UWs7%^T;"40&p)
%V&09>ZQ6Rnq\*=/"e*TOa=iHW=&>CE3"2a';Z^%W6PH!a_BQN\&eEKLlTLc<'XVqElihR_^/RoR"3_S:(O\gZ^7sRiKXNbs.a/J:
%iAYSt5[PKGD@r1O/17(YVcQ/G--VTc=`/!\1oLacnuh-kYE,8XW2lcVD8nUb?>ci&]4Jf$Uksam^2VZ#"1&?e\c%='A!FhH4h"%-
%Qd$4`7&I7DEm(a)iQk(&^NY<lU>N8:,Adh`9m4XsO2Y*2.'-gI'k]2)X7`?`)Aur)@qdX05H\PXa%D&lDXkdn49XhT`?AE>&EVg&
%k\Pl5:9FYA;H4TS/XGm8h/O>knnu_fE:Qo+n=_U"Js\>?+t#N(<n8I,U;\?[PQOX^2"*cGgs\\]/N9E3R2<qm.l4(J;?TV&<"n#e
%khVhjR`N<')2e$BUHOWZ'\$q:l;05A`UPJ\MG<)@<HS2%,#NI!+HfR\R?eo?0-H[sTQ($RG2_4tU\)[,<IcPL$K(E/`sSV(N^q;a
%3EX5YX&W`kF/:-j&Ot9gpEp.9jB_-VY4_3^?j[]jh*=;]>`[YdKFDk6(hj,a+-KK#_sq!q/]-8%N[DhJffo@FCQR^3D+_]n(9/c>
%\-d#pBp`XnEpQoR.(j1=#pHJZ]Kg$=HX0mB%m,/[&=DX"W?'/#i`T=_UmdV5Jt?VW7u"+=;qXul5.<>U[MZ.&=<JsI8uNU_H6B2e
%77::;H!+u%<^7Dj[.Wr8[^?TfBF5i/PD_sF0MF?]gfMsV'Wg'n9?(22UkZls#4*X<d)9@32q&]'adF3$Z-]]eASm4ukifV^T\u$G
%T>lf/oE\sp3etcm8[AWQDpg5VT#qY=cL9t`Hb,"hf*2)ZFDW\XqfZSAn4=/3<h)bOO%VpmNU.)2$,g]#U%/e^-p>ohO;BmpLB\4E
%A-cs#(hSU]8*!1WUHN(W>a/@1f&9cP0e<,`QO)_%N#aEYLQ#==Vm<#cbSO-@G\\JjrE,^2>k(^g\KJ(*h(Ug)3k;P,>VPZ?ee$.6
%^)'o&4&]Q:4GYVA8.Rr/5B<!NL?OsnOIFRk3a?F=[F$!8Y,jui8`J>tZN>ADl7'u8!Eqd^6<3dn@l)s\h6=&%5mn=),7>^3g5PlQ
%Af9E4%29*/<F4[L2guLSP8?>[0eVS'YgOQ0<M=+h./_4F(\,\3.r@3TL_n3FBu@bq_kP53QNXYY%8,bS"$D"Tds5!+;h8XfYQf\'
%g!7S^G6tlH$s5VY(:K=CnUb@9+HW(X?ZN:Ci@rL`ilPn8OGR*Y\T.PO/j"ADrsCl6("ZPbR9"9SU/sN!]L_:t4I%f8r/H$5UPe\Y
%Df&\l09Ee(505P:3X:R[$g[-CLf&)1Dk4Z>J\LuhF/XH-UfM:qn=5FoF3r+m0#)ORIK@Of;r$@I^1Tq$;s]JN5*Z_6l^a[IIP<\+
%G]"b":A*a7c^dK@_FXq/WS[JuQIXhk=<e3#TD\k-X#mti1dKuEk;LZ"KnJRfI\J^<P>?70_gCSF%Y]dA@rCbP^Lqk6JT#<*:UHUp
%4EjlFa`[9Wh_VBCSpdA<I)bncCH]hFVngb!;7PJpoC#1ZF.VPaZ=1Mse]D,5>Xl)mLAB;hq@@tS*NII#55)/XHi>piG8[3l%pQ)Q
%]F:]h9\oX1pTpu1T"W[8fQnA6"6,U"Y5f$&]\@/%W(\]ijs2#XKOZq_A2e[6H-A^_/V8<q?gc!uVC/e4+_r;UOS_LZ6m%DW<;Q85
%eq7c4d#Ld=,KBGWkRi*bnnCVV_OKnqj#OG;oHGjqB9GX1&@tR@Gq]R8fB0KIZ]8HtkgB@=E*2dn%Ags2ILk'F*Y`eZJZBo-Gs.)f
%dMX!^*$h-)HU+(/p_'XR',#+G%I'[mdok54)?D;6`E):X*1I?0*9D_/JD;&ne0M;]V5Q5^a[kdA^)o8.T''up'qfUlDJW?i[fZUF
%kK&g"qT'`^/SN1=U9@KPH's)jl6,hlBB(.9$*mDpG%;kSX9Vc@W0;fb^`2#K=B0ZWYSo3TJW\R'Na#Z\fF7ku1Et!T$t9qr/s<7*
%&VW(Wfo.m5SJGfeYA.DOU_18l@pu9pa+GfclO',jGuS2)Zc1Ak#Dom#o-;ks7<U;%lsWgB81/%m7!7*tR$G@QG@3LQ5MHN'-7`nG
%lm`k7T'7_B>'Lqq8H#eSIb&a@/7&ujo&Yl_ngLk,`nJKAjM$bEZ]IWZ[CiHoC/DQ94F8tAlp%nZ2B-_R\RG53RUgThI>-IUU`8oj
%`58R1(1'6I1*d+aQ_5$(hnSl-efi6EYCpRJ/ge9p@dK3HC=k?a#&_DBh-V!Y0C8uF'uQPs:5fB><,$e02gGAaNgpp?^]8N*l!NUR
%m7Y>R_Nt88/4l9(>\1VX[8CoY0%ZL!T#!\t*Eh$Hkib<q7:)P`bUQGejHn:G+*8EQ&ZERpEmSf`ci^3<Fiem*PQcRf9efYrfZHO;
%lu3Hr1*+uNJojmhLB)LR2;GI:FN6o'#Y`.>YUWFI(<$WAF'[^FSmttV!U7*cQ];k"\Wp]*+bcToFo'eY"`Ca)1fP\%**\/V`uGJm
%j/_aW%dYu61'r7!,J5Uo!s&-0D2kbUL;UaTONpS%!fBd'fZe]Nm[u2^h/"UgR&k9^niHJ/GP<k7=E:*1dNdZR,&XPSL)N&QoLcjQ
%OdeIJNeqNr09H'#B'rtN_Fm0k;4r2T#V!:<Oni+g/^V;n,nm00*>R8J%9sR?s-'b7mZA>hhHhIe/"`Y_c3]f_d\X"NNaU^V&qsVa
%Hgd@>4(PuB2N<KC>BtUjh8Cp[r>5[K^[m]pY'cbohM0)nHKcb&)#b5BZgNu+VeTQGU]J)@%lc#t@BLith<3.6c<CBj!sQT]]oX!7
%$QejSE-UJ^;AG^CNfmnYXH$s"'VGOuimhLHUHe7)CK'f#/i1fi)%0U9>;m:'B/[So$VB(HN%.)*SKneeB$,['V)q/I+]C?;H!R#/
%.NG>Z,Cj;E>_2u$=@/&-%S:DB>>Wus.?]:)hF1=T<pNII2;jggI\a)@@F#Z$=OSuCjnEk8K2EI,'DqpRUBePJ\gO_jF$,^%Um(PU
%!L:/b,'bC#-9J:ZFZ7t\1i\s`\Bq`+&BnFk3([`G1JgZM*RY6]_X8%8D<*%"g2#3la:%(COf<D`1`6DIb(ug2$)QCtYk(cuc2Fnd
%\:[#/.h2u@l_*6F#lG`\$4RKh*AQT:7SXf1i?0*6g=]WL0R`8->VEK+fMFV6N-e'2)@m1e973)8q)A_deg7X7[:#,!RuSA6MYfS`
%17U0o_)cl/d[AY^dP*->j\/$6$+S4H\:QqP5]L4HJXr_PNuC4DSh+q_4^@I9@;Zg]F*>I+ft2F-$j\\c,?%7RQ=U0QN`YqK:3\ga
%21Y2XKU4%BNl]J)iC2QYe5SI]@g2/Y`CihU*EZ<fP;>o6VViOV?!`CTE6$'Qn?>Qr28BOt33Lq:gGXsYBW6T*qV%e:WqN8t)WAjK
%WDKA-Zkb3;:1o>ZOV2:2<D?kmitDF_c*gdo;4A'm;F*?jSK:&dnK2^VgEY:/]UNaA)j;!p'Q+Wk1D7pZd=PXLV6DZEP53nLK@1L6
%InI#r,1+WdKH`MUmcL3*)+9P68%9[^&Iit@imE'tO_lD%\3NJfZH8A4OOtKd]n0*)_N@uaY?KHSE%O\EjE9uf1?QW9c4H3VfFO:&
%#1XSdcB&s(qtdAY\@N9!YW=$;03jn\RG0<.NRIbD099?W"1_u!EZD%\0QgthUsH/4$Ho.FP'9p3`Sf+)Z<\mFAW]KSLG1'S;j:];
%c7KJ:c*u1Z1.[8O*jnj,,=qWDG&Ckm@#H^7.5?C?)kSD&e0XW&a6RGW=d+rA_f<m7NGGm0J4;41fW[t6PX%PQ41rD61Kd06+YPLH
%%L"Pdiu$tu/i%Hq3\Gs<Wc$ah6"j$Y#gBD;LT"`4lu#Z'7&mpF&T+OKWgTR%Z=tQIUai-PF/ibq63,Emnri;7ggK(J_qkHnEtKq;
%]4\\H8_2dLgJC?o)kWH>)7hFOH)HaaMH:VaQr&Hg7hC`'>h6]a(;$?$!7eAG\>DR?HlbQ.-*r_Y*#_+H9f,ri[in>Tb*A&c+AWl*
%l!q3<?a*OU6+YVq0*$^uK[d#(8jIW(?+1I0A)\Kj#ml#?7o_%uLP_P*#n_<)lLkioOg0.Ob>lBdE30g_UK,!PCi]qt.;X`b0-5#`
%'sY>*k(OL+/77rCQB]"cTt49JdNc>!>X:?e8b"Rs,!7j:/1\UR6Ofr3DA:f0P&!Y6lq8r7cY0F'Yb"c5<JcN_h@MKPMPh>3=[l<I
%p6nrX-,g%E[6Pc`pgrBJ:2K&]%P-$6!RW,hI1c3q![Bo?\8/FoOMP-=gtsY<==5PID&gd]fJ^aB</-&b@,&&o6C^(dGm7YQBrtpS
%=OFOIK2uPD&Nq^fB-dKc(,)+mWMYc`g.PEJPZ^G[?s]h[Zbs=FS:[]03,`60;QLP^X(]i`Le"!u5-,/JlG5_8/R,$lG&8oq.R#r`
%'cajC,L&F79QG:[.g)$F)A0Abj0a]m.+QUVM?6)M&miG?Jp=WLFhL3EdX:psQ;Of#one9`XN68j9-38eA@"`s""5&.C!OZtZ/=Iu
%,"\.B$?ZIsdsNILqG7i_La_L5`VM@<i$D&<,"alE%kYU)q%Hg^Jo?osS>>SJs$6i;?G;f0@]\X?.ERF)%B>0h"PR:'B')oi<7@MK
%QFnR)<h=ZdE6,H-$'Qn)Q7S>?fKMFY2bGZe^p44,6ug#(r'WI0,4RlWE-\]4-?7Fb8W8!@>8nR@rQn"rHhnNJJ3$W:q'Cn7X5R`h
%g)TP>e*"!]YTF99!N\f)$k=(C3'QWRM*Hb'S1;l#<5WGT1BK.Z?cf'6(+U)DV=AN+8LW7o3>'-LrS/t5Kn!qFSEDl*r^:gY7C[>j
%8s["I';l&OO<Un'/""*m]-eaYEs_.uRP3j8LFT9kNIrNsb,C-F7Y4YpV?Vs72DZh0MDSe5V3um3Ze+3m\0`J;_8UrFPXBj,qcWFM
%f&1\;e)+RCR`-?QDn>:>L0Ds:Wp&A1=eZP`R'Md)_Z#d""SjoGXE+&9'K<Sid-.g)#AKY?kHQU>KFFbi#jh<3!NVW0+2Bg_[ED_6
%e!!$eSEfGgmNGSgUpW]&A/s-ibf96WDn$d.]0[WhJj_Nh8U,A)SDYH,6**`pcaj`N!ZNOL88*gX"M6W,+ZTO8VhG\`4Ed[q-OH.R
%C.j;F`r!CLckGWqG"G@ZR=1fngN_"K6cW2`VR]Iud*um%T/7B)XI`fCoMX$Z_IHUtTLDHjiP@N*@>lU@+aHj5OuYDK!&D,qI1\K6
%3/!P:Yb>N1nXGVM+&,f1+:1RaP9>Z5;@pf0g#1*=8K8^u5RWUYBOQi.B3k%4KUS,(<M\nu%]BZqBE&8$,IBSdD&6q?#.>YcPsYQs
%C6N8$]`L./k0/l/MX!/C&Zc/_jk*i!fn+at7.P0ZLXP>mX269;i0TOdfEqaHWt]&:J:<?O>>VC4`BMq+jLB.SEe]YuD1OVP\hHS`
%V9_[]DiZ!E:--[9O",?sENC:j*&kT5GZ_pWB^Z9f2<:Dr2A;_ES?8<UOl/[M?gb0rE#rYj([s*ip5;lsTgibrR$^qS$!P]GIhN>Q
%Y.[jq%QQ1sSa!.b-4Kh;b82k)m(31siAlHq@H7ju]@V#t'j;majV@9+_f[.1h'tr5C//@pZuWGZ`9pd`\f$X/(Hg'G>Y!:Y$^*e0
%+V^Z-*pP18:+M*8V3RRhWP.V+moHU-P>JM5nGP%-]/3g!6'g$i4uKhZ>&<6?dL9U;<=%lCZG`#L=$W(6/h90,$[:^V3YID/[beMk
%VkeFr14)n4*28EFA'JYA?(aUi2A3S*a`\gD'Mg1]?>Ec\Wo'i2k1[6cQ:'V@d2*Y:3@?SJ"hS*9gp:WZ"+PX2YX@6?OkVuG8MdMD
%DaTODT%ScK)R9d3@iZPD1#s64EQ((nkY&It-Q(Zlb][SeT`uJu15K0G[%>bZQkS"Hq1AANEsQVs3>PH*ek&.Dl34b%Q5$]Z?"t&t
%(aZCZ"1#k5jZ_pC0ss<+\EiX\*-mDDDiRqcW,GYP/$WWAcb`$PO!;6H_X_@WQeI3!O6^,t/@^"IjsF%LiFg47ftp6=F;X&(6%faX
%`%X]ti]Ml'!FB5_g2iZbG>a3(8m\8,?R^#T6('eZeO4)j:ij1dSafR6b92DDMNl]2<=buO*Jau3Q<NF*28eRqaYB6mR>)pARc'RU
%+WbIKW&T3g3.^37At]>:],`pl+m>B8,D^BmM)QlLYGBs+7_r8E2TS\7l2:TC2kaM:UFHX7nAmOCkhHrV(,-.WXq768^qAttST^9b
%$YjT[=9uk<+$MbQa-hN*^:_.i(1cBde\j>q`u=JVa5&9(8E:Is7Nu8SqK$>)DR8D2jnjC-.N#sQef<g\.Dej=c>o%5LRuJgLRIJK
%93k6bCMK1l'W+So9$!al*==:f/eKBO.j8m.cVg4sbsg9#ZWY\qX!YE$XX\-fJ:/o9268AI-X(Q4<A"b!IQ2K3MfU"n:<*p\dimDE
%a`:3<>]JGh3HIn:f!DW<;4q%`CrB/WRqRHULg.Z3=,`(tM4bQ,RP(Ui6B?#-,<F$m/qgFd-tu9eTuc;"=^[qV:N.m"+QGFT]R"Q(
%7S,I_Eknra-EnZ4h6oh//86>jia1'?AZgG6`.1Ir/MmP6'ON+_9L_M=]KQmgNjN&`4`:]Wh<S@Q!a&DHk'1uT`!1bYgba?C+Od1A
%[i8L*SqD\g.t#LO9bO13K[PXcW7ZR(rh+rX"WK)5aC3)HY?&qEL)UUSX-T*4Q1.jQ%<'K-='ua%n3n0qTE_[E=iaKVOOcHpJ1RrV
%2fKAI`O$NO*B*Jf"UFYR2`n+K@!]=coC:+0^P#BCm-Q)R"I*K&(rDp_><op2N@+hB@&'oBl'0Pdn$D->4fOa,=Qdm]dX34%?l0`:
%@`q(N3.!b>(tsh?eQIfPfWiA@`GlJp>qg6#*T!ds#:pL/_OVN3D?/#@_>W9JhQ=b_--O_`0<"m^0*RMH-Z4.77qm/T"9Hr'qR"P3
%-r<r;T[P3e=q^]+no'J$C\`kWaB%^;6rIu=mM11*\')FC3Q=uJYIBX'k9[=3N8Q+$PJSmEi,dg<gd,6]*9;)^Og%$eH\o4pR3S9X
%R.*g9!U2]lddDkJYH3?8Jr5Xg,/$e=\`g4ZCJ"AY-Ycc1>9=kpEco4([nP0L!1b#[Fp@RgC(bGQQ&$:\=u;j2qsAqL%5>Spefr:2
%_D[p"d`Aas@i8ud64/e?1SrhKAj#6jG8o!A8WM%NU5MKdfAcBd5t.g3jRi"9$nO.(m25b$V`O=5faga0Om8tB!@/O`rcXGU`W!GJ
%i06^l\O<@5aLQI]eJ[jEGbkj:p*.6:g75H.L0.U(G@gq)O+RgYKk1t\Tj.45'"8VQ&<Kpb:Fq\ic_^miVPQ<u\)CTM2&t"IA,fG]
%kQ$14#a_+7;,^JFbc[SfEH3i@J*kA7W'Z;.;h_;.6c%o,KlR,u>aYF7!j2(YH]BOQ87_pThB??KEE!Wq<#?&m(21$o>sDdhEW0V(
%Rkj/XD.(6FILR$5?%N3MIp%p/96Ng<S$'aNrW##4,_6i)JSF=.<h*&7hd6qqpBB,e$@gKJ'eu4<`U$Mj"k:P2$s9f2Ae#9u:<M(o
%j_r8bMUs&==fo?GjG<uT91n:!NTh(J5JJh'jWC)nfRPNs)\<B#g>M3<f1K&Ij/cccc?>%0UK)Xak><olHNdW%FqX'3(_0FXJicTR
%fuN.rQAkSY[Yl#[9TfRKqXM4/Y)e"0iSoa:/3C@$cH?s"W[P^GWo!Hk(<;o[h.Sk7o>5$BgVudI(Nh'R;3K"?jVHXFN17m<60"Om
%/+;N)mj:1u7Q(nmIV#D;<B8"\U\p6Do*).[d/!E@.rDjj<+nB?BXT4U5+h/rWWbl?aLas%VU]R!N.tgV*9PJ$\Q'FPS47$-RRC&]
%]#RWF7]l)Y^MLE>H^c';5b*OpM"kqpB4a)PPH5>O6%dZ<3l6dXH?VmSf\p3"b%+*#^KA[/?-OJE_dl(FPon=k``eS(mkL%(,S#c^
%\km>+09a7\m?A:\r84XVfS'FV9^e(j^?a2]+^OLu^$JaN;=?b.at.4"p4[2Oq\P=!d8_;S)k5SE4iDu^3Tn3++`ZqLVt5$08+p`g
%+6TWWoM:*E[U8YH\"&Yq_=$eX0.Nt;Qe/f,n+>in:ZmTgp!10u*WjP!8lDdaJr=WeYL-<'""Sac))=?h:X5>>ElR]2Yd@:30-"\[
%TcF@/&9d.1aR<KKb&a4:a8&$V4Bp2uQ)/Q\HnkiW?3X#?#Rrj_B(8`g3,?91]W(1;(6&0q=+T7N:;Hc&n/IE_6>cSc,[OW:fDI`K
%IcF_4@HmDr(RihhhX;QGYFO4o?rp,YInL1)%ef"=FI+*=q@G[U<C[HREf_)"-h_8@8?<kYU"nH4fOp7$cpp/RA,`^YP!'qX>!6Kk
%c,4q`#<Vs\OZ1N'XE-/KDU1kBa.fI\"3-1_mba8TJG/jS*N_M$iO$=I9mnfp](tAc`*RiVgc`^X&*oQV[s:.0A<)Yi2k!>DY^UAF
%__+6V0!Bgd]3q7sR=HU<S!Zh?L7!+\8F>8]!CZE*&crtAhbHLlP"c`F0"']Lc)C3(:J4ePs,'7h&=crnj$W!NSBfC91]7_:E=MH8
%(<q"G>>ATrWG(hj3C#t+I4_dl;`uAcM60MZ"i34#Zp2!oRV/4j2*%8P:t-,2T'#!Q84\bnkj-9RBJ*pXKK+`d^^q&!mFZokY_%JK
%Tkp>"*.iX;"b@a.'l`n*\hf''"6>:)6ujsPl/N)t!fKCj8q#[,WHUOa/uH\Xc8268T?k:`aD=^pb)3aLT.@N^DmHFr6Y2oZ*09p.
%;[IMOS(_`]WDQK5:,@2fFV`;piW5@F0NePm]t231>,!c$,pcPZgokF&RpZ184R,ZKA_g7@)G,ehG,BM6PiUp)_K._S6mJ]Ji'lmU
%E7ALk2pXX!?q,iSD<b*#HI5\7O"ML_JBJMt%]0&DR5@:1g'I-f=5LWu'80H9B8=Fe-n9=9kJW"r$E)Wt7;MI"r9)j@'bJJIUT/s]
%hr:Qp/]\T9eH8g$,,IC'G/k/d9=hWV[c#(<F2f(to&nLmQL8))0bF,5hRCtghsi;g6jeJ#,]QU,o#Q9'3aK(((DFBFGfN_F@j3O1
%G\O?8qbC'%bJ@n$?0I31DO#Q-nSrp1e$->]+`gRoQ4%ltKD7cgnf+4QmuHTY76*8WECStWHf_!4O_s&^*bRTU^lt@R2U0B!aDZB9
%G'VO^rMDt@KA+W<>%]kP\lla]3B9#'S[h+h'*<Ten#,[+GiZ0-QZB:WEIDn>mp;=i&*-S7GH-'peU$I6?2bsteMBB]!]qY\'+/jE
%:Wn[`oDMuXUrU10FqIJE1M7cS'#),l;`J#6;U"<2Ois*G:3NJgH$e5TYJ4`ET@p2FD1ps0n#m8n:E$>6-P7^k$aW=Z-Pts?-3O'S
%C>jK)4B2I>2P%?`3Ki!$i^GFN$t;^>2kZ^Vd3,,e'q$u-mReI,2F3N$jXN_brg5si#,nt?/lNM`+S"*FLjooW+rlOu`h#s$I+,Pe
%9%gU]jfQ&eW&elGD3M'N?OPsp<P>5&:3,Fr?`C_XW%^_^"u+].`81#-VMXk"Z`bfG#$e8]SnrGrIfO_jde@o@_EWP3/>]MW;@0aj
%L1mR$'FRCj]$6['&=9e.04lN7P;`S)HpDV`f\#_0%.)FO`+'I@ZQa-c)?1*9^;rh9j*kBd<PZ4/fB5*i)3Y`0K-q;[Xc](u]p'do
%2!]6@aicjtE^-4pD<b^E_GnI>*!R(`L_+Km!kO]%aDCLkT?VfkU%(Iq9?Cr_A05+u_PK*D%T(T"W('@o'7>K*0^KL-C=rFNMnOVt
%`qjs>PKVcd^_)oN)3o=W'!5q^3!Z+?/D)Ri&QDJmhAokVDNs!I-4i@LbKb`s"4X[KS.A=H)ur`aAsrci&8XqSJKF>FOpuaP3j!rS
%d`e(Y?kBlVH24ABo;`OaX,a>?/p&AB2bD.6k?d(k!"W"n?/.E0T@:duf;Cq`Q#bgOHIcgdOOMFnYWp\0bmm0/j6c8OJ,AOu5h;8m
%0PNABUkADNc?rgk9o[lnHS#,:UKAV_Ucah\-/-FU8;uD1H[hj;Qe,N^DXPrCBX$ZIKE4sD4EjaEcWKVNC7N*e?[clVlRtHam7Vk/
%kXD4EKYnJKhA$:ljiQ&!3k&`eIt^iKON+<*<s%f0"%-3%E/>JYW[d#kA^@nka('@$n$klSXj%g(s+_tidC]G;;/"jkY13,9nE15Z
%H$PR62uJpXNS%pP[H4MuCr-V`"@Sh;1n;k!TPD1\ZOJ"p@RqB6&X[=[.9VAZoDJ!O"GdhJP1^PP(4GTFC[7pMlu0eR,o]dhn;N[`
%q<sJ%(2#3)E;TsPF[jtgE=X7L=i*[GJLQ1?-C]<6IL,+3hOH:jgs<Q+a)m":X(q,@1W`%Th5"q$6f_%X(I'oU`C#>"`=[d)f#p+V
%@l^S4>eVFVH2a^'0NADlG&KG;$=p1Xfsg1uXu/HqJ`ucEL#<]p+lGGd^BLn_=6Z)qk(Gabr``8RP#09NPh'k7C8m4$-!eOLFP^DO
%i2&T^hhkKIInAONUnH%f"%'M=MjkHK[[mu!7'j)4&'LuX]E`,jaZrUl\chV8SbUqj'fDkmp^Z;OEsP;<ZlG$_Pes^nPJpqNe+SZ'
%8.QU;^^n%LUd,7nC#6Y6NM2Piq?VWd@)kn8</]grUZB$q/bY2Opr`1:jZhOpNY@T6JEBFa=sHg?*HS6q6@lCJQPG)9%'=\Xm)_cm
%hm?RSR',WB__,l![<?4m;"h-[,H.osEjHn'/a0d&U]02V`2^aCJBCLXI.Us)?3-l$['*!?8%49m(%^CC1ca^_fAQ-Ia7q]1;]LPE
%6m1Fpp-\"tbYC@u51%.]+mIC/G*I%`0=4OTK&`Rp+<tM&XUd)Jo*tF3e;=sK%l&V#0M7R3PA7`8%bj8cc.$1O=sfa/_)"=-FB9<r
%4=SBHBlYV[aqPp[o1#:Y(pGB+lM^]+O)sE&bjRdk9:)POS1MhW][#>%^<P\K'd"X:k3GY_l]2kJ&7k0um!Qo-:d%oL;Fq/OG*U,j
%VK90R1?+"nXeSC)iU_(+e%RJbqm<54Ka9ARj4L)uVbbH`+oUe0'+:$WU@'S_ro*H+p>p2KpZH`pVS31k9i8Rha\/Ced(<Eg5Tu,!
%qbWC=`\NYPe``u`a#+s[)FZOPpXe8c@'"*u!MkaJ]2&MLoNuP%G%YlGpg9QAngF(bAGf,l%%9^tU$$KL;G,>^[`poW=k)P"ni"Ar
%0gaoXg<KFC<tjdeIGUm(ZKu'D/lp=`Vo*Je#I#W=d,euYo^hb'_ocALYNU`,KXE>&rd'nI><EGJ]U8Z]miRMYMV$VLOgl@Rn!d]t
%i2.9&hMZc7]9%eUF2e5soD8bK+fkA7Q]$6"IU;)_E58h,=qr^>Re>.(0C1^"Vcnp^BthgVWBOh$C0bHEh5.l%<n"afQ2tul=cK&"
%'P$SaZPoaM[/BLNn5`2+l$n3S(YbP5=6!k$^R/NV?1/G*oD1l$R=0M]kKI84.aRF!eW?MQnDu9(gN-t6c&\:k@bbmI\]nV@DT;;&
%Ai=/'Q!>ptH\n@AMV?BJq-neJiKoIM@=FWtoPKkmSJd)H529:+!&I=Ar@i#mp7PZ8R[LtSoOLd[*N+hdeQ21Aj98l7d[BNa-1EU4
%9:9&Q<7R(O*q>SPHJ!\\]Y_S1g(tSeQ)e%X80Y\B][Mcj*pRC.2IYIGnG^6DDgT%D@oVm9ePcX[K5-+#H90Z[=P7^+BcASs0YbAi
%.7*VDZHG\N0OHL(:P9/AW_)`H\N-cM-0Qohd)5e\@Q"FmlLL:"Hss`qjBK&HJCI)qE!X.t1^5DE#N+Jffk,([e@2/H2U"gu:>m<N
%r=8m<Y;V4X\p`b\%(t!k93:]r3uApso1lq^rIELTg:!WWYHZ84o+,Ku0'5G9i\Z18hs"n1&&hPPk'2US=7^mql^daJgl:X/D.T/j
%dsV6q%`2_]Fk*:[k4_q5"#8ASbiQ@U(Zrn0,&pRS!ru(G@DW'WM5.0K(.Y`PE-b!DWU,e5r69&=O$8Y9+pK$0C?^h'pM$TQr;H6N
%I`#4mf/40:(iA!gmUs!c:c:?6(tCX3IYE2co_W^GG.:6d7[%Kf_E:kLh"X=JE[2f/aHs/mT>C13d+?W+'/6"!,NS>X<b\3p-:RO%
%'8l']8\;kXH&,8QjgR5j-k,bc#rr8["6VIi?.liQdJq0I)S[iRnAU:'&?uWMemiQ+JX,&cJbc6Fjhjd`!)EQadAfGhKmBkNQi48D
%@bhGj.5S'd\-<PPH!.X7&>$N&pqZ9gF$V8,K>n.iG2H[LNW!H([A/YTS%`Q1Mi%S+&X6fn;MtO0m(;$-8Ao%OJY=m'h5Z$_Y2b<K
%<:9K:OU7OiA@oJIY>!cKb%jh8E1.kDH7&/,\4'-uhkYnWWE2gM9Ma'!E6'F^FmF(sq%?,R]5/rg/<ZlF$El64DkUTLWVrYU>]!BK
%3np&nFjFdhKA&Cq"uZ\qFg;e>?F:EJE-en;Yb*9.]kHLYK2d-HHjBs)`#'1GjP!M>\EJl':,7kdGQ_D9bKa4P;1mW>bps[=K+_l7
%$B4mP_NR.Fbmco#RB@ul3A3`)1#kPp'l)48"oo`L:\A-(;B2Oj\j$GQn7+$2eOgjo?(^uYh8fF4jtE.?6W@ii@l]s>@#7+fA#Ark
%-W!cN#r0pTGd9[O[5>BH4tD+8lcl9@/IOu[oFUtn>05',=D8rbAW5W7O--f^Au"&:HS69424'qr>`>r=[)<ssNnloXR@=:%SKEcR
%QGeT\9Fg1+.Cplg!3au9Z27uf&(]#_@0u!'8*gp$@QCf;&]*'am:VkQAi.s[764g6CIqC/5<_375[^@aLat]Nh#8j_NJ\$aH=6g5
%R'@<\e"INZD(KD$232l\f(DCE3uh`*=g%?qZIg.[/>;$>=P^7FE["(TO-h`1i%5[*Bl0Kq7nj1qE?9rd,qg)$$6>T.>a6K<$/->E
%[u<%+D[l_u^+!>XPZ=!h2^"\TQT[k"9ATQQZp'.Pd=c=M\I/q0jgf7Vc;%D%a>n-jdKkdjlKeW.&q/\:%>h*'+K3o;NCg84ifTq&
%FOBh<7:)_43=1%3$MdnJ>H4.*cP]kV[R3W4X;\)!d`t.g);0fVU]mJB'('GO#7q>nh&1K]X4)\jN@D=]`PK%+)9]g8g/_$WTF9eM
%dh:u->6s/<4^D2;;[\=&[GIJsr-*TNn\n2c6@6Uq"fff">;INfMa$%UR#X"iCY\E5jM$(lo\Y.lVFP[5qlHXjO=ZB6A(@;M0mm9O
%!tMV[liM)/S+3j?'h1!8m:)pL$gt(i="?l;FM8WX)`94('eM-i3L[[k7A$.[%U&:<I.r"bd;Jtq<Wdfb>lJJqkMU)Nl[J!jX7c:3
%J-3*H+WmIu1L>E[d8?'iOVAPAdm(Ln1QV84+sgqp^O)dfJ'gQ!mp&N0VP\X:mK@nV-I\t@\m8Ap`p^pIa/@<\9*+F^K*b#6m8B_P
%!4d'/4R9`3GaQr%o&rD#=%>CJ3kXk;][$8:#,_)/3Ak>)n[KGeC3QFjVl%gqKD3(7I#od7e#`?ac8u_MeZE24;fTLulTU2Q%]p5W
%T+@98IRl573!nQ@h!+eKMFZhF2cRSrm[h3m8j[H$bpaM52Ulm.+BarLK"MCrFJO^('DuB>(E[P&k7d>^Dr1FoOC*Vsa^H:%L`T2,
%VCjRAfK$EiH?jFD.p`^m7(@M[^t=OS9@`+:%QCdg#LKU@ioXam+Gnh-a`SXJNHW:TeEsIrof3t:f@fDP4])&Wr'HP=[/"rA?mMPR
%C\Q)qn2;XU$1l_g7hoG<e-u7Slt"k%m7ioea4T(k)9=tbCR*-l-4hd!A6n#r+!nYX'ftLQ85iT'2Y?0OA!Iek<pY'MKkR:BA2jh@
%JSWVpnL2a>LnN>n#0U/?6fVs(LV7g(%6F:kKsTNUd\QMuZ=j!l!Ke>h`!P8iU\LbP>WGRnAKnG5eBSS'&2GV^424[MgU(]sR7M6j
%IlXNX8u`U12V7`q"*TW#">rtppOe1#+;I_R^YE(+r#$5O8rj4GA4eT,?nA)a@@?KhEsX"/&^Hp<:LmSQQk49KjJ`ER];UJ>)4,N"
%N&OWVi=N@DUZ5A[ZN8DUU@S`YhoOIPr5s@KYB2<3:hZ:p@?CK;)*^7(^r;tqfpFKQ(ENGmG"u2(,quq[+sT5!>MEql$rTVdM,j\#
%qQUu!ECtn)lpUh5_qBgp<qtfl"J'mXG743#9)9eMAo]_RfjTSp321d84"Rn'*1b-:*EM-8o]PZ`(2=Ad1-Bb_1<QT!o")^?"Z\a0
%9iS/6efM5(g$9,p2=DP$S9p^-oj"rX+hWca9D9J8Ma]Pdq6@us^&>/$Z!`i/I']+j8k(l"$t&=l1O.="B'a030ChI%;H.kUlgsOh
%T)Oi6eH38c=U;eJco]4D9?.?!q-##25gtLN1#s@Pk:9k'a;G7n[4D&:q4+6Q7836RH[f=MIrInX2/r#fUkl7+ArZbs64M/2+4Z^Z
%8r`\N):W0fMCb85CaCu`"9lW^#e:YLn\bDPnfZr73js<E-b73?l^he`=.q?nbE9JAW#ZLo0M=i<ottkb1Z^ciblj\U87Lo4f.^-:
%!jok%,/BQ^5>G-`OTn\[I?2X70&8H/@n.E+\#@b)!a_jPm4U55&^9254(4KF@uHKcQ*/!KWCgCpS%:u`gq.fPdgtrE^%Vg0FM8;g
%q&Y;#TJW@/kWt%plDY6<:7DMr/7/pY2bBGe3m>sR#9sbbCVlu0GOk?=k48ZKS:`MHj<o4L&U("`Vo#1!7Qi0?A'7S,r`U]>cGpR4
%kfos4qSN^t`(f<-;KTM?q#Pd=1kqqD580h1LPD@;.48i_>3;QL^_[HSA[%1@^:B&QpJj:s-32Op9Ce\/^]o6k^#-91Eic0>S/Yl'
%2X_'Een.,QlhcST!eh@8V9:1!0OM!AND':EqOa;A/.U>"CD@YZ035I&@%JNfb2N?)PFl4T+9ii^K46ad;Q$FTLa7:6+4n*Xp0AmW
%hIZaqPbP;s'V-:j^?:Kb.Di^qJ<+&$hd^$_k(US=Mb[*&nd2AfWU?O30XR7;]UkU.V1\dpUemSCaVC35%2"_D*ISZ#SDf+tnuT$!
%bm/[k#Q^-^FWd)_L/T$,0BO3X5h$$7Q\>:5:?.L249l3.T(1^N<Lpb'T*12l#SZu(0m9P\Gp3gs>NBrRe*(!'E2)af)5>VTm`r%;
%322aIDTYE,!r;;b@A6CGfOVo2aP;7A.e\O?/I>$<Ap55WkJ*!I5MuIpC8A=1\d;Y3+3o_6LZhI,lSl`:f#Z.660;#bNt3V_5sq03
%.c!?7R=29;^X`-;OLd_X,c3,3;!K!iqkoFgqD-[q*W7/k`2#r68O&2E/+"B.[/9'5.O*__>5dl6"T*U.pbZ,15YT)NDe)Dta?#(m
%.Oo"M-nS!1C)FT9l?8k_Bp!*42k#N+5PHG&@ZDRnLdSm8X&ph?iJZ'86l4rNrE&3':'N1\)BVB)Eo'0c*9<.*;sX2T2gt`!8qFL*
%e?1s"NsN[R'rFIl<.lu\G@DSJq?Ei!a\]UCpt!qt$9M&>!j#4"+1mI'T\(X^dPBWIR\MI;'laO[GEt-'/8qW$-HYloI<qIR=I2]*
%=-5k$LssUA75#Dr,Y_5qbh=9HF5crXk=_hQ,/IK-K`8MqF$t1%SV_#/&`Kp%rtHXZb$1"oW+r+QVm.:E85a6be2XBfgc`Pn^YnLO
%f:d+ZW,T1B+G#!.L?a'rAC&WD3tI(2UT^Vp3ua["D6T"2LL1B^:<QEf7FO]Nn<bFsX\*\/SMhmIoK0>G"`l/6NmT=F/.$r?Kg<Fj
%@W5R;XWeq%1,LVf:d5ep/$)PKX%RDaDcu=<1@CD67>]$mmYBkMND16hh*:j*$Df`Arb3!./YM?<s7pb\-1f'J#@"TsaW,go;s^H6
%##ktX%f4[X%Idn]&#`QXDmAKSF'2C["4qEa`t-P4:!>SibWuCCYpR8&J97.(;YYV9#ZbJlWJAXn:b6?*Si.dO+^X'oqW^)`J404E
%CpEZcmfQY!3Z"Le*TCV4i^,!l5]B=;=VX]<kU,K+gOmum`jRZ$a/Or.*'QSrgE34TX&`S]D+3t7J%ctO7IpEU80[q@e7XUJ@oDXU
%)IkV>725Km;0`T,V)jt7^&$tA@ZENL:WBd.YDWlniWEq=lXN.@+(4)uA#>U%:;r+f,;Sfe2POA!2343Aj2HrRl:e>$6c+>RSkL't
%-q^7)FKX.0[aZC/Nje?I+6R-Jn_f^4Xg<)MRRZ]9dZ"^9K-!(DT;^FnDioh&iaMHkI(j)_*h%"KlmJA'8o6.NY1kkOo9hPV&KZkP
%eV$UM.dXem+`6&J[C'9+@kQM=9kdOSIt#7A_(TJW:Hc<<8H*2lUaa:F9):QVMnX"Udj')k3B2";J,akrF<5&XPGec[=`J3&Q?O\G
%+BA5Altt8j0_d,Xf\GcS\ghIebeC:e*))6W6?oH/_qM[`j9sX2jZ7?o<$bMLOqsdTKC.J\HreD$VoOj2,d=Qk9jkD]r,4_)=)e4^
%fQScNNJIriBp[;)$Y#n5iASeIHS@rHEk)@:3mR+@s%5:((suWAA^);QFS3p>',@B,*]q=pHf#>ms5Os\FUi7C->LF/("JX#V.9,@
%U$1Lfd0j.^",qsT#W@X:mdEJEXpZm+!+pVH@'KYn;0?/a^Uk=M+L:V?@-$f9BkAmiLdH5mQ:&Gc.0e[LaQ$uaf<PAZjb+62]302_
%b12_h]P(&ubHcu*,![$TQh_boIi7,#^WejCA2]`:G7n9QmF^aS7eB'M25NfMB2rm,fH?hQN`C)K$l%(,Di)#3W?`<IG\CKu0<J[L
%5EMl/I-A++aXdcX"!:FI-3I3p-BhgqNu!Y]_>50['p6[q2"1$or;L![P<2!01L+'%U-iqBX&6Kc8luQ/ec"!-0Z6^8_Aj3&(0F;#
%bio[MOL5pF5YT!gXZZhrU=e\M6h!HRiSL/ck@/\3:jMZk*(C>m_#/]r519Y1,JTZC&fBL;q^.FmFV!BoS/i+]8K.TX3CFo`lmXlG
%npU*BQN)?^?opWDcLXpcY&;^b,?6A_3Fk"JLDJl;3amMrRI.(&C#Ds<g9YNWA9ca^kR3`aPmin=Nm`6DpIB?L*H$tH1tP_FFON3%
%@e)F0X@$2]F7FgW+b62]k57[J%fPL80_Io5+K_V;nd2d8W<:J[FI^tDN:$o4QXU*[D@n'+!*#lVpQ'[-U+8QtD"<E:S$c30D%lnP
%d?@gO%5cDb]$1aA.Ih))Gqfj)2V:HD;rOLK7@>$a$CtA6R"!'51hg8[bRQ7V,kUeN!=#[5Qhrm>nO,V9[$,VsrqhWHq4](t&4aWZ
%5X(7b2l8<cPU30E%*:Z"jtnp38uaJ4pX$15S&3MrRDh-ii#7lm.4?PrIKN%O&6c$E7[=;\XdYC"-%=L`)iJUr:^7!Vb]_TX:XXk[
%0u5??R4J9U'o8a;HpRomFt5Uidmnb\=4UQ[VG!8O"t6V?ISOu.:uf)(JR>C1SQdh=Do<r8%HL>h7P_;l:Rc[X3g&"*H?Q84+rkVe
%#SF!R[OKN)q[KQ1Oh<L_!f(Rig$H?W75#Z$C(Zg#Z/C!+/.j*E-?\u2*KYk8]8:!H^VDm2,X=Q,f&)_iiH4L&>o+j\0hQ[5qH!01
%K%Wp0=VkbL8d[^&8^#)Y/@bO\"1daQe(OihZ\jgg6h3sQYtA<M!Z*l(HUcnGXIlT*-;!,RK#a`>br;0`+mp\nZeO6jCH\!Ihol;X
%1.a1_dqNhu>@3hTf7GMIan9WqMu=FOhO8s$-qXe(G8kMSCJo2a75fP<&ZS'f+68dJYc>uo'6[DT&(ilnA?'e,XJg;''/YZqkCrE9
%iW.IEE!00bnq0>34gqFcSTAS".lF,YX+Q83:O=t'j8;O+S_ifWnGV**B0CpC0t=6nJ>_#^Hs]oaV:'UqFT84!llgS/4tdNN&kff_
%*P3jpXn]er>7)"<]-hn([DX3G&0^9fS(o_>6LO5;OqVmp-St;SZDg`QFfnR2.CQs2,bm?cP[m\,l[dEVVFZl^$a'Y%$4V^DUm=QC
%>I^!#=7M4Um^W2X#L'uR'HImq-Q#tbm-OSR.3j,8/lbCfh*l!Xof#K?GB/_dktjlF@S";C'fn2pXi=B,g3HqHI8f8:10])%1Rsl1
%?5UO%XWZ^8np"gi@uI@s'N.lH9NB6h!)#$4"f!=DM$UDB6+^DZB:CiLjKVfD4-1*KZ:ZH9OD6p,fehG/F32KphF)igOL^$=L:_=q
%ac:++gYkX)aX(/Hm9baX'tSPd3HQ+;7`d.ijUkr"55aNSSI#2>`D5gr>8rV5^HOL$e?OlPSsGIS_AOYfMhg`meVi8TZBN5n-e"#1
%8C;Jc@]N!,&s8H$7032Fgo'\l7BC&'2`MlQ8pYX.]YP4JYp@GL:G2J,2TOU[nr4l#9KjRq;T-#<jE2/FR0SJsA3:-qVpH/XhL!9-
%84pc[s/L?L!Rj'HpLt*9%K.9XSC1F6$o@Rt$EBXcdRHipN&[b):8YR!Pp?i0r;Kg]nYPKi4=hp$NN/Qi]p(@\o6S#qMVl.ooqb)o
%.'nnT'*L/;#"fdf7tqk@G)<r8V)U>hK#rsdMQ2r>-#7l:"mRcPM-u,0[P7`*GDba&@m[-U@K?2l+V&\e#<nJToNVg$[ZC<[h/D6m
%S:7B7+(<o#N(;\lV-39n#K5uDh`l`hJcG$8r+.etIGFn7!heNhSj'Mm"o:.DmiUnO)S0B]4YQD\q;j+#G/j@FhgE'E-iCmZI+VlO
%Cen\iKEBQ'<TN`G,9Ph$.m#IcOBm_+^SLo?I:;$Zph>DQG.uD>j1P@Mhij0hF=+2AM[KCHpq>f7pmZpHS\#(T])QZ2m4NfNLUMF]
%1F0fpZeW4XGLujI4G#tL=*6usWoGd1PM!a=Z_@uB*c`U*?S6Me.RZ71A>.@sY=<1XK1Y`NYL-_RrmBS.npe2UKr9sks8$Qdq")D8
%CqE?V"@DM;)H?n]mH%q]><J9KZA3_?a86,5IcnnF*eSMm_V`qY/XT6OdIu8?8o?BZOD&J'C4H7kB/&'"]0<FiQ2P_D;/>,YQ3S/F
%A)8U(2']#[o0*gfpKBf,HRPV0.A,c$h=\O"hBs\%5L"NUfN[:@0Cp7Gjfn7'o@!c='B&dL#@<@UH%35/kP^<e:W;Ye*cq&OCtEr^
%I@'94GAhb_kWCIa%$:XjpUK&0Ga\D0qfV>Af_:;2Dtb*C]5dhafoNqml-8@OZQD_TmI!0JcMjmC3m4_Yq9&\Fp(sFDOon"tFZD$K
%afL.8l*bps9AZdWm@*%JV_,#JPB7P2`X;'^"dSr7/md@1R!Gs#X/g0j]1MuqZKdcHHPh7H^<4@]K*U"U]j.=)6[GWqc!G5V?pE]0
%g@kIhn#uHJ><d'"*1jbs%OVf"]OmlC"]VnM\YUFu\o6@&rb@4kA(H`e]NjVMqt3#*RbFr5-2kE?kh0DYPKbU`mI.6%'F\/0@c)N=
%k:?H&3o@:4OlJGofd^hZjoMY&guOX%G-;a]rN&)hm/iW@r"(IGR`\\N0rF-LeI5_i+8`WF4$j7u)r1$sOD#GFCY'rg`h+@0AD;NA
%Q#f0tgsG(*?tDiUjaFUrD*OGlq_6';]RR0*)ddOU(n/),rP&5*Y_/[u(>9L$8:/R,.8`4pmiUnT`QHLU[]f:frGnHI$6BT99-X[A
%WOSu,n/N$Tfp=C(O]#\5%``,"%:JmJ]#<Qn[3).B\)o8]Nl0k^#B28V=8Wn'7ilF87<5mqM/K,[I3F_;U5mLP=3IZn8<kL6HedM.
%-$<FbE9V((AL9u@]lt.#LPsI-oU<3NP)VpUn:4G.NN>>#?"KWS4oJY`)iNh6H7m"A8+`()4[^_XU&U!a1R]7'IthSuC2d\`cH&fN
%A/B[!am-2faJ(\:E>D,gV8B/\3!qe*#!.<;6\D>cG%%BGVP&I*MsS5D:`)D%B:V[Z4^-lIU`rGq]]k0alO!nL*C4>U'9\J2coRZi
%VMOac%Q2IrVkCL/SgE($;,eC=KMc=I*h1"q'nt'[XG<;=nQ_7N&`cX@ri".q:rM`+r^ID_,nih:_-s4SD!2&.^_m".H1(0b*f4dj
%CW(,\!o@G[bo%`h/ofLfom`r/+_<&XOTG=r8*EDbAA-b@GatJ2n,YkRX<<Xu-)sV)$Yfmh;OpkkL?IfSTKqpfpAg,e9_-[^7n[@t
%Z[j@%*[E\*dDQh>(p^Wg=/]L8iiGk<"*8?4Rl!F&d[Ah.!\Ho$FeH+ONbc3jM/;H@0!a\H%@;X]Hq5,G66(9W2K]$kZZ*7BdUZXD
%LU[jB;W'rp<a+LXdm1]9*H)RO@N14;L-THGBM./0V$F9R+[I/MM"^q5a(VEof#m$.`shcIe:;-g-P++VXUA,\36H?:3V2Y3'8JpZ
%kKdQrOn?3+pW9\%JtpFWe0YF;Q,^O]3)EA7%XGQ@3!Y&:'(fiWoX%i&g<8Ym-KibR$,P@AC0V`kFei-nSsSneq]JB_,KO39OeWcZ
%L^m!k?+E&b3a^TLSk:PS92_!ReMqZrr;C"9s"ITr''*=16S$XP4eRH"Ya"\LY2Vs,Os@!>p833;YEH!4W1dl7n?>PbNP^\L4lWG+
%hd\9/HjuI]jdUf\#SsXT,'hk3=i".<-2I!5]<iT)MJ<$t(AqKE.\0HAr;:F+B4oOb5nTuKU!Ndj:+TNq*Tf(]D]-_*Nj3%&C)QnL
%1ImkrGRi&?\$kEE_Ib+rD;IpQ^]jX,&t=@6$,_o>"Y&#:EDukafIXgLMS[)]!2-W>'^Amq[LFGrWuCL]PY1ol]Q][Y*GN2r(+=Vn
%o,cjMTt0GLp(2jA2WkCZfNB7I4]$o*:Is&8+1<M)i'1mYXn2@NH7NdcO-%@PQ9(sQ+-_V`V36I!M`c?QU(J*J#(H]19k+RN!-ARr
%2B6:'_aFF(5;`_J/eJ_8QQ]b;hMtDiJuE&oE5F)3GR9u7hT`?&Vo=fV8RQJ-OC^OBR4;)dAg_'LNOZhFD>-'@AC2.#,AZ_17fn^R
%.j4-n;c<h-dQmrj!l.0>//H[%OF*cGBPG<.0*Na1P02R\-3GspC$4Xjk6"Xa%/E)']>Z#nFcJ\s]iB8H#1U5?g!*`Ca&8guK(tKq
%i1cCDl=5:njgfk3R4\6D+^KQDDCWCtgSc!k&6KcR=0Y<AhGd76-KMZ"r,6`dJT=S`K61MN=H?G79>!MM%&<Cf7]tE'CZ4ASqISQ%
%fD0=98XupJQ9mu%DgW\%<N/D7fc7"R6Qb('V>sfJ]Q;LXmmgJ/VH5@1:1)9#=[P*X[mu?,W<R@^MD*7@_-DQdTd[P4<0L'Z%IY('
%_'=O;pcVTr4G)G4S)g)F'$FbX0!Rg?`8o.^&b6u@aDL,J8u0"T_?3CVXTA*3Wid1<4W"-#>/?GM>PDLR4g-?/a<f=s!I$k2!LNN5
%]&LD2q\WA'#Cbt\<jsem)%$MJRBlj;[f+5Kou$R(oZ^@4??Okaf2Tr8kHDHq0Ap<8I6gm0TWn%.2Hsf`6=FG\h;UY%K&Ws>]+prG
%>/>Q^&TRN:gIXIJ*6g4nf>h=)4Ifm(<3'@R+EmmfJ2:H5^8pKgq4pkn7jYV82]`QI:bH$f"`WF^r/M0U\Z/h,*m7_8^oWa28YiP`
%GRuKoor,,g93n012"f%f*"B6eihZ+aCqH"D_6Zdq57Sm8.O)1>O"m9]L^NQ`l<MKNMq.mZY,2qM"u8j*-6aPU7FG>G.A"_[3eCT<
%`5CF[H!%K6*lG9&eZuo<W.os`K6^S:89:KN)N#-\7a=:u\L,"D@,is_dnAI5dRqUgUbt5V,Y7b7N1&.?Jtl&^^MfZa[[%\,PCjR9
%E)Y40I5lhM64GioiLcAQhm'E3\D;ppA-(\p%F6Q5FdQ-nUM1ph&99eLGpHF,N'$&C2;9<-*s!l7pM83^(R+!CZtUffMf>qF-oKj,
%Ge0!4&T4WB*2$eRBaEHH9i\XdgicPRjt\Z6YmVp\e_nDL.<^C9jRqMp'W6Hj/KtHP]d-hd^+`g<[M]t`7M7<L]9W8Q\LG?R[PK%S
%TKaXh>n23N0`-!N=K=)"#J6*88:"sRoZOC5I`%`CGF/>e`SeBuqU=s_1m-d<+::W"R;YMX[-LWD>?sFIpC0*bmE@=e`,^CGl#GtM
%i^4B)aZZLeAHX=Y3@/DNoZs(V(VH(2hPj-i;p):HRS/MTeT]Rqm9?VSZk8HpqndJ;m[S_$0+8EoD1?<Z+XKXbgYAk$*XCC(qnp)#
%jddks!3C+YM0JeTrF)8ifL[6K6/!ppO;<m@9@W5UEgQEG:SO<,8=@HE3UeBaokGp5FU4_i,>_*YG$PuG%V#O'TM,'CB7+Yn\OWp8
%.$TL"kZC\$,teq#p*+Kd?NJ.t>\_"]&s^QFr+^5N%jOLY<G^)Bp*5f$TAMppf3J$&s"ml.#uI#Pn8?2-5<[)LHG;3#XtVk@Co:]%
%=6/&`MU[nE`dH(i)IDIQ^6XSU@\u<5;ei?a%fC&h>UP!&A?<TI8S7m/doBgL1\\[Cl`/=>=]+F/"hoUhX.OT^g@do0Wn[H!L\D>Q
%k6ht&,_sm1Onh+kgCm1gk*bq>7+Ne_.!7>)MR^#7;1-=;Mkf1)#!0(1&dp9'!R2o^C`<&+fCoIbretdkdI()0qq"V7:&l!XH*iZ8
%1#mnB<q.poBiIaZiEc+q[@sEMiY(9?eqtZrc22p!21RK&l*JgXS?/h8)"XG%P(bBTO5/&G<AB$\?S*9t62$6@I%WJ&P*3bfk1)/#
%ESI"-6gRNb1s?k2jT2[I_CdAO.*^oF6;m2@Id#'Rk;&Padd__39WmDac5_.XRHR/M&K.`ob^0&c5TOImipaKO<Z@?"EDFCg<L7k_
%oKYfi,FYgMI@]r%p=u<-D0E;"44lM$c1sJD^XT6Vq`4-YmQGe'FA((0(?dPF@24\)^.$HC0O:g'*Fa0fTcgM_B^64Ih.ET_"1s)k
%p*fkHO;mB'kN@*,bYMlNl35,_8'Y9u^dC08HDQ#7^S\PemMSM).!j070U,BH5K"Ts7_ftDeA$3mrqrts\($qL>O>)?]d*C"YILM!
%1Asfk+b+;hMOUO=V%Z/(F^mccU`dM:rMdS=W$@(1aP)D?FM!T8dn!KKUMe@s(.OeJf7d>MLV)+QoOGJ%q]]_F-#'*W:<%R\4a,"D
%n5hCk[dkN/ojc'G5JOL,!E?ZmWX4_Ch%!L$Z9!@--?Utjd;DScnTGUqIPEmq_N.am0]N`o^*B(?3?8qXft0[!["G8iG$`!HWOF#`
%ZDU(D6_rSqXJ(emL/e5+WpO5UW]r[DMc/?dZ[Cd[4N%@HAgU?qTpFdoV>;@cV63U6o;4"/MNo[pJ/B%e+a:-c>9(7F1>#"PZYoQq
%k9p'_5A2H6XN;JLQ[_D.dCLYKJ;i-L8XAS<LnLJ*.pGqBP\Vs7>L,36%UXE('L=(4H`bp;PYCbGchJbh$d.BmQ1l)l$,iOokeoYP
%T/kB8RU+mp<N00XOUX[>Y,jcF&t7s=K<QC\`Of"BGs=:G[sa-7+XeiW//gOh+T^8U$$3S(@r./;bcbILY3oJ#4qC+_VdGBc5jF09
%T4UjO#K$1Dn)C'@/H<5LYRU@bf110)4\eg:RFZlB*>9K`ZKuiK:_UaH0?g"JoMmN`b9Po3h`mJMD[jlUIWFh%I-q2a];'I2'Ea5W
%;k4k86.&>N:d"2EU4g>"Nipg#_L]']E4GL+jX1SVpKU!"]=aOI+Q8^6iVn)Zn+78^.phWB2]gh),/M.$;st0%Y.NTfUm5uHFSA09
%=%UfJVU!s$I,rPq>#<2BGhJ,pDCNmXq3X%\p`(HX9/_tXE0/M#;Iij@.u>#:R"bldPbt.7(QSHgh%D9[0qpHN#<YA`,Z1Ti[9dhp
%b0XnTK<S*C(-9d>I68FNf?T6hKbiX\f5=h&p_[X9WH-'eq`JOVYIt?5HHh3^>g?%sH5Ul5kT!I]Y=#:GQ@'M<Tp.J_''YrL9NE(_
%pK&jFSfITqQV2^7^0K^L\sjMo="^Y0P%SLApE-SNU7F;.50gjL;n_m=Km5sGJmnB(9`%0t.=J_I(Zrcu^#)'IVlk`g*WN4jN^9F?
%ajT^XgX]3bg\1AC4##_M%E?+gk:?H&3o>[E!tqE#8@3"]^]l:.\D6qb^ONK:1,U;'FgV<c#2cI46#rJjDqfk=7?t6B%B/)P@ga'n
%Wd_@&%n4RacMccIf>i?qmV:P'p@F2dr&,C*(WC[k.FMK+3X:b4kG-?>o6F+MCdK6.@;bj=3H+b]K=&kQVSng+VlTLEk0o)`II/]@
%j!l.qqhD'`*J>^(I^7^pqn>2%fIBP9+,6qVn11=G6hd33lb#HCRC<[POcOiai'ffCM^I9>Ok]U$ocYCMpFdT5P6R2M@[MkXX<(h.
%<&0O*@X`ea9+&ufZKjrn0OHI':]!1j'Y*!71>;)83_@pG$lM;kUUj*AANB<MQm3PC6>st#T256.jk0Ibku`X(nsEP=)3r@=[3/d&
%gr7QC!I/tkE1O3!Qg=RG>LS\f64!rt9(9*Rf.:mDL!H4@R$n"cmN#6_A?PsVXlHWLAliJ*h!d9B5-3B#_(b-"s,67dns,I^D1=AV
%C\pnBD_G2hqZf2gKkY%q0%]pArc4QVqkN!:jZ`H:];Ok,=(>Zs@Kl*Gm4bp3$bOFCM!j!_otRfaqCHrKrnbM4?eY6qIN#,^rUo[Z
%Q1!!E.b0m[Ynr@3QTi+G`@d[&4Pf$A\&R_K^*p&`iAD1+cTOlshd#QYA@'CUbmuqok1`(jhbG-<Mt(GuNb^d3G4FV0H"]%to<K1m
%IYNhjI+U7JlH%f$AZ7j'38C^`n1`SJIm!5^a4FCA>kVbLIXYM>1I.%%nIkn4S6c7VQe?NEROIQp@klaI/g^[_?CXM0>b:*e_`!Fu
%1;2K$bVZ7`^feH0@h^G'Ms%Uc3qiI<rI5+aN3p_I0!ci)X.=^H>`:s+P+3amNCmqd,JV<X\sPT@7'";i!V#_$okjn[<ZoKleCbO/
%Om:'+;nas(;choTS/Y4q"8[b_<'S6SEU+m;JbO1B#/,o46.:i*m"-4hl#A_jdq17K2(CH(j,AG'e?"0[-jQ&H">&=i+omm_=8".@
%M[i9)FL0Gb^^&s3&q;YH"1l:F<H(20B%\&r+/1O_Rn3c7"gSmteP,sZ1SRWO!echt+Z5&FJ__+Qm9q:EF@fG4)<)U?&jtBPLq=0;
%WJCT/.28apYn&6BQP!ui$[Phqg51i<ANYGJ8_FW6)i>2=1/BBZe`tg.,)*h7F,RFf7=/S86;?0Irtg<OQ%Vh&$;,]'SNH$h_:fka
%!h41T/u.A;QkZLBH?".#&hM^+R7N=>$qqKm;%GZWRtT_T3'j,G=V7kjDBs`>_BK(qmVVo8f"kbWd9r&'lGa"V*XA.r1]i[0=L1s0
%a1`GQn+1Uu2E(75)R**n.'[>7NuTdsDDVue_XQJ,fS!(um&9f_8!-fe(>HrmRf*a*%KnG_1&o?n9ZJ<b'L'ZJYbc-HZg=moah0j[
%Z="]<@]^;5?c:QZ[OZ`\RofL_.iV`K*_Rus$OY;p*M=ERS).tP@)GagZ=5UY\>a>6mE/6^=uD?TIf9*2h4$O\Y<qf%i(D#*3Cc8B
%B/Ec:OJ'JI(b$"TaWZhadLJg_cO0Xm#h."N.WYp%ScpoPl:VC@]h\^1%$Nkd:j"P/PuD;UQB3F4?+`.=<hT$mh]0G:AD?obh6q2(
%UU4_d3L'$s/c*D9A12t=ZN,pg$$d1)7Yeid("8ji*85g4K<%I(7<mm>YdC`'l]dX,J?pY:X]T.i(gTql)4^Tm[JiZ*!!;jl6g[jt
%kHQ51_(IeXQ*WM_*s!mBc4Gf4O]kURW>fV9B0\B&^h^h9W$]Wqj>Tg7oHcSTo:g.*>1u;Q%k6Sg-nntgj6_X)nhBIAOO?XZdPMTh
%iq_%+(SY5cY9'MdJQ'?p?'t=f/^iJ**s84$kVk3Hej6U4_%jA`iK'X`YG.nVrTCQU"u`G"Q5d0'/\S(a[.pq^./%Q0:)k9Jm2A,;
%kaM1;_dj4aq*:ERI\D[b.;^M<n?ZS6lP+O?>7n4;,nO#_+;E#GVIKb[8aM'!%O7oH"j?<A&3SS2bNAkM.?W8*Po'@(755FZoFCQ\
%0fJgd&0m4Lecq6=M&`tKjRXhB6ee4E8;aC$3H[FhOI$Kc<->=N\(flqLG2r))tJnbWB!(4Nr*7b2R^Q"R3[eO'9<6&%>J`nM-\8u
%2`0+'3L`GS-0Xa,<l`*AZO=B+]E:`LpE7efdmuNlc@Z?a"!seNPfkO&-(RgJE]EI#O//)N@/uYVO.]9s!J/^Q@7&Un/8>=5pTLP&
%,A4&[bQ\Ul%Dm=mWI6*bE5Y;%B).D[0-2BjgEBrq&24dtp[EkeY.!peCbjuo'+'h+VW^ZQT-QY&me*7tgfn:q7nKuG/*8o<IJc7R
%61K[9/XOi*o#G`iSP!rVZ0*-UfA[B,&H9EH?n8*#&9tCs>bE-!G>YGBT1%$cc<ZlS[);eWHVh648-$5`BcI0g3A[SY48)?Y+I9Dk
%;/4bYs1:#?_^Um#rP>`%]E=(,"be&d)8cb@I=KuLqPJ5!1p?C(TP7$D]8aktNaQQflA4T*RY0^,Us/7-b`\M%edV9Ik_G:IKi$(D
%!sP9ZSXU;#\DE`HX]pI:I7SmZ+_Gdod`Z>6Gn3)=:idRCl@Y$$ahts5ZkEsFaHtFR7.KEjrk@c04bbT4d2(@_4oi`T/[#"4`8;Bh
%Fs20*U^o:kcK>F+;j3?P8qH+!rrEl&7.[&V;]h+9N#q#U2PP7FJU^uq(GP/U%b?&.o_O1?TS(/3Q%tP\Y)CRH+-:>5/Y,<>8:Z)C
%AAc(\RCZ=(<H=#0]q,:>Hp="99pVt=<YqEr;me#&+A.Mh,LML&AgCE7G)/6WqmO,<+?PUSNTO?jE2n9EDN'&Oq:10P4%uPD+/<C3
%:HN!4*$[kU.6,dXpJ+N@P2fSjBcn+NmN%"&]^1%=Yr<s9Rlqbe/q'd.;^FU6-F(0qq7]HWCqe/XV[2fU<Y.?*8*s=jD);Ur9b#lW
%,<m*bArUA)`<jG2Z_VV\(`$Kc[:=+NI,mKXSC4+9&'!?OfioOR(!Vgk[$W((ME#HlmUn?V33*\G\C2G#!k':6968Ijg5UGGKm>W$
%O!MZP4rq<mlAFT^4re!/rU9%:@;?-+!Li1IB/7,G8//.6%$WdRKKOZ3#d+=u/[TM4gZf.%4\-3Q$uYW)H]LCpHqH-_I5.RE$NUK=
%NfH1)>-n8?+_8\"p.aqpi[_/_A4cc#*B_,g"')(=iq.CQ^-D(ArKkl&;qHjKp[gGu>Q0FAa2g%3OZi9ZUbC:1Tt\MN1b:Po#_S5@
%aR,e&idjd>n?EKu>`'e_WYeJ4qgF3p1up9%#ZkC^=Y$CGqXBPe5B`bgMGCct055caWr;Q)m"u,[5QH<*EoDpOYTq$3UK)JTLn;&r
%4V`Nge</:VegK<ma3+U[7</70Y`lqe"[_Id-s[S:U&C#3_^a6eD>%2+h`XEsU"!;(dr5mh>NoF=-a?uJ(gL.LkTHdF3/FJB\]1:j
%I]r4pOJ'ZZlDBD>,M=0$k"'5b?aL?AjjBK+#jWYJHb6[a%'W'[:qt&A8J4?`l@&ddP3%9iWr))Wg:6789XORF&Eh!e:a2nJjcLkb
%VKeR/,dW]#9:LgWZ%iMr$4%Vp,sr2_Q7Q?;Y\+SWbH6j#Gr8#?ZYT$'nOmS*V>hmEO65(JVc-1a-^:B)*R\W=NY:7f:$:k,[e&J.
%aMr`;%<gT6%EnG3DNM?*o.,M5^-l`$V&WrB1]2389o.pK3%6D5<b?M&$Rg,#)SQPmN51tA[ck1W[Q:Z!@GClA9l=Zhdh"Z2/XVbg
%"q<kf"CY7F$ua_.0Jm+d$2bCPq\C*L'Fe6ECJEoH?*K(t?```Fq.?tJUb%bBL*#DQZq;QY)H"W$+FG:+6VdIdifE*unNSjJoW+IF
%Np9so`Yl<PCJf,BC'fENH*4MsBW#&'QWh^m#s4>:obpU/gT4AN"TA\iKeGH<<rj2Jb)Se3B%_Gl`;.Up`^Z,$$`.9IMfI*KRdDLE
%>$&!/h7_gW@6[e$^Q*=qR=N2%Yr`Kf-I"Va`!lFjV7NNqK.M@PdPeGUWR9oS-@19bUm+T\),NpOr`k"_@^i#*+`DYe@oJMs!Z"6S
%,AZ"kP!CbT\HW*b^r[OIc1:'sEq5/-:lF*36TV!8/nY"F#A\JtkV1>Ni(G*4/,1D]6.bncVghZNTVVI.K\V_9m4H9X;bVaq,A@BW
%AiHN@"C]1%nbp2/4CV98qJ3$jd"i$'hI\YZWPh<1+Z&SkoI^g`ibsu#Yh!6G!&tP\r[^!p&'kocOMf?4)*sl0\t%dS*p0dT*P:(m
%`P_,t"S'Ob2o'&\+GR7"T\o2j*qr*4,^"Bdn5>gtap==?m#N!$.^7\HE"6S*:Nm":;&Vq?QV>28Caf,OW7g'6s7+7+GGlU%D6`#"
%52KI`]Zk?Vp"&L/DS(5.p"f;MT.fU<s&5f)[RV8Po^QDAQ+GPt\D!/1q1Ai+MgX``O_4uXUoPO)I7-*\C*t7dV1,tG3^?P\\ie]T
%rVZ.3g[=N-55m[\VHmG>I,=4)ge[&?5OJ>BhET`gCL?N'(n\DprqTjS/C&I.MN@@\nbM.W+l_G@c7BGo>kT,K)N\WcRCi4o+ff$H
%W,+uCo^;"*>U/=261N,UHak1XqpCG:mCLe-$N7m2'C+F;jh8!k)qk'q$uiJ3qhn`V`E3RN1TAcqUs&@I<./I+IX/;;r;#;O[bYEp
%UQb:kO,FFH]&qCdhX8AH8$d"-2"*AKs(L;nID+BFJF5o&;Z'k`,H':mQXFN4d*(P'"iA"J^2`de[3md@qMHV/B^=f*2%h#Rq_5\8
%.H8=LrG$!&,mSn4*QgJ7K!3M/NB]Y?bI2c+;M93[m;\73Ft8b`5&U+(N+_aITD&49miUnW(Vehp0gp6Gr-\gP<!9'jh<KVSqVM*h
%opiABp@hWM,>r_qe)`Vtfrs$'T$9dRmbM1XKM3ma'$sOWc)g$]rr0aZK%d=LfB[fq^Kfs*c\IS`+6k:X(4.VDN)6r*8le't1.7L5
%A>U?9=^<pQ*,6riicT,#0:).m:s'2r3LpfcGHg07Ae-UT.,c`V8mK:ZWfW#Ar<\3D$Uc$s4t%a\2l1Y<Wk(A>Q75Bmmo)f25W.8L
%H\UI/KQ%`oKS)?;-+HP_oDM4BA4X]!Jhi8Sk<76p6]so3FIFhooOYV,@TIHuNR(l`)pVI<Y!%u;(59@uk$>r:[6>u$!2S9lgU,h:
%8FH&''I6bW/I>L!^_t;%')M]fLMgEb!/k7"XC,h:5b!ND(-uMm.%3c\6ijnj5^[c5<^@!I[tKb+W,N:G:`ZI7N(OMU8/-J,]r#.B
%(b9Dh9=TjOdU)/>2MgJ]AIZX#o)IioUVLfUV^]KeOP1]HP_^?=]=4`@PoqomkbD(V,A=4ABF\E4NTa#p2c>to5<Pa&%;CjUCPP5N
%;pQ*ICa9jLVF)IgWSK(MU*^;N$5`fcELiG$1_[Tk(MJNh&ZM*L^+_`)"?F%hQ]sCrQS['iDg/8NkI8uQ8J*kCeL2^-,Q&*Z1Zr>@
%Gh-4D%[s[9SS,GtBG)>HjK4@T;)g.iEHm"sZK;Fk0(KNFMG@+)J8`LjLEuE[*_6mj5!*Bh1^kBNNY8lX*\6^`qT4,<#M$t/d(uh*
%MCPE$"L%\GU:Wk;=-=-Om$i$7QKWXc@Q92[+PsITo2M7$F9no^ot-fK!,b0Wk(qa;h0=BUY*#\;lOb.N"`C2%?Hl($SFWYtjcqtd
%c\]S6K)@k1G@@f[2ksmZqU>6fMg)"6imTk^Q;,LEs,9<7jU"d0YW3(1=/r^R"&+`JP`:(#[hIg@2rGF2iap[iOqA$Se54c0T%/6V
%MXqZde'A:oOt-CU++hol2UO.MnfOI4,%!76FZ^uk^m?rq0%utQW6NH+@6<gBMS]$((YbOfC%%)],q7+rpKpuoTUNoVZ_!Vqoo].n
%!]"G-`P4BLA1=AgWF.gH\.o-aC!53g-gm)pS1hX1M7I;8>u?ngDRE&jQ,PjDDMAIgX)M3(*->bi%I,Gk@6=MO,ck_q<((@qap?ES
%PSf--9\kS*24FC+Qktb$FL>]M'VtNqVg1:j_\V4E>T=WP?0lV''$[UE,:;_N]*H!qU:]P.HWD"MquTU^:*SI.M/GVuG.P!qh7S:0
%RXmQee&l2+C^KrKI.3\AQHe;\FAD/udrA.E]N"YTihVGlZioeA-b)L<@kdRrgj=oKq0[\m64a,jg-l/hcH4pAfK@WhagGK)8l](`
%3lDOr5Qal6lGs3-]Cu(j[&9::%/.pcW:HO+YR+&JBuG43m(,p'U,&56fcNG3euo9nR@&4&HuDW?8F^S-,cD2PJJCaFC;-ncj<RNV
%iZOZZ5h#FHZ0dP888eHUr3R6k8Ca(XOZe7l;P1er;VKu4`(r&V2KHrZmp*?E!a'XgYTJ&=B5amV2&e&)"lfpPG=p$K@b%@u!ZNV[
%b5;)X>=CR5nP/61GRE[*XKKXY&.''8BQTRGf)m9"i+IlHLU-0m*;fY)^Y_9?[;BQ,V%Q)P&eW^"_8;kISE!%8D.n*Lf#J3ni%R/)
%Ic!4g17hCu]kTWc<,3!iirXt;o%-\r=(&rY/TDbkWGRL)Wfp'@>-+VsDMNP-Y8WVufLU!s(?R+Nfgpb(p=O+C:%8!9;0ggQo[_fM
%oVMl"#:m&)Ma5-Ag',t*1bugqkQgr7"/[^$'mDM,B6&Rqd2Z>!kBHCa)X1'V6:o^-<JlJj&r92`s,%g.2mOJ^]`0P2aMH0*>VN>\
%Je:6K9#rmTGPN,c*0Q\DlQ\iB)m8mTPTcqb)*:[50>3%JVi1ebWJ!TPZ8/>]#mNk(9R-J=i6io2G+!_(Fg7GU;N3:@2T@<M8_QX:
%72HVtiC$"aqnlS:&b63'%mor?0qPq:\IlQt!hF?^!cUaNN]:dX"[O+t2:Ho5.cu2(0d;IrP:^[rAj6s)Qng$J?Zg"Fb1ng>F>-[#
%muN9EO,H1f?'-(Yd_b&]LQ6)hanhrJ%O4bHS\Z41((EFcNdb,%k@C-T8Sb64$N\EXaF0h&U3-.:K=9F#FheVp2qMU`2]TFZ?\Rr'
%ckSR#8A7HG&0_sahO5Eo5!i)4Z.SS;KTIUm5'qJLr^q:$qo;M8Ndrp9U?k?Z*YPbc`MpLd<l,1oX:eJk"8n-q'HL:gftC!JN^eAC
%`t9monoN8T?D$h8"=5n=8DZlKmA0jRkUEgT";XYi6@9O[!9YBm:V@g&JYU!F*+D0i]8NYb#]]>"Nc(d\HKpB.RHq"?eOLu]cgo(n
%hX9-;JrM7<O)nKmS:?a4[7[44g<s?*.*uV`]W]GET5kEPMC=0Fi-E'm2_%_[3NtVp2+*UZ,ANVT(B329W:fC;4J233I%0`bb8ugf
%-duDYd%E"Ciuh8t:?V*;KE$gJ9OkEPWc(0<etu"K0M`ME+a9E_`&DQ*.VD-B!pWUC7U8Fq^-X^OjuJ/oC3JjL$o)GL$9,WGR_Z#)
%$]'!;nSP+M]%*W9@_d*R-;Xgcer>(_6Iu46h7_cc4<BmhZ-d`_P17bBn]MAU16Oe5QacB(iE*T2;8B;(E#a"u=85neX1=Zk-A$K;
%OaecF>/\.'NY?KTFf=)l.]FGEAoB'boVF>TjdVUs6YA-MCj;cjTUS&KA]Grp$eR#4qWd>?@DX`a5E1,UZo0:/N9h67^<tR!1$:00
%/m>c4"f7U?1t-^hiaNp@BR9?hLZdK<HlM.]WMj)]3dK+L`F'(BmG:*B]q6['aQPsTONi4-!J?hdNp+ppLiBNN;?6uVrhn6eK]kg\
%.+p8=JgJU.>shb+o5H9$_t0eUE!+Ys#d`Q;<Sfp-I#0a)&8830bGiEGA/^-;#Xt'k_Gj`KA&r@X38>XlV`QQ2f8leI!:s%k\hh*V
%fi2i-XE.[hAFVO<hcarBA,7]]EE/8Bb?:_1/3M\\XNnBVYS7*Z6M#b<8-PU-q<UeQU4>gH[Fn8VGn*8n5X:W71-j(E_p$#]UZ<t=
%Jf_g5X.3$1Z."s2RG46u.<QPClr]gH9%3U7XfKiZGG6_<1IuO:9Q;:l>3:9JXN;7R\-+J`q6A,_Ul2hiSWQPC4BV_Rnf7(K6eB&<
%!+lWZeaWhQj;N/n15):<G"*)p/h&&.IkJ(j29^+(d)d!mT^6W>36E"9.-f]pn-%liE4?fVc]:phHC8uH`nH+hgYK@2S>`N]ANCsd
%o-#OD.lW<%YII+T0(mgcans>r_lTU(\JC1,)[.u-mRG+$$\(a;p$+_u`O$Jri!PmQ.ZZH*b1d78/&*(sM=>nn[+im7OfK_;4%mF'
%(2uPJ6##3I^<c!V,rD359?"G_&85%F)FOh6K_DRR<*YQ'[AG7/ZBegn)7r']$-;Mc&TdW#.'!Q3=EgMXj"-3oV>"\l/FIVr#HDQW
%[2E[YS[Ut:+s.jU\cmj26C>p+Hf7"3b4kCE>c+73j.',.er`R4@HTa+$?_L->##_;39TREXB\S\o]kWRUq8@21>.CQ:Ioa'k(W`1
%*?(DWClPW$gi/3*@.XPt'6kBV%=Q&>.+IrNet%9(*;gK!m%lp,gkD,Ol._"?]4f&&*U!T+U[Cn&(6`_iLFbU1pXh!j!!gHnN@gku
%Om.Aph+q2/@tZd#L[K6'HoVr`-f&K89mfl2XN9(<rnU("k!G@8>6sAI,+^n^2hlbL"R"@rD296FLG.?fn39>q3VH4pZO'[YeP2%b
%6*j;u%*#35*\UJq,+SZ-(.ngF7WqBuD#gV.]A4R^$uOVD"!s).m`c3]1\?pML_@'K%5s6a&5=jS88U1=VV1#7)02?agRJ;_,V.sK
%d)<H\*?Q'8a[o,)V9'(e1=B-^0-Q71H[u':NWoX:`WO`5Lc/\H//T`),tBU_nh"?9-EaES^Ql1f$8VY*]U@:TD@n^FGhsG&_>b[(
%SkP6d">M?\<N.hB`#;I]CU0]"fX"Co&+!pj^Cm)kXncq5jXAHa]Ck0KK^=*o]m*r>`V<14i98!tKW7(c0=H\`4WY;IZ@0JR3nA+,
%Wck"!-+S/OLtZm$^6)iOLpJ2J00mEEFt[F$8Vb/X>:i[>SFgoYl@MMG/dt=ED9m/%ihmZthk3g(4-f>d_^;oJSGnQu;Oe09M&Due
%VntY?RIdo?Bnc0Ng^igBkZ<)*\iP#ZbtC^]0McXhX+CffOcH#[_HSAsI5n)I!L,E:]:.n?<KK3Ad\rgl,a&0uP!I=L@6<EDkuJ^"
%cpe:^o+^'tU65K$dC@`kQ,ohE`'pn3>F>9*gc)E]c6[U=CO)\A>KO#']q0]+2c#1^C8\lYG>I^FAPZRH<VpA3?ADmK%;:`7,Gb0T
%%_C_M95m'%X0#)20'hF8!,"U^87?d$LlCsZ&:4Hb=SOJMQ_csPhMQ:2FZ0XK<&oaZ!$e@YLnG$oca-T&ajhN=Y+Fu\eFC9Q3k=t1
%Q5jpKd/%POaf>lYjU,@J#lL>bMO#ZX\[tr3NB)CJF&JfN7QX'tqk15l?+M!%?WgS";.11+\!lCWYdmiQ*ZLbh?6fn,\tR$gW&2<^
%e]A5^:V4!fci9S,Fq6Edqf<P.9h&/1.aP6cc:"LHZ(9:8l+a;!S=d[U5MV#@ee.AO4ZZ6^IAi6Pq9<nM5>4$G`o_ZOo)ofkUH:9q
%-TI/=ikt$krEP4!dsg/7M-!"Ia(.UP>h-REEJUbbdnFRg7QIccHM3C'/UN]CfSGDPYm?-T;Z2c!Fs&R1kb_N,-ulWTrMjnF\6fWd
%WF/WE=-eL"LME`^BJX"ClpU>/@c-&:_ack_=h&gVa%Z=p9NIE`SrqYuc1NG`g@A3hRS"C%/L\l&c,E*F;g#7)*BS,&>@C8C`%aUf
%L/qIj(bG#W9n5pt>-f&5ksDT=CQhbQ_i]<?iq7<p23C;:]J>]E$H$_\1n3&ceLiUU]R3_-dJYN\-4J>epF:rZmi5I4&e$!':;F@n
%'sC!.hM1Wo.qm$>m<sRPpksSB\mGL/0fP.7,nuZ%gCfrs6VN\dY0nQj36oAud;ob[Wf_p6+>$LN@'jeQB<0@;2Jpl<BEl'eLXt2T
%:3$c+*hM4d\prcE8D6ISjYN.eL90CKp:c./Ceb028*Cpb,*/N>Z2PY3+9H1LHSS5_Cpp^Q9QH?0E+t?_%l*+7lP<fg*irakT,Jej
%\f>t7(6H@lj9l!WNMWVA10%ldB1RH^Ep#8%$k5_aAka4\.IN4U;\3.ng/cMAc'XM\]O[+dE[uD`nWH4T$GBhN7.3<Ipld._Y?bL>
%c9d"97LH]pCZ+$>a'#1nE/'?`N(\>e[p'r_(-)gIfW=VB%XD,raNHcIF)%:-"&hf_>L8o.m+#ro:-n50TlkBgI^f+i^)7(a<YK[l
%+Yl[@0D7i4$0fd=-J3%^2'7cb/^6hZ'0CMgVId<A-7Iu\8];I9cC]kE`Yf(N/J`;!k:1FK'D5B\9k'BH-L7L-l.I%Eg9\mAc7Wfu
%S[BXM",S2q&o5<RP_Z?)"K'C:kK"^A#3'R5bCJUM7FXdlU5%A,\]@f332Ud7;qi2OA*ip41IC#T+EQ2KJ5[5jX)Y\NqN0j&b(nSK
%UVrY=b'Qs2&?D@n(sj$FnJ+V0-V&M2$,Pk@5Ah3I9`8f`2@S!&jml)DXjEo37SnnP)@8c5[9P=niL_97TSnLSC*LdD)a?1?=HMH>
%8\<A<m9q?TeHFT[4"6TpN!f[nLg>uWK0blcc=4%(YoVuTK.^m3Qs^$R<j/6t`pebQ7W]-2Yo\;"WKLXUjDX:;,0CuodK5A!T[0(&
%Iql>CT9H8CRiDW(UDQRp1eI]og`+&cE[X4-s!4\sTVU]EN[^dhefJHj^7gqqn-c6A7=<dX2.)MP+_&?dCaPA-oYlUg7;5sg=j@,0
%H[]-)H\n]=:`'XP,DSOA7$?)JDFF3Z?SSCb+]XH3ol%SAeF:AKeTCDjRDboK6a4,NEj&oF;B?-XM:WS@Hd2ecADC4g:f[eUceYZJ
%Re*;4L#q#Y.!K:5eFYoZ6VZo>RNIG'!cY>'kMm[h[=f+TH*=5*(g9tM)A"FS%*CAOfSeUQ`1Ms'A2Vo#-tQ?M\OZM&kT_WUe_r1>
%QtF/7kR"&%UT0;J&7V>lgb*_ZNSJ0/gmo(+A>9E=$s?X:s1-#-]6KKXgEQnrYZqJI"F0b@mUa*a`e?COfn31sccVN/*)3KGLOQh[
%\0C1pDGF@Biog"+$NA(:1f?=H[taQfW"/G2d&$]eNI^N6*H$h]d`?g-n9!MRfTB+J(UEA3Ve=,`]`g+"R(8u^Y5QQs0L0Vl\F@a9
%I91VaOXQ%7MtCE./=-?b],!EE641dUY)!uQm@6j]DP<'>Ra[`maIQB\\1]'^CneVm7Sdr!%UTD5Qbur,8MNY6V%E@p[k,YR@s_RH
%edQ9ee[kQ`HOqLOLbkR*Q![]qI+rI[&0LWe4eEoUE188US:AK+cQMi&lG2"a+G8mea#2YEJLJN;=q[5.$]Sh'92:pR1$m%#HlgaT
%"/-ih;lsc0AFsn:N[]:o%'EdlG^D)OQBbo4[Yl<G,;,obgM@&:pjftLH_(uCR)\7KXrNN]CPF:$'2/VB:?'C$2UAY(2rnNN<ig1j
%eDkM\H["ESK9M`0e<LB<Q3R@R>aCq@]?k*S6,$);^:%NQh:HV/\rp7'8o.N]\Vht^fA8/QQUo4?mKu6W>p4ak]IR!JPhi]i]rMuG
%/R<P1leSu/?.h#Gj=S.U=DWh^/Iga<Q'#;cN7s2XB"Sm^8dTa5>J\9Z`Gt*nhpnghp(:B>R.6*ggZ:n(j!N<Tk9E,`5@:#^@FjZ&
%QM6_QX*39`Cu"c10uXh)N%/n9p[c/7QliMX\^=nXm`+n^2f5"`Kiu+k=W_XDC2V2+h2m2_R9)jk'baLm@BeQEGWNL%opg]5N"?;d
%RqmA:-oYa%;FGMogZqO,<A$b<g)q(.O>b)c9&fJ0D1Z'n4PHtsRe2L7Q*+`,f>[[$RaE]OL[]U7>!_AW]fa\#rHs%iD16]f?!r5A
%\UjE4F2[*.0=H*P?1hpgDt*a@hCj5h;iJiCLk]gt9(6Pg6BJ*G>9mk2=)96mN_SjGNlPu`<I$tj\1(k`C)Rl`B!a5RNh>F^rG'?_
%YF1%)Gp>X:V6Vc#Zu&$7hdDr2Y;!VeRAdj$&2T>.?#BJ4P^dqHpFEn+0`,Fb2qhb^2lbbY0#F`6`Wo_g1)sh,H.,;[j80'k@4LNs
%HF^g-k'`*TfgQ#gE3Zm+ADnV"oTe@bgue?41CL%6COWh8(Zrn0^8K=u`iJV-WcNp?,?OW?>UlQkB]n;)<6j4WBI&t93%#_m^lba*
%*(K4qWaMkQ+!!hHf;_B+KL2k=,WT,3U<9(QnT@sk@FnG#*(K9$^V,e0-HW,FhH_$/Fn&rTAL1S[I^e+Q!a$<_&3KP]]9YhFLgY1*
%B6SFJ&E3it7'R9?)d74RW\u?)8Y?ghH6GpdKY!f(PQXL=C9S*KY<ThdhMc(MI06XA)03XXdV9!KctSV#&qemO&=enV%3PADjp\:W
%H.oOK,*+@c+PGYCYOf"DK!+_@DJoI.G:hAQK:r:oA=n0]Z<$'?e[7\'*@*"&lEmPppfBZ^1Te5IK7%);C^dBMc3_Ck8l<?ts/F!g
%g3/aiq99Y7(B)4JYP@)>kLo>#$bTnqc]ND^`)5O#4fteV9cC;,W<H"8@hf30?P4=W2CYma8H-dC!O=R19(qA<VL@?o#4[D4!2fpR
%H<^ogN8IoY]1kM"rqQ:15CC2a^=qbZrO,E@B=h:N*^$CqoV\gJF)@imPLX/.dLI60._Wa%.:Eh>$2,h88,Hqag9>-4pU-S>h_KpN
%CdbT<p%)'Q@L_pTbAE+W+<Kq?_rhEoX*o@i%j4m;S9J$23$K,88E\]&P'H(+`KGn253O84KDl&YFP3KVQ)G_WJe4t`NL/f^Q#(A/
%FQ2epc5l"jkN\i17*]<l<K@-4pDKLW1X=I,,+PVBU'mp8Eo*B]ZftkkGV?#AhRq4]?XIDP%+!1Hn"0"9<IT7;-0&)<;8o?)n];:4
%<8Sj3>clZCr!eK$^C/K+1Q%e9.2%c$KKQkR7sDg5'NMeKl&3W^m<MJbP16$/_++`rf:k,C,1\gSdQ%6nIaf",O]=\B(N76j.V@9a
%!FO5s<Tm^Kns9(`><U&o>^bT?;386b?I][18jhNI^uM#`<J%/(J.k8+HNqA*e_Oss1f6`&DagUXG#0?r)ejNIdfK.7W8;oPRh,22
%2[+<&C69U<_-JZFkaFGq_;^ut)7dLnG(U0>_6lc_H8s]TDA0]G<%U@p$)&#+H\+2[r:NV;%/Sf#q<C$OG^B>1!E[UA]r*jjTa[Pb
%h_@Ds)Z:iP[N6.c[<:[q50]<#&i&UWA+W.,Mj*YmmbPW8:e8DC9,CF4-5Yb>ZNYoXMU^g)W1\G&kLIRS<7Z8['J1"r(ar)fQsLob
%!QZj9#1<<;=(BudDg"2JGD#S]\Ba3>$7/bPA5;O=7fmN8<&oi7ZpN/8JG8#8#IA<][R1IJkFL[2)B:=l"X"I;,PS[kn>Zs+NT>[h
%@n!P[72ui`#(Cmo73rVb\#4cU?Tua%KAXB#(Lt;NDtl5:8(s6liALn!(*d4]XM\k5\[8o%1Y`.uI<@`,5<nmWWrLXF!2r!DjLBR.
%n!i3'"aMJA.-K<$_L,+F*%rH=L:cUK6$)eAT3prC&HJ_@YR?^e+HAmDrViYAj]P]d]*Eca>J+jXe*=;qXYE=B\cpHH"9Q0*m\0of
%LPSne*^,Bedg.OaI>$qp9_%tQ!j:?7OJ&6j)OZ/qa\g7ma%m&b2PZE]9YrK((u+jLMrMS+ndaJf$J/KIM<O%p#1rF#1Kkn((<Eqt
%^@h1?CC$e.B^.;MI@3ETos[c_3S:>DZVYde/AkRLf^#6(CXO',:XP/i"@P/iL@_mt;B!?4%TIb3PbZgL?0(8T)pVilaW0<;0:Y,2
%34/(o<nJ=>pVA5gHl<WtqS#/.bAU5l--L%.>IX7M+0K&GBj;J\IKm>UpWmf=C9aii0^H!E5t<g!QuHaW09$j)_f93djfhSaWjF6G
%6b.$0Cf$Z[;7Y(?gQul&DG@t[=.b0Fg6,m+8+ggb3Eq_6U!jH"fa:$5K`--_*0-M4r^Pf6dta:Y2a]M(7,[=$T!(OS]9m^^9Y#b2
%Ru)ASA++%'r?<@mkS>GCmC<N7>b#(2l?\+@?d?3Ol$5(CDl<IsGmATM(B/9j9GOlh:"iJP"*QW02<ZNlSc-b#HT)UU-HuG<ikTob
%_-3?f)g18p:T!Cu?Yr;W44i9uGI&%`Kr(XV4T0YXB6S7;K]>^r.rJEKrF2)m(?[14V45<0Y6R5N?fRtK5Gn`n^a*WLipm@/*FOj"
%p$04pkVrCT=,Z;"rVbWU\,YI&I/BQ8rSRY2qg\53J+jKRombTmkC<@Ns-NJ0r."_D00aoUL4At?rp`5Nq1&=/J,J4'pHS]$huDM^
%pt(#n^]+0)O8n`7rptX9a8beps5X$T\,YqNJ,\("o[!R.kI5s>?iTs%`kif\rnnmtiSXY/s6\_Dh>[irkKGa~>
%AI9_PrivateDataEnd
